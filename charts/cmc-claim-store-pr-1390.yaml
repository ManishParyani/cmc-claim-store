NAME: cmc-claim-store-pr-1390
LAST DEPLOYED: Wed Jan 22 18:38:36 2020
NAMESPACE: money-claims
STATUS: failed
REVISION: 1
USER-SUPPLIED VALUES:
claimStoreCCD:
  ccd:
    adminWeb:
      enabled: true
      environment:
        NODE_TLS_REJECT_UNAUTHORIZED: 0
      idamClientSecret:
        value: ${ADMIN_WEB_IDAM_SECRET}
      s2sKey: ${ADMIN_S2S_KEY}
    apiGatewayWeb:
      enabled: true
      idamClientSecret:
        value: ${API_GATEWAY_IDAM_SECRET}
      s2sKey: ${API_GATEWAY_S2S_KEY}
    managementWeb:
      enabled: true
      environment:
        NODE_TLS_REJECT_UNAUTHORIZED: 0
    postgresql:
      enabled: false
  enabled: true
global:
  subscriptionId: 1c4f0704-a29e-403d-b719-b9
java:
  applicationPort: 4400
  environment:
    CLAIM_STAYED_SCHEDULE: ""
    CLAIM_STORE_DB_HOST: cmc-claim-store-pr-1390-postgres
    CLAIM_STORE_DB_NAME: claimstore
    CLAIM_STORE_DB_PASSWORD: hmcts
    CLAIM_STORE_DB_PORT: 5432
    CLAIM_STORE_DB_USERNAME: hmcts
    CLAIM_STORE_TEST_SUPPORT_ENABLED: true
    CMC_DB_HOST: cmc-claim-store-pr-1390-postgres
    CMC_DB_NAME: cmc
    CMC_DB_PASSWORD: hmcts
    CMC_DB_PORT: 5432
    CMC_DB_USERNAME: hmcts
    CORE_CASE_DATA_API_URL: http://cmc-claim-store-pr-1390-data-store-api
    DOC_ASSEMBLY_URL: false
    DOCUMENT_MANAGEMENT_URL: http://dm-store-aat.service.core-compute-aat.internal
    DOCUMENT_MANAGEMENT_USERROLES: caseworker-cmc,citizen
    FEATURE_TOGGLES_SAVE_CLAIM_STATE_ENABLED: true
    FEES_URL: http://fees-register-api-aat.service.core-compute-aat.internal
    FRONTEND_BASE_URL: https://cmc-citizen-frontend-aat.service.core-compute-aat.internal
    IDAM_API_URL: https://idam-api.aat.platform.hmcts.net
    IDAM_S2S_AUTH_URL: http://rpe-service-auth-provider-aat.service.core-compute-aat.internal
    LOG_LEVEL: DEBUG
    MILO_CSV_SCHEDULE: '-'
    MILO_CSV_SENDER: noreply@reform.hmcts.net
    PAY_URL: http://payment-api-aat.service.core-compute-aat.internal
    PDF_SERVICE_URL: http://cmc-pdf-service-aat.service.core-compute-aat.internal
    REFORM_ENVIRONMENT: preview
    REFORM_SERVICE_NAME: claim-store
    REFORM_TEAM: cmc
    RESPOND_TO_CLAIM_URL: https://cmc-citizen-frontend-aat.service.core-compute-aat.internal/first-contact/start
    RPA_NOTIFICATIONS_COUNTYCOURTJUDGEMENTRECIPIENT: civilmoneyclaims+rpa-county-court-judgement@gmail.com
    RPA_NOTIFICATIONS_MORETIMEREQUESTEDRECIPIENT: civilmoneyclaims+rpa-more-time-requested@gmail.com
    RPA_NOTIFICATIONS_PAIDINFULLRECIPIENT: civilmoneyclaims+rpa-paid-in-full@gmail.com
    RPA_NOTIFICATIONS_RESPONSERECIPIENT: civilmoneyclaims+rpa-defence-response@gmail.com
    RPA_NOTIFICATIONS_SEALEDCLAIMRECIPIENT: civilmoneyclaims+rpa-claim-issued@gmail.com
    RPA_NOTIFICATIONS_SENDER: noreply@reform.hmcts.net
    SEND_LETTER_URL: http://rpe-send-letter-service-aat.service.core-compute-aat.internal
    SPRING_MAIL_HOST: mta.reform.hmcts.net
    SPRING_MAIL_PORT: 25
    SPRING_MAIL_PROPERTIES_MAIL_SMTP_SSL_TRUST: mta.reform.hmcts.net
    SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: true
    SPRING_MAIL_TEST_CONNECTION: false
    STAFF_NOTIFICATIONS_RECIPIENT: civilmoneyclaims+staff-int-tests@gmail.com
    STAFF_NOTIFICATIONS_SENDER: noreply@reform.hmcts.net
  image: hmctspublic.azurecr.io/cmc/claim-store:latest
  ingressHost: cmc-claim-store-pr-1390.service.core-compute-preview.internal
  keyVaults:
    cmc:
      resourceGroup: cmc
      secrets:
      - AppInsightsInstrumentationKey
      - citizen-oauth-client-secret
      - claim-store-s2s-secret
      - anonymous-caseworker-username
      - anonymous-caseworker-password
      - system-update-username
      - system-update-password
      - notify-api-key
      - milo-recipient
postgresql:
  image:
    tag: 11.3.0
  initdbScripts:
    init.sql: |-
      CREATE DATABASE claimstore WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
      CREATE DATABASE cmc WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
      CREATE DATABASE features WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
      CREATE DATABASE "data-store" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
      CREATE DATABASE "definition-store" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
  nameOverride: postgres
  persistence:
    enabled: false
  postgresqlDatabase: user-profile
  postgresqlPassword: hmcts
  postgresqlUsername: hmcts
  resources:
    requests:
      cpu: 25m
tags:
  ccd-idam-pr: true
  cmc-citizen-frontend-pod: true
  cmc-claim-store-postgresql-pod: true

COMPUTED VALUES:
ccd:
  blobstorage:
    global:
      ccdAdminWebIngress: ""
      ccdApiGatewayIngress: ""
      ccdCaseManagementWebIngress: ""
      ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
      ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
      ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
      dmStoreUrl: http://{{ .Release.Name }}-dm-store
      draftStoreUrl: http://{{ .Release.Name }}-draft-store
      emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
      idamApiUrl: ""
      idamWebUrl: ""
      paymentsUrl: http://{{ .Release.Name }}-payment-api
      postgresPassword: hmcts
      postgresUsername: hmcts
      s2sUrl: http://{{ .Release.Name }}-s2s
      subscriptionId: 1c4f0704-a29e-403d-b719-b9
    location: uksouth
    releaseNameOverride: '{{ .Release.Name }}-blobstorage'
    resourceGroup: ccd-aks
    setup:
      containers:
      - definition-store
      - dm-store
    teamName: CCD
  ccd:
    activityApi:
      enabled: false
    adminWeb:
      enabled: true
    apiGatewayWeb:
      enabled: false
    blobstorage:
      enabled: false
    ccpay:
      enabled: false
    definitionImporter:
      enabled: true
    dmStore:
      enabled: false
    draftStore:
      enabled: false
    emAnnotation:
      enabled: false
    managementWeb:
      enabled: false
    postgresql:
      enabled: true
    printService:
      enabled: false
    s2s:
      enabled: true
    testStubsService:
      enabled: false
    userProfileImporter:
      enabled: true
  ccd-admin-web:
    global:
      ccdAdminWebIngress: ""
      ccdApiGatewayIngress: ""
      ccdCaseManagementWebIngress: ""
      ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
      ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
      ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
      dmStoreUrl: http://{{ .Release.Name }}-dm-store
      draftStoreUrl: http://{{ .Release.Name }}-draft-store
      emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
      idamApiUrl: ""
      idamWebUrl: ""
      paymentsUrl: http://{{ .Release.Name }}-payment-api
      postgresPassword: hmcts
      postgresUsername: hmcts
      s2sUrl: http://{{ .Release.Name }}-s2s
      subscriptionId: 1c4f0704-a29e-403d-b719-b9
    idam-pr:
      api:
        url: '{{ tpl .Values.global.idamApiUrl $}}'
      cpuLimits: 2500m
      cpuRequests: 25m
      global:
        ccdAdminWebIngress: ""
        ccdApiGatewayIngress: ""
        ccdCaseManagementWebIngress: ""
        ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
        ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
        ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
        dmStoreUrl: http://{{ .Release.Name }}-dm-store
        draftStoreUrl: http://{{ .Release.Name }}-draft-store
        emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
        idamApiUrl: ""
        idamWebUrl: ""
        paymentsUrl: http://{{ .Release.Name }}-payment-api
        postgresPassword: hmcts
        postgresUsername: hmcts
        s2sUrl: http://{{ .Release.Name }}-s2s
        subscriptionId: 1c4f0704-a29e-403d-b719-b9
      memoryLimits: 1024Mi
      memoryRequests: 512Mi
      redirect_uris:
        CCD Admin:
        - https://{{ tpl .Values.global.ccdAdminWebIngress $}}/oauth2redirect
        test-public-service:
        - http://localhost/oauth2/receiver
      releaseNameOverride: '{{ .Release.Name }}-ccd-admin-web-idam-pr'
      web_public:
        url: '{{ tpl .Values.global.idamWebUrl $}}'
    nodejs:
      applicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
      applicationPort: 3100
      cpuLimits: 1
      cpuRequests: 25m
      environment:
        ADMIN_ALL_USER_ROLES_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl $}}/api/user-roles'
        ADMINWEB_AUTHORIZATION_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl $}}/api/idam/adminweb/authorization'
        ADMINWEB_CREATE_DEFINITION_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl
          $}}/api/draft'
        ADMINWEB_DEFINITIONS_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl $}}/api/drafts'
        ADMINWEB_IMPORT_AUDITS_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl $}}/api/import-audits'
        ADMINWEB_IMPORT_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl $}}/import'
        ADMINWEB_JURISDICTIONS_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl $}}/api/data/jurisdictions'
        ADMINWEB_LOGIN_URL: '{{ tpl .Values.global.idamWebUrl $}}/login'
        ADMINWEB_ROLES_WHITELIST: ccd-import,ccd-import-validate
        ADMINWEB_SAVE_USER_PROFILE_URL: '{{ tpl .Values.global.ccdUserProfileUrl $}}/users/save'
        ADMINWEB_UPDATE_DEFINITION_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl
          $}}/api/draft/save'
        ADMINWEB_USER_PROFILE_URL: '{{ tpl .Values.global.ccdUserProfileUrl $}}/users'
        ADMINWEB_USER_ROLE_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl $}}/api/user-role'
        ADMINWEB_WHOAMI_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl $}}/api/idam/profile'
        HPKP_MAX_AGE: 2592000
        HPKP_SHA256S: Set-proper-SHA256s
        IDAM_ADMIN_WEB_SERVICE_KEY: AAAAAAAAAAAAAAAA
        IDAM_BASE_URL: '{{ tpl .Values.global.idamApiUrl $}}'
        IDAM_OAUTH2_CLIENT_ID: ccd_admin
        IDAM_OAUTH2_LOGOUT_ENDPOINT: '{{ tpl .Values.global.idamApiUrl $}}/session/:token'
        IDAM_OAUTH2_TOKEN_ENDPOINT: '{{ tpl .Values.global.idamApiUrl $}}/oauth2/token'
        IDAM_S2S_URL: '{{ tpl .Values.global.s2sUrl $}}'
        IDAM_SERVICE_NAME: ccd_admin
        NODE_CONFIG_DIR: ./config
        NODE_ENV: production
        REFORM_SERVICE_NAME: admin-web
        REFORM_TEAM: ccd
        SECURE_AUTH_COOKIE_ENABLED: true
        SECURITY_REFERRER_POLICY: origin
        TS_BASE_URL: ./src/main
        USE_CSRF_PROTECTION: true
        UV_THREADPOOL_SIZE: 64
      global:
        ccdAdminWebIngress: ""
        ccdApiGatewayIngress: ""
        ccdCaseManagementWebIngress: ""
        ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
        ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
        ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
        dmStoreUrl: http://{{ .Release.Name }}-dm-store
        draftStoreUrl: http://{{ .Release.Name }}-draft-store
        emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
        enableKeyVaults: false
        idamApiUrl: ""
        idamWebUrl: ""
        paymentsUrl: http://{{ .Release.Name }}-payment-api
        postgresPassword: hmcts
        postgresUsername: hmcts
        s2sUrl: http://{{ .Release.Name }}-s2s
        subscriptionId: 1c4f0704-a29e-403d-b719-b9
      image: hmctspublic.azurecr.io/ccd/admin-web:latest
      imagePullPolicy: IfNotPresent
      ingressClass: traefik
      livenessDelay: 5
      livenessFailureThreshold: 3
      livenessPath: /health/liveness
      livenessPeriod: 15
      livenessTimeout: 3
      memoryLimits: 512Mi
      memoryRequests: 64Mi
      pdb:
        enabled: true
        maxUnavailable: 50%
      prometheus:
        enabled: false
        path: /metrics
      readinessDelay: 5
      readinessPath: /health
      readinessPeriod: 15
      readinessTimeout: 3
      registerAdditionalDns:
        enabled: false
      releaseNameOverride: '{{ .Release.Name }}-ccd-admin-web'
      replicas: 1
      secrets:
        IDAM_OAUTH2_AW_CLIENT_SECRET:
          disabled: true
          key: key
          secretRef: ccd-admin-web-oauth2-client-secret
      useInterpodAntiAffinity: false
    tags:
      idam-pr: false
  ccd-api-gateway-web:
    global:
      ccdAdminWebIngress: ""
      ccdApiGatewayIngress: ""
      ccdCaseManagementWebIngress: ""
      ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
      ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
      ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
      dmStoreUrl: http://{{ .Release.Name }}-dm-store
      draftStoreUrl: http://{{ .Release.Name }}-draft-store
      emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
      idamApiUrl: ""
      idamWebUrl: ""
      paymentsUrl: http://{{ .Release.Name }}-payment-api
      postgresPassword: hmcts
      postgresUsername: hmcts
      s2sUrl: http://{{ .Release.Name }}-s2s
      subscriptionId: 1c4f0704-a29e-403d-b719-b9
    nodejs:
      applicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
      applicationPort: 3453
      cpuLimits: 1
      cpuRequests: 25m
      environment:
        CORS_ORIGIN_METHODS: GET,POST,OPTIONS,PUT,DELETE
        CORS_ORIGIN_WHITELIST: https://{{ tpl .Values.global.ccdCaseManagementWebIngress
          $}},http://{{ tpl .Values.global.ccdCaseManagementWebIngress $}},{{ tpl
          .Values.global.ccdCaseManagementWebIngress $}},*
        IDAM_BASE_URL: '{{ tpl .Values.global.idamApiUrl $}}'
        IDAM_OAUTH2_CLIENT_ID: ccd_gateway
        IDAM_OAUTH2_LOGOUT_ENDPOINT: '{{ tpl .Values.global.idamApiUrl $ }}/session/:token'
        IDAM_OAUTH2_TOKEN_ENDPOINT: '{{ tpl .Values.global.idamApiUrl $ }}/oauth2/token'
        IDAM_S2S_URL: '{{ tpl .Values.global.s2sUrl $}}'
        IDAM_SERVICE_KEY: AAAAAAAAAAAAAAAA
        IDAM_SERVICE_NAME: ccd_gw
        PROXY_AGGREGATED: '{{ tpl .Values.global.ccdDataStoreUrl $}}'
        PROXY_CASE_ACTIVITY: http://ccd-case-activity-api
        PROXY_DATA: '{{ tpl .Values.global.ccdDataStoreUrl $}}'
        PROXY_DEFINITION_IMPORT: '{{ tpl .Values.global.ccdDefinitionStoreUrl $}}'
        PROXY_DOCUMENT_MANAGEMENT: '{{ tpl .Values.global.dmStoreUrl $}}'
        PROXY_MV_ANNOTATIONS_API_URL: '{{ tpl .Values.global.emAnnotationUrl $}}'
        PROXY_PAYMENTS: '{{ tpl .Values.global.paymentsUrl $}}'
        PROXY_PRINT_SERVICE: http://ccd-case-print-service
        SECURE_AUTH_COOKIE_ENABLED: true
      global:
        ccdAdminWebIngress: ""
        ccdApiGatewayIngress: ""
        ccdCaseManagementWebIngress: ""
        ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
        ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
        ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
        dmStoreUrl: http://{{ .Release.Name }}-dm-store
        draftStoreUrl: http://{{ .Release.Name }}-draft-store
        emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
        enableKeyVaults: false
        idamApiUrl: ""
        idamWebUrl: ""
        paymentsUrl: http://{{ .Release.Name }}-payment-api
        postgresPassword: hmcts
        postgresUsername: hmcts
        s2sUrl: http://{{ .Release.Name }}-s2s
        subscriptionId: 1c4f0704-a29e-403d-b719-b9
      image: hmctspublic.azurecr.io/ccd/api-gateway-web:latest
      imagePullPolicy: IfNotPresent
      ingressClass: traefik
      keyVaults:
        ccd:
          secrets:
          - ccd-api-gateway-oauth2-client-secret
          - ccd-gw-s2s-secret
          - postcode-info-address-lookup-token
      livenessDelay: 5
      livenessFailureThreshold: 3
      livenessPath: /health/liveness
      livenessPeriod: 15
      livenessTimeout: 3
      memoryLimits: 512Mi
      memoryRequests: 64Mi
      pdb:
        enabled: true
        maxUnavailable: 50%
      prometheus:
        enabled: false
        path: /metrics
      readinessDelay: 5
      readinessPath: /health
      readinessPeriod: 15
      readinessTimeout: 3
      registerAdditionalDns:
        enabled: false
      releaseNameOverride: '{{ .Release.Name }}-ccd-api-gw'
      replicas: 1
      secrets:
        IDAM_OAUTH2_CLIENT_SECRET:
          disabled: true
          key: key
          secretRef: ccd-api-gateway-oauth2-client-secret
      useInterpodAntiAffinity: false
  ccd-case-activity-api:
    global:
      ccdAdminWebIngress: ""
      ccdApiGatewayIngress: ""
      ccdCaseManagementWebIngress: ""
      ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
      ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
      ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
      dmStoreUrl: http://{{ .Release.Name }}-dm-store
      draftStoreUrl: http://{{ .Release.Name }}-draft-store
      emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
      idamApiUrl: ""
      idamWebUrl: ""
      paymentsUrl: http://{{ .Release.Name }}-payment-api
      postgresPassword: hmcts
      postgresUsername: hmcts
      s2sUrl: http://{{ .Release.Name }}-s2s
      subscriptionId: 1c4f0704-a29e-403d-b719-b9
    nodejs:
      applicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
      applicationPort: 3460
      cpuLimits: 500m
      cpuRequests: 25m
      environment:
        APP_REQUEST_TIMEOUT: 5
        APP_STORE_CLEANUP_CRONTAB: '* * * * *'
        AUTH_BLACK_LIST: solicitor
        AUTH_WHITE_LIST: ^caseworker-.+
        CORS_ORIGIN_METHODS: GET,POST,OPTIONS
        CORS_ORIGIN_WHITELIST: '{{ tpl .Values.global.ccdCaseManagementWebIngress
          $}}'
        IDAM_BASE_URL: '{{ tpl .Values.global.idamApiUrl $}}'
        REDIS_ACTIVITY_TTL: 5
        REDIS_HOST: ${SERVICE_NAME}-redis-master
        REDIS_KEY_PREFIX: 'activity:'
        REDIS_PASSWORD: fake-password
        REDIS_PORT: 6379
        REDIS_SSL_ENABLED: false
        REDIS_USER_DETAILS_TTL: 6000
      global:
        ccdAdminWebIngress: ""
        ccdApiGatewayIngress: ""
        ccdCaseManagementWebIngress: ""
        ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
        ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
        ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
        dmStoreUrl: http://{{ .Release.Name }}-dm-store
        draftStoreUrl: http://{{ .Release.Name }}-draft-store
        emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
        enableKeyVaults: false
        idamApiUrl: ""
        idamWebUrl: ""
        paymentsUrl: http://{{ .Release.Name }}-payment-api
        postgresPassword: hmcts
        postgresUsername: hmcts
        s2sUrl: http://{{ .Release.Name }}-s2s
        subscriptionId: 1c4f0704-a29e-403d-b719-b9
      image: hmctspublic.azurecr.io/ccd/case-activity-api:latest
      imagePullPolicy: IfNotPresent
      ingressClass: traefik
      livenessDelay: 5
      livenessFailureThreshold: 3
      livenessPath: /health/liveness
      livenessPeriod: 15
      livenessTimeout: 3
      memoryLimits: 512Mi
      memoryRequests: 64Mi
      pdb:
        enabled: true
        maxUnavailable: 50%
      prometheus:
        enabled: false
        path: /metrics
      readinessDelay: 5
      readinessPath: /health
      readinessPeriod: 15
      readinessTimeout: 3
      registerAdditionalDns:
        enabled: false
      releaseNameOverride: '{{ .Release.Name }}-ccd-case-activity-api'
      replicas: 1
      useInterpodAntiAffinity: false
    redis:
      cluster:
        enabled: false
        slaveCount: 1
      configmap: '# maxmemory-policy volatile-lru'
      global:
        ccdAdminWebIngress: ""
        ccdApiGatewayIngress: ""
        ccdCaseManagementWebIngress: ""
        ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
        ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
        ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
        dmStoreUrl: http://{{ .Release.Name }}-dm-store
        draftStoreUrl: http://{{ .Release.Name }}-draft-store
        emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
        idamApiUrl: ""
        idamWebUrl: ""
        paymentsUrl: http://{{ .Release.Name }}-payment-api
        postgresPassword: hmcts
        postgresUsername: hmcts
        s2sUrl: http://{{ .Release.Name }}-s2s
        subscriptionId: 1c4f0704-a29e-403d-b719-b9
      image:
        pullPolicy: Always
        registry: docker.io
        repository: bitnami/redis
        tag: 4.0.12
      master:
        affinity: {}
        command: /run.sh
        disableCommands:
        - FLUSHDB
        - FLUSHALL
        extraFlags: []
        livenessProbe:
          enabled: true
          failureThreshold: 5
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        persistence:
          accessModes:
          - ReadWriteOnce
          enabled: false
          path: /data
          size: 8Gi
          subPath: ""
        podAnnotations: {}
        podLabels: {}
        port: 6379
        readinessProbe:
          enabled: true
          failureThreshold: 5
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        securityContext:
          enabled: true
          fsGroup: 1001
          runAsUser: 1001
        service:
          annotations: {}
          loadBalancerIP: null
          port: 6379
          type: ClusterIP
        statefulset:
          updateStrategy: RollingUpdate
      metrics:
        enabled: false
        image:
          pullPolicy: IfNotPresent
          registry: docker.io
          repository: oliver006/redis_exporter
          tag: v0.28.0
        service:
          annotations:
            prometheus.io/port: "9121"
            prometheus.io/scrape: "true"
          type: ClusterIP
        serviceMonitor:
          enabled: false
          selector:
            prometheus: kube-prometheus
      nameOverride: redis
      networkPolicy:
        enabled: false
      password: fake-password
      persistence: {}
      rbac:
        create: false
        role:
          rules: []
      serviceAccount:
        create: false
        name: null
      slave:
        affinity: {}
        service:
          annotations: {}
          loadBalancerIP: null
          type: ClusterIP
      sysctlImage:
        command: []
        enabled: false
        mountHostSys: false
        pullPolicy: Always
        registry: docker.io
        repository: bitnami/minideb
        tag: latest
      usePassword: true
      usePasswordFile: false
      volumePermissions:
        image:
          pullPolicy: IfNotPresent
          registry: docker.io
          repository: bitnami/minideb
          tag: latest
  ccd-case-management-web:
    global:
      ccdAdminWebIngress: ""
      ccdApiGatewayIngress: ""
      ccdCaseManagementWebIngress: ""
      ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
      ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
      ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
      dmStoreUrl: http://{{ .Release.Name }}-dm-store
      draftStoreUrl: http://{{ .Release.Name }}-draft-store
      emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
      idamApiUrl: ""
      idamWebUrl: ""
      paymentsUrl: http://{{ .Release.Name }}-payment-api
      postgresPassword: hmcts
      postgresUsername: hmcts
      s2sUrl: http://{{ .Release.Name }}-s2s
      subscriptionId: 1c4f0704-a29e-403d-b719-b9
    idam-pr:
      api:
        url: '{{ tpl .Values.global.idamApiUrl $}}'
      cpuLimits: 2500m
      cpuRequests: 25m
      global:
        ccdAdminWebIngress: ""
        ccdApiGatewayIngress: ""
        ccdCaseManagementWebIngress: ""
        ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
        ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
        ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
        dmStoreUrl: http://{{ .Release.Name }}-dm-store
        draftStoreUrl: http://{{ .Release.Name }}-draft-store
        emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
        idamApiUrl: ""
        idamWebUrl: ""
        paymentsUrl: http://{{ .Release.Name }}-payment-api
        postgresPassword: hmcts
        postgresUsername: hmcts
        s2sUrl: http://{{ .Release.Name }}-s2s
        subscriptionId: 1c4f0704-a29e-403d-b719-b9
      memoryLimits: 1024Mi
      memoryRequests: 128Mi
      redirect_uris:
        CCD:
        - https://{{ tpl .Values.global.ccdCaseManagementWebIngress $}}/oauth2redirect
      releaseNameOverride: '{{ .Release.Name }}-ccd-idam-pr'
      web_public:
        url: '{{ tpl .Values.global.idamWebUrl $}}'
    nodejs:
      applicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
      applicationPort: 3451
      cpuLimits: 1
      cpuRequests: 25m
      environment:
        ANNOTATION_API_URL: https://{{ tpl .Values.global.ccdApiGatewayIngress $}}/em-anno"
        CCD_ACTIVITY_BATCH_COLLECTION_DELAY_MS: 1
        CCD_ACTIVITY_MAX_REQUEST_PER_BATCH: 25
        CCD_ACTIVITY_NEXT_POLL_REQUEST_MS: 5000
        CCD_ACTIVITY_RETRY: 5
        CCD_ACTIVITY_URL: https://{{ tpl .Values.global.ccdApiGatewayIngress $}}/activity
        CCD_API_URL: https://{{ tpl  .Values.global.ccdApiGatewayIngress $ }}/aggregated
        CCD_DATA_URL: https://{{ tpl .Values.global.ccdApiGatewayIngress $}}/data
        CCD_GW_LOGOUT_URL: https://{{ tpl .Values.global.ccdApiGatewayIngress $ }}/logout
        CCD_GW_OAUTH2_CLIENT_ID: ccd_gateway
        CCD_GW_OAUTH2_URL: https://{{ tpl .Values.global.ccdApiGatewayIngress $}}/oauth2
        CCD_PAGE_SIZE: 25
        DM_URL: https://{{ tpl .Values.global.ccdApiGatewayIngress $}}/documents
        DM_URL_REMOTE: ^https?://(?:{{ .Release.Name }}-dm-store(?::\d+)?)/documents
        IDAM_LOGIN_URL: '{{ .Values.global.idamWebUrl }}/login'
        PAYMENTS_URL: https://{{ tpl .Values.global.ccdApiGatewayIngress $ }}/payments
        POSTCODE_LOOKUP_URL: https://gateway-ccd.aat.platform.hmcts.net/addresses?postcode={{
          .Values.postcodeParam }}
        PRINT_SERVICE_URL: https://{{ tpl .Values.global.ccdApiGatewayIngress $}}/print
        PRINT_SERVICE_URL_REMOTE: https://return-case-doc-ccd.nonprod.platform.hmcts.net
      global:
        ccdAdminWebIngress: ""
        ccdApiGatewayIngress: ""
        ccdCaseManagementWebIngress: ""
        ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
        ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
        ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
        dmStoreUrl: http://{{ .Release.Name }}-dm-store
        draftStoreUrl: http://{{ .Release.Name }}-draft-store
        emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
        enableKeyVaults: false
        idamApiUrl: ""
        idamWebUrl: ""
        paymentsUrl: http://{{ .Release.Name }}-payment-api
        postgresPassword: hmcts
        postgresUsername: hmcts
        s2sUrl: http://{{ .Release.Name }}-s2s
        subscriptionId: 1c4f0704-a29e-403d-b719-b9
      image: hmctspublic.azurecr.io/ccd/case-management-web:latest
      imagePullPolicy: IfNotPresent
      ingressClass: traefik
      livenessDelay: 5
      livenessFailureThreshold: 3
      livenessPath: /health/liveness
      livenessPeriod: 15
      livenessTimeout: 3
      memoryLimits: 512Mi
      memoryRequests: 64Mi
      pdb:
        enabled: true
        maxUnavailable: 50%
      postcodeParam: $${postcode}
      prometheus:
        enabled: false
        path: /metrics
      readinessDelay: 5
      readinessPath: /health
      readinessPeriod: 15
      readinessTimeout: 3
      registerAdditionalDns:
        enabled: false
      releaseNameOverride: '{{ .Release.Name }}-ccd-case-mgmt-web'
      replicas: 1
      useInterpodAntiAffinity: false
  ccd-case-print-service:
    global:
      ccdAdminWebIngress: ""
      ccdApiGatewayIngress: ""
      ccdCaseManagementWebIngress: ""
      ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
      ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
      ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
      dmStoreUrl: http://{{ .Release.Name }}-dm-store
      draftStoreUrl: http://{{ .Release.Name }}-draft-store
      emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
      idamApiUrl: ""
      idamWebUrl: ""
      paymentsUrl: http://{{ .Release.Name }}-payment-api
      postgresPassword: hmcts
      postgresUsername: hmcts
      s2sUrl: http://{{ .Release.Name }}-s2s
      subscriptionId: 1c4f0704-a29e-403d-b719-b9
    nodejs:
      applicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
      applicationPort: 3100
      cpuLimits: 1
      cpuRequests: 25m
      environment:
        CASE_DATA_PROBATE_TEMPLATE_URL: http://betaDevBprobateApp01.reform.hmcts.net:4104
        CASE_DATA_STORE_URL: '{{ tpl .Values.global.ccdDataStoreUrl $}}'
        HPKP_MAX_AGE: 2592000
        HPKP_SHA256S: Set-proper-SHA256s
        IDAM_API_URL: '{{ tpl .Values.global.idamApiUrl $}}'
        IDAM_AUTHENTICATION_WEB_URL: '{{ tpl .Values.global.idamWebUrl $}}'
        IDAM_BASE_URL: '{{ tpl .Values.global.idamApiUrl $}}'
        IDAM_PRINT_SERVICE_KEY: AAAAAAAAAAAAAAAA
        IDAM_S2S_AUTH: '{{ tpl .Values.global.s2sUrl $}}'
        IDAM_S2S_URL: '{{ tpl .Values.global.s2sUrl $}}'
        IDAM_SERVICE_NAME: ccd_ps
        NODE_CONFIG_DIR: ./config
        NODE_ENV: production
        REFORM_ENVIRONMENT: aat
        REFORM_SERVICE_NAME: case-print-service
        REFORM_TEAM: ccd
        SECURITY_REFERRER_POLICY: origin
        TS_BASE_URL: ./src/main
        USE_CSRF_PROTECTION: true
        UV_THREADPOOL_SIZE: 64
      global:
        ccdAdminWebIngress: ""
        ccdApiGatewayIngress: ""
        ccdCaseManagementWebIngress: ""
        ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
        ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
        ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
        dmStoreUrl: http://{{ .Release.Name }}-dm-store
        draftStoreUrl: http://{{ .Release.Name }}-draft-store
        emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
        enableKeyVaults: false
        idamApiUrl: ""
        idamWebUrl: ""
        paymentsUrl: http://{{ .Release.Name }}-payment-api
        postgresPassword: hmcts
        postgresUsername: hmcts
        s2sUrl: http://{{ .Release.Name }}-s2s
        subscriptionId: 1c4f0704-a29e-403d-b719-b9
      image: hmctspublic.azurecr.io/ccd/case-print-service:latest
      imagePullPolicy: IfNotPresent
      ingressClass: traefik
      livenessDelay: 5
      livenessFailureThreshold: 3
      livenessPath: /health/liveness
      livenessPeriod: 15
      livenessTimeout: 3
      memoryLimits: 512Mi
      memoryRequests: 64Mi
      pdb:
        enabled: true
        maxUnavailable: 50%
      prometheus:
        enabled: false
        path: /metrics
      readinessDelay: 5
      readinessPath: /health
      readinessPeriod: 15
      readinessTimeout: 3
      registerAdditionalDns:
        enabled: false
      releaseNameOverride: '{{ .Release.Name }}-ccd-case-print-service'
      replicas: 1
      useInterpodAntiAffinity: false
  ccd-data-store-api:
    global:
      ccdAdminWebIngress: ""
      ccdApiGatewayIngress: ""
      ccdCaseManagementWebIngress: ""
      ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
      ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
      ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
      dmStoreUrl: http://{{ .Release.Name }}-dm-store
      draftStoreUrl: http://{{ .Release.Name }}-draft-store
      emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
      idamApiUrl: ""
      idamWebUrl: ""
      paymentsUrl: http://{{ .Release.Name }}-payment-api
      postgresPassword: hmcts
      postgresUsername: hmcts
      s2sUrl: http://{{ .Release.Name }}-s2s
      subscriptionId: 1c4f0704-a29e-403d-b719-b9
    java:
      aadIdentityName: ccd
      applicationPort: 4452
      cpuLimits: 1500m
      cpuRequests: 250m
      devApplicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
      devcpuLimits: 2500m
      devcpuRequests: 250m
      devmemoryLimits: 1024Mi
      devmemoryRequests: 512Mi
      environment:
        CCD_DEFAULTPRINTURL: https://return-case-doc-ccd.nonprod.platform.hmcts.net/jurisdictions/:jid/case-types/:ctid/cases/:cid
        CCD_DM_DOMAIN: https?://dm-store.*
        CCD_DRAFT_STORE_URL: '{{ tpl .Values.global.draftStoreUrl $}}'
        CCD_DRAFT_TTL_DAYS: 180
        DATA_STORE_DB_HOST: '{{ .Release.Name }}-postgresql'
        DATA_STORE_DB_MAX_POOL_SIZE: 10
        DATA_STORE_DB_NAME: data-store
        DATA_STORE_DB_OPTIONS: ?stringtype=unspecified
        DATA_STORE_DB_PASSWORD: '{{ tpl .Values.global.postgresPassword $}}'
        DATA_STORE_DB_PORT: 5432
        DATA_STORE_DB_USERNAME: '{{ tpl .Values.global.postgresUsername $}}'
        DATA_STORE_IDAM_KEY: AAAAAAAAAAAAAAAA
        DATA_STORE_S2S_AUTHORISED_SERVICES: ccd_data,ccd_gw,ccd_ps,probate_backend,divorce_ccd_submission,sscs,sscs_bulkscan,cmc,cmc_claim_store,cmc_claim_external_api,jui_webapp,pui_webapp,bulk_scan_orchestrator,fpl_case_service,iac,finrem_ccd_data_migrator,finrem_case_orchestration,employment_tribunals,ethos_repl_service,ccpay_bubble,ctsc_work_allocation,em_ccd_orchestrator,xui_webapp,bulk_scan_payment_processor
        DEFINITION_CACHE_EVICTION_POLICY: NONE
        DEFINITION_CACHE_LATEST_VERSION_TTL_SEC: 1
        DEFINITION_CACHE_MAX_IDLE_SEC: 259200
        DEFINITION_CACHE_MAX_SIZE: 5000
        DEFINITION_STORE_HOST: '{{ tpl .Values.global.ccdDefinitionStoreUrl $}}'
        ELASTIC_SEARCH_BLACKLIST: query_string
        ELASTIC_SEARCH_CASE_INDEX_NAME_FORMAT: '%s_cases'
        ELASTIC_SEARCH_CASE_INDEX_TYPE: _doc
        ELASTIC_SEARCH_DATA_NODES_HOSTS: ""
        ELASTIC_SEARCH_ENABLED: false
        ELASTIC_SEARCH_HOSTS: ""
        ELASTIC_SEARCH_NODES_DISCOVERY_ENABLED: false
        ELASTIC_SEARCH_NODES_DISCOVERY_FILTER: _all
        ELASTIC_SEARCH_NODES_DISCOVERY_FREQUENCY_MILLIS: "5000"
        ELASTIC_SEARCH_PASSWORD: ""
        ELASTIC_SEARCH_REQUEST_TIMEOUT: 6000
        ENABLE_DB_MIGRATE: true
        HTTP_CLIENT_CONNECTION_TIMEOUT: "10000"
        HTTP_CLIENT_MAX_CLIENT_PER_ROUTE: "20"
        HTTP_CLIENT_MAX_TOTAL: "200"
        HTTP_CLIENT_READ_TIMEOUT: "60000"
        HTTP_CLIENT_SECONDS_IDLE_CONNECTION: "120"
        HTTP_CLIENT_VALIDATE_AFTER_INACTIVITY: "0"
        IDAM_S2S_URL: '{{ tpl .Values.global.s2sUrl $}}'
        IDAM_USER_URL: '{{ tpl .Values.global.idamApiUrl $}}'
        JPA_CRITERIA_IN_SEARCH_ENABLED: false
        USER_PROFILE_HOST: '{{ tpl .Values.global.ccdUserProfileUrl $}}'
      functionaltests:
        enabled: false
        image: hmctspublic.azurecr.io/spring-boot/template
      functionaltestscron:
        enabled: false
        image: hmctspublic.azurecr.io/spring-boot/template
        schedule: 30 0/6 * * *
      global:
        ccdAdminWebIngress: ""
        ccdApiGatewayIngress: ""
        ccdCaseManagementWebIngress: ""
        ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
        ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
        ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
        devMode: false
        dmStoreUrl: http://{{ .Release.Name }}-dm-store
        draftStoreUrl: http://{{ .Release.Name }}-draft-store
        emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
        enableKeyVaults: false
        functionaltestscron:
          enabled: true
        idamApiUrl: ""
        idamWebUrl: ""
        paymentsUrl: http://{{ .Release.Name }}-payment-api
        postgresPassword: hmcts
        postgresUsername: hmcts
        s2sUrl: http://{{ .Release.Name }}-s2s
        smoketestscron:
          enabled: true
        subscriptionId: 1c4f0704-a29e-403d-b719-b9
      image: hmctspublic.azurecr.io/ccd/data-store-api:latest
      ingressClass: traefik
      ingressHost: ""
      keyVaults:
        ccd:
          secrets:
          - data-store-api-POSTGRES-PASS
          - data-store-api-draftStoreEncryptionSecret
          - data-store-api-draft-key
          - ccd-data-s2s-secret
          - ccd-ELASTIC-SEARCH-URL
          - ccd-ELASTIC-SEARCH-DATA-NODES-URL
          - ccd-ELASTIC-SEARCH-PASSWORD
          - AppInsightsInstrumentationKey
      livenessDelay: 240
      livenessFailureThreshold: 3
      livenessPath: /health/liveness
      livenessPeriod: 15
      livenessTimeout: 3
      memoryLimits: 2048Mi
      memoryRequests: 512Mi
      pdb:
        enabled: true
        maxUnavailable: 50%
      postgresql:
        enabled: false
        extraEnv: {}
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: false
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          enableKeyVaults: false
          functionaltestscron:
            enabled: true
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresql: {}
          s2sUrl: http://{{ .Release.Name }}-s2s
          smoketestscron:
            enabled: true
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        image:
          debug: false
          pullPolicy: IfNotPresent
          registry: docker.io
          repository: bitnami/postgresql
          tag: 11.5.0-debian-9-r60
        livenessProbe:
          enabled: true
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        master:
          affinity: {}
          extraVolumeMounts: []
          extraVolumes: []
          nodeSelector: {}
          podAnnotations: {}
          podLabels: {}
          tolerations: []
        metrics:
          enabled: false
          image:
            pullPolicy: IfNotPresent
            registry: docker.io
            repository: bitnami/postgres-exporter
            tag: 0.5.1-debian-9-r73
          livenessProbe:
            enabled: true
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            enabled: true
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          securityContext:
            enabled: false
            runAsUser: 1001
          service:
            annotations:
              prometheus.io/port: "9187"
              prometheus.io/scrape: "true"
            loadBalancerIP: null
            type: ClusterIP
          serviceMonitor:
            additionalLabels: {}
            enabled: false
        networkPolicy:
          allowExternal: true
          enabled: false
        persistence:
          accessModes:
          - ReadWriteOnce
          annotations: {}
          enabled: false
          mountPath: /bitnami/postgresql
          size: 8Gi
          subPath: ""
        postgresqlDataDir: /bitnami/postgresql/data
        postgresqlDatabase: javadatabase
        postgresqlPassword: javapassword
        postgresqlUsername: javapostgres
        readinessProbe:
          enabled: true
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        replication:
          applicationName: my_application
          enabled: false
          numSynchronousReplicas: 0
          password: repl_password
          slaveReplicas: 1
          synchronousCommit: "off"
          user: repl_user
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
        securityContext:
          enabled: true
          fsGroup: 1001
          runAsUser: 1001
        service:
          annotations: {}
          port: 5432
          type: ClusterIP
        serviceAccount:
          enabled: false
        slave:
          affinity: {}
          extraVolumeMounts: []
          extraVolumes: []
          nodeSelector: {}
          podAnnotations: {}
          podLabels: {}
          tolerations: []
        updateStrategy:
          type: RollingUpdate
        volumePermissions:
          enabled: true
          image:
            pullPolicy: Always
            registry: docker.io
            repository: bitnami/minideb
            tag: stretch
          securityContext:
            runAsUser: 0
      prometheus:
        enabled: false
        path: /prometheus
      readinessDelay: 240
      readinessPath: /health
      readinessPeriod: 15
      readinessTimeout: 3
      registerAdditionalDns:
        enabled: false
      releaseNameOverride: '{{ .Release.Name }}-ccd-data-store-api'
      replicas: 1
      smoketests:
        enabled: false
        image: hmctspublic.azurecr.io/spring-boot/template
      smoketestscron:
        enabled: false
        image: hmctspublic.azurecr.io/spring-boot/template
        schedule: 20 0/1 * * *
      testsConfig:
        cpuLimits: 1000m
        cpuRequests: 100m
        memoryLimits: 1024Mi
        memoryRequests: 256Mi
      useInterpodAntiAffinity: false
  ccd-definition-importer:
    cpuLimits: 1500m
    cpuRequests: 250m
    definitionFilename: ""
    definitionStoreUrl: '{{ tpl .Values.global.ccdDefinitionStoreUrl $}}'
    definitions: ""
    global:
      ccdAdminWebIngress: ""
      ccdApiGatewayIngress: ""
      ccdCaseManagementWebIngress: ""
      ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
      ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
      ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
      dmStoreUrl: http://{{ .Release.Name }}-dm-store
      draftStoreUrl: http://{{ .Release.Name }}-draft-store
      emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
      environment: null
      idamApiUrl: ""
      idamWebUrl: ""
      paymentsUrl: http://{{ .Release.Name }}-payment-api
      postgresPassword: hmcts
      postgresUsername: hmcts
      s2sUrl: http://{{ .Release.Name }}-s2s
      subscriptionId: 1c4f0704-a29e-403d-b719-b9
    idamApiUrl: '{{ tpl .Values.global.idamApiUrl $}}'
    idamClientId: ccd_admin
    image: hmctspublic.azurecr.io/ccd/definition-importer:latest
    ingressHost: ""
    keyVaults:
      ccd:
        excludeEnvironmentSuffix: false
        secrets:
        - ccd-importer-autotest-email
        - ccd-importer-autotest-password
        - ccd-admin-web-oauth2-client-secret
    memoryLimits: 2048Mi
    memoryRequests: 512Mi
    microservice: ccd_gw
    redirectUri: https://{{ tpl .Values.global.ccdAdminWebIngress $}}/oauth2redirect
    releaseNameOverride: '{{ .Release.Name }}-definition-importer'
    s2sUrl: '{{ tpl .Values.global.s2sUrl $}}'
    secrets:
      CLIENT_SECRET:
        disabled: false
        key: idam-client-secret
        secretRef: importer-creds
      IMPORTER_PASSWORD:
        disabled: false
        key: password
        secretRef: importer-creds
      IMPORTER_USERNAME:
        disabled: false
        key: username
        secretRef: importer-creds
    userRoles:
    - caseworker-cmc
    verbose: true
    waitHosts: ""
    waitHostsTimeout: 300
  ccd-definition-store-api:
    global:
      ccdAdminWebIngress: ""
      ccdApiGatewayIngress: ""
      ccdCaseManagementWebIngress: ""
      ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
      ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
      ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
      dmStoreUrl: http://{{ .Release.Name }}-dm-store
      draftStoreUrl: http://{{ .Release.Name }}-draft-store
      emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
      idamApiUrl: ""
      idamWebUrl: ""
      paymentsUrl: http://{{ .Release.Name }}-payment-api
      postgresPassword: hmcts
      postgresUsername: hmcts
      s2sUrl: http://{{ .Release.Name }}-s2s
      subscriptionId: 1c4f0704-a29e-403d-b719-b9
    java:
      aadIdentityName: ccd
      applicationPort: 4451
      cpuLimits: 1500m
      cpuRequests: 250m
      devApplicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
      devcpuLimits: 2500m
      devcpuRequests: 250m
      devmemoryLimits: 1024Mi
      devmemoryRequests: 512Mi
      environment:
        ADMIN_WEB_AUTHORIZATION_ENABLED: false
        ADMIN_WEB_AUTHORIZATION_IMPORT_DEFINITION_0: ccd-import
        ADMIN_WEB_AUTHORIZATION_MANAGE_DEFINITION_0: ccd-import
        ADMIN_WEB_AUTHORIZATION_MANAGE_USER_PROFILE_0: ccd-import
        ADMIN_WEB_AUTHORIZATION_MANAGE_USER_ROLE_0: ccd-import
        AZURE_STORAGE_BLOB_CONTAINER_REFERENCE: definition-store
        AZURE_STORAGE_CONNECTION_STRING: DefaultEndpointsProtocol=https;AccountName=$(STORAGE_ACCOUNT_NAME);AccountKey=$(STORAGE_ACCOUNT_KEY);EndpointSuffix=core.windows.net
        AZURE_STORAGE_DEFINITION_UPLOAD_ENABLED: false
        DEFINITION_STORE_DB_HOST: '{{ .Release.Name }}-postgresql'
        DEFINITION_STORE_DB_MAX_POOL_SIZE: 5
        DEFINITION_STORE_DB_NAME: definition-store
        DEFINITION_STORE_DB_OPTIONS: ""
        DEFINITION_STORE_DB_PASSWORD: '{{ tpl .Values.global.postgresPassword $}}'
        DEFINITION_STORE_DB_PORT: 5432
        DEFINITION_STORE_DB_USERNAME: '{{ tpl .Values.global.postgresUsername $}}'
        DEFINITION_STORE_S2S_AUTHORISED_SERVICES: ccd_data,ccd_gw,ccd_admin,jui_webapp,pui_webapp
        ELASTIC_SEARCH_CASE_INDEX_NAME_FORMAT: '%s_cases'
        ELASTIC_SEARCH_DYNAMIC: false
        ELASTIC_SEARCH_ENABLED: false
        ELASTIC_SEARCH_FAIL_ON_IMPORT: true
        ELASTIC_SEARCH_INDEX_SHARDS: 2
        ELASTIC_SEARCH_INDEX_SHARDS_REPLICAS: 1
        ELASTIC_SEARCH_PORT: 9200
        ELASTIC_SEARCH_SCHEME: http
        ENABLE_DB_MIGRATE: true
        IDAM_S2S_URL: '{{ tpl .Values.global.s2sUrl $}}'
        IDAM_USER_URL: '{{ tpl .Values.global.idamApiUrl $}}'
        USER_PROFILE_HOST: '{{ tpl .Values.global.ccdUserProfileUrl $}}'
      functionaltests:
        enabled: false
        image: hmctspublic.azurecr.io/spring-boot/template
      functionaltestscron:
        enabled: false
        image: hmctspublic.azurecr.io/spring-boot/template
        schedule: 30 0/6 * * *
      global:
        ccdAdminWebIngress: ""
        ccdApiGatewayIngress: ""
        ccdCaseManagementWebIngress: ""
        ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
        ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
        ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
        devMode: false
        dmStoreUrl: http://{{ .Release.Name }}-dm-store
        draftStoreUrl: http://{{ .Release.Name }}-draft-store
        emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
        enableKeyVaults: false
        functionaltestscron:
          enabled: true
        idamApiUrl: ""
        idamWebUrl: ""
        paymentsUrl: http://{{ .Release.Name }}-payment-api
        postgresPassword: hmcts
        postgresUsername: hmcts
        s2sUrl: http://{{ .Release.Name }}-s2s
        smoketestscron:
          enabled: true
        subscriptionId: 1c4f0704-a29e-403d-b719-b9
      image: hmctspublic.azurecr.io/ccd/definition-store-api:latest
      ingressClass: traefik
      ingressHost: ""
      keyVaults:
        ccd:
          secrets:
          - definition-store-api-POSTGRES-PASS
          - ccd-definition-s2s-secret
          - ccd-ELASTIC-SEARCH-URL
          - ccd-ELASTIC-SEARCH-PASSWORD
          - storage-account-primary-connection-string
          - AppInsightsInstrumentationKey
      livenessDelay: 180
      livenessFailureThreshold: 3
      livenessPath: /health/liveness
      livenessPeriod: 15
      livenessTimeout: 3
      memoryLimits: 2G
      memoryRequests: 1G
      pdb:
        enabled: true
        maxUnavailable: 50%
      postgresql:
        enabled: false
        extraEnv: {}
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: false
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          enableKeyVaults: false
          functionaltestscron:
            enabled: true
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresql: {}
          s2sUrl: http://{{ .Release.Name }}-s2s
          smoketestscron:
            enabled: true
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        image:
          debug: false
          pullPolicy: IfNotPresent
          registry: docker.io
          repository: bitnami/postgresql
          tag: 11.5.0-debian-9-r60
        livenessProbe:
          enabled: true
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        master:
          affinity: {}
          extraVolumeMounts: []
          extraVolumes: []
          nodeSelector: {}
          podAnnotations: {}
          podLabels: {}
          tolerations: []
        metrics:
          enabled: false
          image:
            pullPolicy: IfNotPresent
            registry: docker.io
            repository: bitnami/postgres-exporter
            tag: 0.5.1-debian-9-r73
          livenessProbe:
            enabled: true
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            enabled: true
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          securityContext:
            enabled: false
            runAsUser: 1001
          service:
            annotations:
              prometheus.io/port: "9187"
              prometheus.io/scrape: "true"
            loadBalancerIP: null
            type: ClusterIP
          serviceMonitor:
            additionalLabels: {}
            enabled: false
        networkPolicy:
          allowExternal: true
          enabled: false
        persistence:
          accessModes:
          - ReadWriteOnce
          annotations: {}
          enabled: false
          mountPath: /bitnami/postgresql
          size: 8Gi
          subPath: ""
        postgresqlDataDir: /bitnami/postgresql/data
        postgresqlDatabase: javadatabase
        postgresqlPassword: javapassword
        postgresqlUsername: javapostgres
        readinessProbe:
          enabled: true
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        replication:
          applicationName: my_application
          enabled: false
          numSynchronousReplicas: 0
          password: repl_password
          slaveReplicas: 1
          synchronousCommit: "off"
          user: repl_user
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
        securityContext:
          enabled: true
          fsGroup: 1001
          runAsUser: 1001
        service:
          annotations: {}
          port: 5432
          type: ClusterIP
        serviceAccount:
          enabled: false
        slave:
          affinity: {}
          extraVolumeMounts: []
          extraVolumes: []
          nodeSelector: {}
          podAnnotations: {}
          podLabels: {}
          tolerations: []
        updateStrategy:
          type: RollingUpdate
        volumePermissions:
          enabled: true
          image:
            pullPolicy: Always
            registry: docker.io
            repository: bitnami/minideb
            tag: stretch
          securityContext:
            runAsUser: 0
      prometheus:
        enabled: false
        path: /prometheus
      readinessDelay: 180
      readinessPath: /health
      readinessPeriod: 15
      readinessTimeout: 3
      registerAdditionalDns:
        enabled: false
      releaseNameOverride: '{{ .Release.Name }}-ccd-definition-store'
      replicas: 1
      secrets:
        STORAGE_ACCOUNT_KEY:
          disabled: true
          key: accessKey
          secretRef: storage-secret-{{ .Release.Name }}-blobstorage
        STORAGE_ACCOUNT_NAME:
          disabled: true
          key: storageAccountName
          secretRef: storage-secret-{{ .Release.Name }}-blobstorage
      smoketests:
        enabled: false
        image: hmctspublic.azurecr.io/spring-boot/template
      smoketestscron:
        enabled: false
        image: hmctspublic.azurecr.io/spring-boot/template
        schedule: 20 0/1 * * *
      testsConfig:
        cpuLimits: 1000m
        cpuRequests: 100m
        memoryLimits: 1024Mi
        memoryRequests: 256Mi
      useInterpodAntiAffinity: false
  ccd-test-stubs-service:
    global:
      ccdAdminWebIngress: ""
      ccdApiGatewayIngress: ""
      ccdCaseManagementWebIngress: ""
      ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
      ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
      ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
      dmStoreUrl: http://{{ .Release.Name }}-dm-store
      draftStoreUrl: http://{{ .Release.Name }}-draft-store
      emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
      idamApiUrl: ""
      idamWebUrl: ""
      paymentsUrl: http://{{ .Release.Name }}-payment-api
      postgresPassword: hmcts
      postgresUsername: hmcts
      s2sUrl: http://{{ .Release.Name }}-s2s
      subscriptionId: 1c4f0704-a29e-403d-b719-b9
    java:
      applicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
      applicationPort: 5555
      cpuLimits: 2500m
      cpuRequests: 25m
      environment:
        WIREMOCK_SERVER_MAPPINGS_PATH: wiremock
      global:
        ccdAdminWebIngress: ""
        ccdApiGatewayIngress: ""
        ccdCaseManagementWebIngress: ""
        ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
        ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
        ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
        dmStoreUrl: http://{{ .Release.Name }}-dm-store
        draftStoreUrl: http://{{ .Release.Name }}-draft-store
        emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
        enableKeyVaults: false
        idamApiUrl: ""
        idamWebUrl: ""
        paymentsUrl: http://{{ .Release.Name }}-payment-api
        postgresPassword: hmcts
        postgresUsername: hmcts
        s2sUrl: http://{{ .Release.Name }}-s2s
        subscriptionId: 1c4f0704-a29e-403d-b719-b9
      image: hmctspublic.azurecr.io/ccd/test-stubs-service:latest
      livenessDelay: 30
      livenessFailureThreshold: 3
      livenessPath: /health
      livenessPeriod: 15
      livenessTimeout: 3
      memoryLimits: 1024Mi
      memoryRequests: 512Mi
      pdb:
        enabled: true
        maxUnavailable: 50%
      postgresql:
        enabled: false
        extraEnv:
        - name: POSTGRESQL_DATABASE
          value: javadatabase
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          enableKeyVaults: false
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresql: {}
          s2sUrl: http://{{ .Release.Name }}-s2s
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        image:
          debug: false
          pullPolicy: Always
          registry: docker.io
          repository: bitnami/postgresql
          tag: 11.3.0
        livenessProbe:
          enabled: true
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        master:
          affinity: {}
          nodeSelector: {}
          podAnnotations: {}
          podLabels: {}
          tolerations: []
        metrics:
          enabled: false
          image:
            pullPolicy: IfNotPresent
            registry: docker.io
            repository: wrouesnel/postgres_exporter
            tag: v0.4.7
          livenessProbe:
            enabled: true
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            enabled: true
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          securityContext:
            enabled: false
            runAsUser: 1001
          service:
            annotations:
              prometheus.io/port: "9187"
              prometheus.io/scrape: "true"
            loadBalancerIP: null
            type: ClusterIP
        networkPolicy:
          allowExternal: true
          enabled: false
        persistence:
          accessModes:
          - ReadWriteOnce
          annotations: {}
          enabled: false
          mountPath: /bitnami/postgresql
          size: 8Gi
          subPath: ""
        postgresqlDataDir: /bitnami/postgresql/data
        postgresqlDatabase: javadatabase
        postgresqlPassword: javapassword
        postgresqlUsername: javapostgres
        readinessProbe:
          enabled: true
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        replication:
          applicationName: my_application
          enabled: false
          numSynchronousReplicas: 0
          password: repl_password
          slaveReplicas: 1
          synchronousCommit: "off"
          user: repl_user
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
        securityContext:
          enabled: true
          fsGroup: 1001
          runAsUser: 1001
        service:
          annotations: {}
          port: 5432
          type: ClusterIP
        serviceAccount:
          enabled: false
        slave:
          affinity: {}
          nodeSelector: {}
          podAnnotations: {}
          podLabels: {}
          tolerations: []
        updateStrategy:
          type: RollingUpdate
        volumePermissions:
          enabled: true
          image:
            pullPolicy: Always
            registry: docker.io
            repository: bitnami/minideb
            tag: latest
          securityContext:
            runAsUser: 0
      readinessDelay: 30
      readinessPath: /health
      readinessPeriod: 15
      readinessTimeout: 3
      registerAdditionalDns:
        enabled: false
      releaseNameOverride: '{{ .Release.Name }}-ccd-test-stubs-service'
      replicas: 1
      useInterpodAntiAffinity: false
  ccd-user-profile-api:
    global:
      ccdAdminWebIngress: ""
      ccdApiGatewayIngress: ""
      ccdCaseManagementWebIngress: ""
      ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
      ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
      ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
      dmStoreUrl: http://{{ .Release.Name }}-dm-store
      draftStoreUrl: http://{{ .Release.Name }}-draft-store
      emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
      idamApiUrl: ""
      idamWebUrl: ""
      paymentsUrl: http://{{ .Release.Name }}-payment-api
      postgresPassword: hmcts
      postgresUsername: hmcts
      s2sUrl: http://{{ .Release.Name }}-s2s
      subscriptionId: 1c4f0704-a29e-403d-b719-b9
    java:
      aadIdentityName: ccd
      applicationPort: 4453
      cpuLimits: 1500m
      cpuRequests: 250m
      devApplicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
      devcpuLimits: 2500m
      devcpuRequests: 250m
      devmemoryLimits: 1024Mi
      devmemoryRequests: 512Mi
      environment:
        ENABLE_DB_MIGRATE: true
        IDAM_S2S_URL: '{{ tpl .Values.global.s2sUrl $}}'
        LOGBACK_REQUIRE_ALERT_LEVEL: "false"
        LOGBACK_REQUIRE_ERROR_CODE: "false"
        USER_PROFILE_DB_HOST: '{{ .Release.Name }}-postgresql'
        USER_PROFILE_DB_NAME: user-profile
        USER_PROFILE_DB_OPTIONS: ?stringtype=unspecified
        USER_PROFILE_DB_PASSWORD: '{{ tpl .Values.global.postgresPassword $}}'
        USER_PROFILE_DB_PORT: 5432
        USER_PROFILE_DB_USERNAME: '{{ tpl .Values.global.postgresUsername $}}'
        USER_PROFILE_S2S_AUTHORISED_SERVICES: ccd_data,ccd_definition,ccd_admin,rd_professional_api
      functionaltests:
        enabled: false
        image: hmctspublic.azurecr.io/spring-boot/template
      functionaltestscron:
        enabled: false
        image: hmctspublic.azurecr.io/spring-boot/template
        schedule: 30 0/6 * * *
      global:
        ccdAdminWebIngress: ""
        ccdApiGatewayIngress: ""
        ccdCaseManagementWebIngress: ""
        ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
        ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
        ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
        devMode: false
        dmStoreUrl: http://{{ .Release.Name }}-dm-store
        draftStoreUrl: http://{{ .Release.Name }}-draft-store
        emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
        enableKeyVaults: false
        functionaltestscron:
          enabled: true
        idamApiUrl: ""
        idamWebUrl: ""
        paymentsUrl: http://{{ .Release.Name }}-payment-api
        postgresPassword: hmcts
        postgresUsername: hmcts
        s2sUrl: http://{{ .Release.Name }}-s2s
        smoketestscron:
          enabled: true
        subscriptionId: 1c4f0704-a29e-403d-b719-b9
      image: hmctspublic.azurecr.io/ccd/user-profile-api:latest
      ingressClass: traefik
      ingressHost: ""
      keyVaults:
        ccd:
          secrets:
          - user-profile-api-POSTGRES-PASS
          - AppInsightsInstrumentationKey
      livenessDelay: 120
      livenessFailureThreshold: 3
      livenessPath: /health/liveness
      livenessPeriod: 15
      livenessTimeout: 3
      memoryLimits: 2048Mi
      memoryRequests: 512Mi
      pdb:
        enabled: true
        maxUnavailable: 50%
      postgresql:
        enabled: false
        extraEnv: {}
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: false
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          enableKeyVaults: false
          functionaltestscron:
            enabled: true
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresql: {}
          s2sUrl: http://{{ .Release.Name }}-s2s
          smoketestscron:
            enabled: true
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        image:
          debug: false
          pullPolicy: IfNotPresent
          registry: docker.io
          repository: bitnami/postgresql
          tag: 11.5.0-debian-9-r60
        livenessProbe:
          enabled: true
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        master:
          affinity: {}
          extraVolumeMounts: []
          extraVolumes: []
          nodeSelector: {}
          podAnnotations: {}
          podLabels: {}
          tolerations: []
        metrics:
          enabled: false
          image:
            pullPolicy: IfNotPresent
            registry: docker.io
            repository: bitnami/postgres-exporter
            tag: 0.5.1-debian-9-r73
          livenessProbe:
            enabled: true
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            enabled: true
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          securityContext:
            enabled: false
            runAsUser: 1001
          service:
            annotations:
              prometheus.io/port: "9187"
              prometheus.io/scrape: "true"
            loadBalancerIP: null
            type: ClusterIP
          serviceMonitor:
            additionalLabels: {}
            enabled: false
        networkPolicy:
          allowExternal: true
          enabled: false
        persistence:
          accessModes:
          - ReadWriteOnce
          annotations: {}
          enabled: false
          mountPath: /bitnami/postgresql
          size: 8Gi
          subPath: ""
        postgresqlDataDir: /bitnami/postgresql/data
        postgresqlDatabase: javadatabase
        postgresqlPassword: javapassword
        postgresqlUsername: javapostgres
        readinessProbe:
          enabled: true
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        replication:
          applicationName: my_application
          enabled: false
          numSynchronousReplicas: 0
          password: repl_password
          slaveReplicas: 1
          synchronousCommit: "off"
          user: repl_user
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
        securityContext:
          enabled: true
          fsGroup: 1001
          runAsUser: 1001
        service:
          annotations: {}
          port: 5432
          type: ClusterIP
        serviceAccount:
          enabled: false
        slave:
          affinity: {}
          extraVolumeMounts: []
          extraVolumes: []
          nodeSelector: {}
          podAnnotations: {}
          podLabels: {}
          tolerations: []
        updateStrategy:
          type: RollingUpdate
        volumePermissions:
          enabled: true
          image:
            pullPolicy: Always
            registry: docker.io
            repository: bitnami/minideb
            tag: stretch
          securityContext:
            runAsUser: 0
      prometheus:
        enabled: false
        path: /prometheus
      readinessDelay: 120
      readinessPath: /health
      readinessPeriod: 15
      readinessTimeout: 3
      registerAdditionalDns:
        enabled: false
      releaseNameOverride: '{{ .Release.Name }}-ccd-user-profile-api'
      replicas: 1
      smoketests:
        enabled: false
        image: hmctspublic.azurecr.io/spring-boot/template
      smoketestscron:
        enabled: false
        image: hmctspublic.azurecr.io/spring-boot/template
        schedule: 20 0/1 * * *
      testsConfig:
        cpuLimits: 1000m
        cpuRequests: 100m
        memoryLimits: 1024Mi
        memoryRequests: 256Mi
      useInterpodAntiAffinity: false
  ccd-user-profile-importer:
    cpuLimits: 1500m
    cpuRequests: 250m
    global:
      ccdAdminWebIngress: ""
      ccdApiGatewayIngress: ""
      ccdCaseManagementWebIngress: ""
      ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
      ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
      ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
      dmStoreUrl: http://{{ .Release.Name }}-dm-store
      draftStoreUrl: http://{{ .Release.Name }}-draft-store
      emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
      environment: null
      idamApiUrl: ""
      idamWebUrl: ""
      paymentsUrl: http://{{ .Release.Name }}-payment-api
      postgresPassword: hmcts
      postgresUsername: hmcts
      s2sUrl: http://{{ .Release.Name }}-s2s
      subscriptionId: 1c4f0704-a29e-403d-b719-b9
    image: hmctspublic.azurecr.io/ccd/user-profile-importer:latest
    memoryLimits: 2048Mi
    memoryRequests: 512Mi
    microservice: ccd_definition
    releaseNameOverride: '{{ tpl .Release.Name $}}-user-profile-importer'
    s2sUrl: '{{ tpl .Values.global.s2sUrl $}}'
    userProfileUrl: '{{ tpl .Values.global.ccdUserProfileUrl $}}'
    waitHosts: ""
    waitHostsTimeout: 300
  ccpay:
    ccd:
      blobstorage:
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: true
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresqlHostName: '{{ .Release.Name }}-postgresql'
          postgresqlPassword: hmcts
          postgresqlUsername: hmcts
          s2sUrl: http://{{ .Release.Name }}-s2s
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        location: uksouth
        releaseNameOverride: '{{ .Release.Name }}-blobstorage'
        resourceGroup: ccd-aks
        setup:
          containers:
          - definition-store
          - dm-store
        teamName: CCD
      ccd:
        activityApi:
          enabled: false
        adminWeb:
          enabled: true
        apiGatewayWeb:
          enabled: false
        blobstorage:
          enabled: false
        ccpay:
          enabled: false
        definitionImporter:
          enabled: false
        dmStore:
          enabled: false
        draftStore:
          enabled: false
        emAnnotation:
          enabled: false
        managementWeb:
          enabled: false
        postgresql:
          enabled: false
        printService:
          enabled: false
        s2s:
          enabled: false
        testStubsService:
          enabled: false
        userProfileImporter:
          enabled: false
      ccd-admin-web:
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: true
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresqlHostName: '{{ .Release.Name }}-postgresql'
          postgresqlPassword: hmcts
          postgresqlUsername: hmcts
          s2sUrl: http://{{ .Release.Name }}-s2s
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        idam-pr:
          api:
            url: '{{ tpl .Values.global.idamApiUrl $}}'
          cpuLimits: 2500m
          cpuRequests: 25m
          global:
            ccdAdminWebIngress: ""
            ccdApiGatewayIngress: ""
            ccdCaseManagementWebIngress: ""
            ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
            ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
            ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
            devMode: true
            dmStoreUrl: http://{{ .Release.Name }}-dm-store
            draftStoreUrl: http://{{ .Release.Name }}-draft-store
            emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
            idamApiUrl: ""
            idamWebUrl: ""
            paymentsUrl: http://{{ .Release.Name }}-payment-api
            postgresPassword: hmcts
            postgresUsername: hmcts
            postgresqlHostName: '{{ .Release.Name }}-postgresql'
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            s2sUrl: http://{{ .Release.Name }}-s2s
            subscriptionId: 1c4f0704-a29e-403d-b719-b9
          memoryLimits: 1024Mi
          memoryRequests: 512Mi
          redirect_uris:
            CCD Admin:
            - https://{{ tpl .Values.global.ccdAdminWebIngress $}}/oauth2redirect
            test-public-service:
            - http://localhost/oauth2/receiver
          releaseNameOverride: '{{ .Release.Name }}-ccd-admin-web-idam-pr'
          web_public:
            url: '{{ tpl .Values.global.idamWebUrl $}}'
        nodejs:
          applicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
          applicationPort: 3100
          cpuLimits: 1
          cpuRequests: 25m
          environment:
            ADMIN_ALL_USER_ROLES_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl
              $}}/api/user-roles'
            ADMINWEB_AUTHORIZATION_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl
              $}}/api/idam/adminweb/authorization'
            ADMINWEB_CREATE_DEFINITION_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl
              $}}/api/draft'
            ADMINWEB_DEFINITIONS_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl
              $}}/api/drafts'
            ADMINWEB_IMPORT_AUDITS_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl
              $}}/api/import-audits'
            ADMINWEB_IMPORT_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl $}}/import'
            ADMINWEB_JURISDICTIONS_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl
              $}}/api/data/jurisdictions'
            ADMINWEB_LOGIN_URL: '{{ tpl .Values.global.idamWebUrl $}}/login'
            ADMINWEB_ROLES_WHITELIST: ccd-import,ccd-import-validate
            ADMINWEB_SAVE_USER_PROFILE_URL: '{{ tpl .Values.global.ccdUserProfileUrl
              $}}/users/save'
            ADMINWEB_UPDATE_DEFINITION_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl
              $}}/api/draft/save'
            ADMINWEB_USER_PROFILE_URL: '{{ tpl .Values.global.ccdUserProfileUrl $}}/users'
            ADMINWEB_USER_ROLE_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl $}}/api/user-role'
            ADMINWEB_WHOAMI_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl $}}/api/idam/profile'
            HPKP_MAX_AGE: 2592000
            HPKP_SHA256S: Set-proper-SHA256s
            IDAM_ADMIN_WEB_SERVICE_KEY: AAAAAAAAAAAAAAAA
            IDAM_BASE_URL: '{{ tpl .Values.global.idamApiUrl $}}'
            IDAM_OAUTH2_CLIENT_ID: ccd_admin
            IDAM_OAUTH2_LOGOUT_ENDPOINT: '{{ tpl .Values.global.idamApiUrl $}}/session/:token'
            IDAM_OAUTH2_TOKEN_ENDPOINT: '{{ tpl .Values.global.idamApiUrl $}}/oauth2/token'
            IDAM_S2S_URL: '{{ tpl .Values.global.s2sUrl $}}'
            IDAM_SERVICE_NAME: ccd_admin
            NODE_CONFIG_DIR: ./config
            NODE_ENV: production
            REFORM_SERVICE_NAME: admin-web
            REFORM_TEAM: ccd
            SECURE_AUTH_COOKIE_ENABLED: true
            SECURITY_REFERRER_POLICY: origin
            TS_BASE_URL: ./src/main
            USE_CSRF_PROTECTION: true
            UV_THREADPOOL_SIZE: 64
          global:
            ccdAdminWebIngress: ""
            ccdApiGatewayIngress: ""
            ccdCaseManagementWebIngress: ""
            ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
            ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
            ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
            devMode: true
            dmStoreUrl: http://{{ .Release.Name }}-dm-store
            draftStoreUrl: http://{{ .Release.Name }}-draft-store
            emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
            enableKeyVaults: false
            idamApiUrl: ""
            idamWebUrl: ""
            paymentsUrl: http://{{ .Release.Name }}-payment-api
            postgresPassword: hmcts
            postgresUsername: hmcts
            postgresqlHostName: '{{ .Release.Name }}-postgresql'
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            s2sUrl: http://{{ .Release.Name }}-s2s
            subscriptionId: 1c4f0704-a29e-403d-b719-b9
          image: hmctspublic.azurecr.io/ccd/admin-web:latest
          imagePullPolicy: IfNotPresent
          ingressClass: traefik
          livenessDelay: 5
          livenessFailureThreshold: 3
          livenessPath: /health/liveness
          livenessPeriod: 15
          livenessTimeout: 3
          memoryLimits: 512Mi
          memoryRequests: 64Mi
          pdb:
            enabled: true
            maxUnavailable: 50%
          prometheus:
            enabled: false
            path: /metrics
          readinessDelay: 5
          readinessPath: /health
          readinessPeriod: 15
          readinessTimeout: 3
          registerAdditionalDns:
            enabled: false
          releaseNameOverride: '{{ .Release.Name }}-ccd-admin-web'
          replicas: 1
          secrets:
            IDAM_OAUTH2_AW_CLIENT_SECRET:
              disabled: true
              key: key
              secretRef: ccd-admin-web-oauth2-client-secret
          useInterpodAntiAffinity: false
        tags:
          idam-pr: false
      ccd-api-gateway-web:
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: true
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresqlHostName: '{{ .Release.Name }}-postgresql'
          postgresqlPassword: hmcts
          postgresqlUsername: hmcts
          s2sUrl: http://{{ .Release.Name }}-s2s
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        nodejs:
          applicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
          applicationPort: 3453
          cpuLimits: 1
          cpuRequests: 25m
          environment:
            CORS_ORIGIN_METHODS: GET,POST,OPTIONS,PUT,DELETE
            CORS_ORIGIN_WHITELIST: https://{{ tpl .Values.global.ccdCaseManagementWebIngress
              $}},http://{{ tpl .Values.global.ccdCaseManagementWebIngress $}},{{
              tpl .Values.global.ccdCaseManagementWebIngress $}},*
            IDAM_BASE_URL: '{{ tpl .Values.global.idamApiUrl $}}'
            IDAM_OAUTH2_CLIENT_ID: ccd_gateway
            IDAM_OAUTH2_LOGOUT_ENDPOINT: '{{ tpl .Values.global.idamApiUrl $ }}/session/:token'
            IDAM_OAUTH2_TOKEN_ENDPOINT: '{{ tpl .Values.global.idamApiUrl $ }}/oauth2/token'
            IDAM_S2S_URL: '{{ tpl .Values.global.s2sUrl $}}'
            IDAM_SERVICE_KEY: AAAAAAAAAAAAAAAA
            IDAM_SERVICE_NAME: ccd_gw
            PROXY_AGGREGATED: '{{ tpl .Values.global.ccdDataStoreUrl $}}'
            PROXY_CASE_ACTIVITY: http://ccd-case-activity-api
            PROXY_DATA: '{{ tpl .Values.global.ccdDataStoreUrl $}}'
            PROXY_DEFINITION_IMPORT: '{{ tpl .Values.global.ccdDefinitionStoreUrl
              $}}'
            PROXY_DOCUMENT_MANAGEMENT: '{{ tpl .Values.global.dmStoreUrl $}}'
            PROXY_MV_ANNOTATIONS_API_URL: '{{ tpl .Values.global.emAnnotationUrl $}}'
            PROXY_PAYMENTS: '{{ tpl .Values.global.paymentsUrl $}}'
            PROXY_PRINT_SERVICE: http://ccd-case-print-service
            SECURE_AUTH_COOKIE_ENABLED: true
          global:
            ccdAdminWebIngress: ""
            ccdApiGatewayIngress: ""
            ccdCaseManagementWebIngress: ""
            ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
            ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
            ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
            devMode: true
            dmStoreUrl: http://{{ .Release.Name }}-dm-store
            draftStoreUrl: http://{{ .Release.Name }}-draft-store
            emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
            enableKeyVaults: false
            idamApiUrl: ""
            idamWebUrl: ""
            paymentsUrl: http://{{ .Release.Name }}-payment-api
            postgresPassword: hmcts
            postgresUsername: hmcts
            postgresqlHostName: '{{ .Release.Name }}-postgresql'
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            s2sUrl: http://{{ .Release.Name }}-s2s
            subscriptionId: 1c4f0704-a29e-403d-b719-b9
          image: hmctspublic.azurecr.io/ccd/api-gateway-web:latest
          imagePullPolicy: IfNotPresent
          ingressClass: traefik
          keyVaults:
            ccd:
              secrets:
              - ccd-api-gateway-oauth2-client-secret
              - ccd-gw-s2s-secret
              - postcode-info-address-lookup-token
          livenessDelay: 5
          livenessFailureThreshold: 3
          livenessPath: /health/liveness
          livenessPeriod: 15
          livenessTimeout: 3
          memoryLimits: 512Mi
          memoryRequests: 64Mi
          pdb:
            enabled: true
            maxUnavailable: 50%
          prometheus:
            enabled: false
            path: /metrics
          readinessDelay: 5
          readinessPath: /health
          readinessPeriod: 15
          readinessTimeout: 3
          registerAdditionalDns:
            enabled: false
          releaseNameOverride: '{{ .Release.Name }}-ccd-api-gw'
          replicas: 1
          secrets:
            IDAM_OAUTH2_CLIENT_SECRET:
              disabled: true
              key: key
              secretRef: ccd-api-gateway-oauth2-client-secret
          useInterpodAntiAffinity: false
      ccd-case-activity-api:
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: true
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresqlHostName: '{{ .Release.Name }}-postgresql'
          postgresqlPassword: hmcts
          postgresqlUsername: hmcts
          s2sUrl: http://{{ .Release.Name }}-s2s
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        nodejs:
          applicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
          applicationPort: 3460
          cpuLimits: 500m
          cpuRequests: 25m
          environment:
            APP_REQUEST_TIMEOUT: 5
            APP_STORE_CLEANUP_CRONTAB: '* * * * *'
            AUTH_BLACK_LIST: solicitor
            AUTH_WHITE_LIST: ^caseworker-.+
            CORS_ORIGIN_METHODS: GET,POST,OPTIONS
            CORS_ORIGIN_WHITELIST: '{{ tpl .Values.global.ccdCaseManagementWebIngress
              $}}'
            IDAM_BASE_URL: '{{ tpl .Values.global.idamApiUrl $}}'
            REDIS_ACTIVITY_TTL: 5
            REDIS_HOST: ${SERVICE_NAME}-redis-master
            REDIS_KEY_PREFIX: 'activity:'
            REDIS_PASSWORD: fake-password
            REDIS_PORT: 6379
            REDIS_SSL_ENABLED: false
            REDIS_USER_DETAILS_TTL: 6000
          global:
            ccdAdminWebIngress: ""
            ccdApiGatewayIngress: ""
            ccdCaseManagementWebIngress: ""
            ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
            ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
            ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
            devMode: true
            dmStoreUrl: http://{{ .Release.Name }}-dm-store
            draftStoreUrl: http://{{ .Release.Name }}-draft-store
            emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
            enableKeyVaults: false
            idamApiUrl: ""
            idamWebUrl: ""
            paymentsUrl: http://{{ .Release.Name }}-payment-api
            postgresPassword: hmcts
            postgresUsername: hmcts
            postgresqlHostName: '{{ .Release.Name }}-postgresql'
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            s2sUrl: http://{{ .Release.Name }}-s2s
            subscriptionId: 1c4f0704-a29e-403d-b719-b9
          image: hmctspublic.azurecr.io/ccd/case-activity-api:latest
          imagePullPolicy: IfNotPresent
          ingressClass: traefik
          livenessDelay: 5
          livenessFailureThreshold: 3
          livenessPath: /health/liveness
          livenessPeriod: 15
          livenessTimeout: 3
          memoryLimits: 512Mi
          memoryRequests: 64Mi
          pdb:
            enabled: true
            maxUnavailable: 50%
          prometheus:
            enabled: false
            path: /metrics
          readinessDelay: 5
          readinessPath: /health
          readinessPeriod: 15
          readinessTimeout: 3
          registerAdditionalDns:
            enabled: false
          releaseNameOverride: '{{ .Release.Name }}-ccd-case-activity-api'
          replicas: 1
          useInterpodAntiAffinity: false
        redis:
          cluster:
            enabled: false
            slaveCount: 1
          configmap: '# maxmemory-policy volatile-lru'
          global:
            ccdAdminWebIngress: ""
            ccdApiGatewayIngress: ""
            ccdCaseManagementWebIngress: ""
            ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
            ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
            ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
            devMode: true
            dmStoreUrl: http://{{ .Release.Name }}-dm-store
            draftStoreUrl: http://{{ .Release.Name }}-draft-store
            emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
            idamApiUrl: ""
            idamWebUrl: ""
            paymentsUrl: http://{{ .Release.Name }}-payment-api
            postgresPassword: hmcts
            postgresUsername: hmcts
            postgresqlHostName: '{{ .Release.Name }}-postgresql'
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            s2sUrl: http://{{ .Release.Name }}-s2s
            subscriptionId: 1c4f0704-a29e-403d-b719-b9
          image:
            pullPolicy: Always
            registry: docker.io
            repository: bitnami/redis
            tag: 4.0.12
          master:
            affinity: {}
            command: /run.sh
            disableCommands:
            - FLUSHDB
            - FLUSHALL
            extraFlags: []
            livenessProbe:
              enabled: true
              failureThreshold: 5
              initialDelaySeconds: 5
              periodSeconds: 5
              successThreshold: 1
              timeoutSeconds: 5
            persistence:
              accessModes:
              - ReadWriteOnce
              enabled: false
              path: /data
              size: 8Gi
              subPath: ""
            podAnnotations: {}
            podLabels: {}
            port: 6379
            readinessProbe:
              enabled: true
              failureThreshold: 5
              initialDelaySeconds: 5
              periodSeconds: 5
              successThreshold: 1
              timeoutSeconds: 1
            securityContext:
              enabled: true
              fsGroup: 1001
              runAsUser: 1001
            service:
              annotations: {}
              loadBalancerIP: null
              port: 6379
              type: ClusterIP
            statefulset:
              updateStrategy: RollingUpdate
          metrics:
            enabled: false
            image:
              pullPolicy: IfNotPresent
              registry: docker.io
              repository: oliver006/redis_exporter
              tag: v0.28.0
            service:
              annotations:
                prometheus.io/port: "9121"
                prometheus.io/scrape: "true"
              type: ClusterIP
            serviceMonitor:
              enabled: false
              selector:
                prometheus: kube-prometheus
          nameOverride: redis
          networkPolicy:
            enabled: false
          password: fake-password
          persistence: {}
          rbac:
            create: false
            role:
              rules: []
          serviceAccount:
            create: false
            name: null
          slave:
            affinity: {}
            service:
              annotations: {}
              loadBalancerIP: null
              type: ClusterIP
          sysctlImage:
            command: []
            enabled: false
            mountHostSys: false
            pullPolicy: Always
            registry: docker.io
            repository: bitnami/minideb
            tag: latest
          usePassword: true
          usePasswordFile: false
          volumePermissions:
            image:
              pullPolicy: IfNotPresent
              registry: docker.io
              repository: bitnami/minideb
              tag: latest
      ccd-case-management-web:
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: true
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresqlHostName: '{{ .Release.Name }}-postgresql'
          postgresqlPassword: hmcts
          postgresqlUsername: hmcts
          s2sUrl: http://{{ .Release.Name }}-s2s
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        idam-pr:
          api:
            url: '{{ tpl .Values.global.idamApiUrl $}}'
          cpuLimits: 2500m
          cpuRequests: 25m
          global:
            ccdAdminWebIngress: ""
            ccdApiGatewayIngress: ""
            ccdCaseManagementWebIngress: ""
            ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
            ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
            ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
            devMode: true
            dmStoreUrl: http://{{ .Release.Name }}-dm-store
            draftStoreUrl: http://{{ .Release.Name }}-draft-store
            emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
            idamApiUrl: ""
            idamWebUrl: ""
            paymentsUrl: http://{{ .Release.Name }}-payment-api
            postgresPassword: hmcts
            postgresUsername: hmcts
            postgresqlHostName: '{{ .Release.Name }}-postgresql'
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            s2sUrl: http://{{ .Release.Name }}-s2s
            subscriptionId: 1c4f0704-a29e-403d-b719-b9
          memoryLimits: 1024Mi
          memoryRequests: 128Mi
          redirect_uris:
            CCD:
            - https://{{ tpl .Values.global.ccdCaseManagementWebIngress $}}/oauth2redirect
          releaseNameOverride: '{{ .Release.Name }}-ccd-idam-pr'
          web_public:
            url: '{{ tpl .Values.global.idamWebUrl $}}'
        nodejs:
          applicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
          applicationPort: 3451
          cpuLimits: 1
          cpuRequests: 25m
          environment:
            ANNOTATION_API_URL: https://{{ tpl .Values.global.ccdApiGatewayIngress
              $}}/em-anno"
            CCD_ACTIVITY_BATCH_COLLECTION_DELAY_MS: 1
            CCD_ACTIVITY_MAX_REQUEST_PER_BATCH: 25
            CCD_ACTIVITY_NEXT_POLL_REQUEST_MS: 5000
            CCD_ACTIVITY_RETRY: 5
            CCD_ACTIVITY_URL: https://{{ tpl .Values.global.ccdApiGatewayIngress $}}/activity
            CCD_API_URL: https://{{ tpl  .Values.global.ccdApiGatewayIngress $ }}/aggregated
            CCD_DATA_URL: https://{{ tpl .Values.global.ccdApiGatewayIngress $}}/data
            CCD_GW_LOGOUT_URL: https://{{ tpl .Values.global.ccdApiGatewayIngress
              $ }}/logout
            CCD_GW_OAUTH2_CLIENT_ID: ccd_gateway
            CCD_GW_OAUTH2_URL: https://{{ tpl .Values.global.ccdApiGatewayIngress
              $}}/oauth2
            CCD_PAGE_SIZE: 25
            DM_URL: https://{{ tpl .Values.global.ccdApiGatewayIngress $}}/documents
            DM_URL_REMOTE: ^https?://(?:{{ .Release.Name }}-dm-store(?::\d+)?)/documents
            IDAM_LOGIN_URL: '{{ .Values.global.idamWebUrl }}/login'
            PAYMENTS_URL: https://{{ tpl .Values.global.ccdApiGatewayIngress $ }}/payments
            POSTCODE_LOOKUP_URL: https://gateway-ccd.aat.platform.hmcts.net/addresses?postcode={{
              .Values.postcodeParam }}
            PRINT_SERVICE_URL: https://{{ tpl .Values.global.ccdApiGatewayIngress
              $}}/print
            PRINT_SERVICE_URL_REMOTE: https://return-case-doc-ccd.nonprod.platform.hmcts.net
          global:
            ccdAdminWebIngress: ""
            ccdApiGatewayIngress: ""
            ccdCaseManagementWebIngress: ""
            ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
            ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
            ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
            devMode: true
            dmStoreUrl: http://{{ .Release.Name }}-dm-store
            draftStoreUrl: http://{{ .Release.Name }}-draft-store
            emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
            enableKeyVaults: false
            idamApiUrl: ""
            idamWebUrl: ""
            paymentsUrl: http://{{ .Release.Name }}-payment-api
            postgresPassword: hmcts
            postgresUsername: hmcts
            postgresqlHostName: '{{ .Release.Name }}-postgresql'
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            s2sUrl: http://{{ .Release.Name }}-s2s
            subscriptionId: 1c4f0704-a29e-403d-b719-b9
          image: hmctspublic.azurecr.io/ccd/case-management-web:latest
          imagePullPolicy: IfNotPresent
          ingressClass: traefik
          livenessDelay: 5
          livenessFailureThreshold: 3
          livenessPath: /health/liveness
          livenessPeriod: 15
          livenessTimeout: 3
          memoryLimits: 512Mi
          memoryRequests: 64Mi
          pdb:
            enabled: true
            maxUnavailable: 50%
          postcodeParam: $${postcode}
          prometheus:
            enabled: false
            path: /metrics
          readinessDelay: 5
          readinessPath: /health
          readinessPeriod: 15
          readinessTimeout: 3
          registerAdditionalDns:
            enabled: false
          releaseNameOverride: '{{ .Release.Name }}-ccd-case-mgmt-web'
          replicas: 1
          useInterpodAntiAffinity: false
      ccd-case-print-service:
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: true
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresqlHostName: '{{ .Release.Name }}-postgresql'
          postgresqlPassword: hmcts
          postgresqlUsername: hmcts
          s2sUrl: http://{{ .Release.Name }}-s2s
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        nodejs:
          applicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
          applicationPort: 3100
          cpuLimits: 1
          cpuRequests: 25m
          environment:
            CASE_DATA_PROBATE_TEMPLATE_URL: http://betaDevBprobateApp01.reform.hmcts.net:4104
            CASE_DATA_STORE_URL: '{{ tpl .Values.global.ccdDataStoreUrl $}}'
            HPKP_MAX_AGE: 2592000
            HPKP_SHA256S: Set-proper-SHA256s
            IDAM_API_URL: '{{ tpl .Values.global.idamApiUrl $}}'
            IDAM_AUTHENTICATION_WEB_URL: '{{ tpl .Values.global.idamWebUrl $}}'
            IDAM_BASE_URL: '{{ tpl .Values.global.idamApiUrl $}}'
            IDAM_PRINT_SERVICE_KEY: AAAAAAAAAAAAAAAA
            IDAM_S2S_AUTH: '{{ tpl .Values.global.s2sUrl $}}'
            IDAM_S2S_URL: '{{ tpl .Values.global.s2sUrl $}}'
            IDAM_SERVICE_NAME: ccd_ps
            NODE_CONFIG_DIR: ./config
            NODE_ENV: production
            REFORM_ENVIRONMENT: aat
            REFORM_SERVICE_NAME: case-print-service
            REFORM_TEAM: ccd
            SECURITY_REFERRER_POLICY: origin
            TS_BASE_URL: ./src/main
            USE_CSRF_PROTECTION: true
            UV_THREADPOOL_SIZE: 64
          global:
            ccdAdminWebIngress: ""
            ccdApiGatewayIngress: ""
            ccdCaseManagementWebIngress: ""
            ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
            ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
            ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
            devMode: true
            dmStoreUrl: http://{{ .Release.Name }}-dm-store
            draftStoreUrl: http://{{ .Release.Name }}-draft-store
            emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
            enableKeyVaults: false
            idamApiUrl: ""
            idamWebUrl: ""
            paymentsUrl: http://{{ .Release.Name }}-payment-api
            postgresPassword: hmcts
            postgresUsername: hmcts
            postgresqlHostName: '{{ .Release.Name }}-postgresql'
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            s2sUrl: http://{{ .Release.Name }}-s2s
            subscriptionId: 1c4f0704-a29e-403d-b719-b9
          image: hmctspublic.azurecr.io/ccd/case-print-service:latest
          imagePullPolicy: IfNotPresent
          ingressClass: traefik
          livenessDelay: 5
          livenessFailureThreshold: 3
          livenessPath: /health/liveness
          livenessPeriod: 15
          livenessTimeout: 3
          memoryLimits: 512Mi
          memoryRequests: 64Mi
          pdb:
            enabled: true
            maxUnavailable: 50%
          prometheus:
            enabled: false
            path: /metrics
          readinessDelay: 5
          readinessPath: /health
          readinessPeriod: 15
          readinessTimeout: 3
          registerAdditionalDns:
            enabled: false
          releaseNameOverride: '{{ .Release.Name }}-ccd-case-print-service'
          replicas: 1
          useInterpodAntiAffinity: false
      ccd-data-store-api:
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: true
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresqlHostName: '{{ .Release.Name }}-postgresql'
          postgresqlPassword: hmcts
          postgresqlUsername: hmcts
          s2sUrl: http://{{ .Release.Name }}-s2s
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        java:
          aadIdentityName: ccd
          applicationPort: 4452
          cpuLimits: 1500m
          cpuRequests: 250m
          devApplicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
          devcpuLimits: 2500m
          devcpuRequests: 250m
          devmemoryLimits: 1024Mi
          devmemoryRequests: 512Mi
          environment:
            CCD_DEFAULTPRINTURL: https://return-case-doc-ccd.nonprod.platform.hmcts.net/jurisdictions/:jid/case-types/:ctid/cases/:cid
            CCD_DM_DOMAIN: https?://dm-store.*
            CCD_DRAFT_STORE_URL: '{{ tpl .Values.global.draftStoreUrl $}}'
            CCD_DRAFT_TTL_DAYS: 180
            DATA_STORE_DB_HOST: '{{ .Release.Name }}-postgresql'
            DATA_STORE_DB_MAX_POOL_SIZE: 10
            DATA_STORE_DB_NAME: data-store
            DATA_STORE_DB_OPTIONS: ?stringtype=unspecified
            DATA_STORE_DB_PASSWORD: '{{ tpl .Values.global.postgresPassword $}}'
            DATA_STORE_DB_PORT: 5432
            DATA_STORE_DB_USERNAME: '{{ tpl .Values.global.postgresUsername $}}'
            DATA_STORE_IDAM_KEY: AAAAAAAAAAAAAAAA
            DATA_STORE_S2S_AUTHORISED_SERVICES: ccd_data,ccd_gw,ccd_ps,probate_backend,divorce_ccd_submission,sscs,sscs_bulkscan,cmc,cmc_claim_store,cmc_claim_external_api,jui_webapp,pui_webapp,bulk_scan_orchestrator,fpl_case_service,iac,finrem_ccd_data_migrator,finrem_case_orchestration,employment_tribunals,ethos_repl_service,ccpay_bubble,ctsc_work_allocation,em_ccd_orchestrator,xui_webapp,bulk_scan_payment_processor
            DEFINITION_CACHE_EVICTION_POLICY: NONE
            DEFINITION_CACHE_LATEST_VERSION_TTL_SEC: 1
            DEFINITION_CACHE_MAX_IDLE_SEC: 259200
            DEFINITION_CACHE_MAX_SIZE: 5000
            DEFINITION_STORE_HOST: '{{ tpl .Values.global.ccdDefinitionStoreUrl $}}'
            ELASTIC_SEARCH_BLACKLIST: query_string
            ELASTIC_SEARCH_CASE_INDEX_NAME_FORMAT: '%s_cases'
            ELASTIC_SEARCH_CASE_INDEX_TYPE: _doc
            ELASTIC_SEARCH_DATA_NODES_HOSTS: ""
            ELASTIC_SEARCH_ENABLED: false
            ELASTIC_SEARCH_HOSTS: ""
            ELASTIC_SEARCH_NODES_DISCOVERY_ENABLED: false
            ELASTIC_SEARCH_NODES_DISCOVERY_FILTER: _all
            ELASTIC_SEARCH_NODES_DISCOVERY_FREQUENCY_MILLIS: "5000"
            ELASTIC_SEARCH_PASSWORD: ""
            ELASTIC_SEARCH_REQUEST_TIMEOUT: 6000
            ENABLE_DB_MIGRATE: true
            HTTP_CLIENT_CONNECTION_TIMEOUT: "10000"
            HTTP_CLIENT_MAX_CLIENT_PER_ROUTE: "20"
            HTTP_CLIENT_MAX_TOTAL: "200"
            HTTP_CLIENT_READ_TIMEOUT: "60000"
            HTTP_CLIENT_SECONDS_IDLE_CONNECTION: "120"
            HTTP_CLIENT_VALIDATE_AFTER_INACTIVITY: "0"
            IDAM_S2S_URL: '{{ tpl .Values.global.s2sUrl $}}'
            IDAM_USER_URL: '{{ tpl .Values.global.idamApiUrl $}}'
            JPA_CRITERIA_IN_SEARCH_ENABLED: false
            USER_PROFILE_HOST: '{{ tpl .Values.global.ccdUserProfileUrl $}}'
          functionaltests:
            enabled: false
            image: hmctspublic.azurecr.io/spring-boot/template
          functionaltestscron:
            enabled: false
            image: hmctspublic.azurecr.io/spring-boot/template
            schedule: 30 0/6 * * *
          global:
            ccdAdminWebIngress: ""
            ccdApiGatewayIngress: ""
            ccdCaseManagementWebIngress: ""
            ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
            ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
            ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
            devMode: true
            dmStoreUrl: http://{{ .Release.Name }}-dm-store
            draftStoreUrl: http://{{ .Release.Name }}-draft-store
            emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
            enableKeyVaults: false
            functionaltestscron:
              enabled: true
            idamApiUrl: ""
            idamWebUrl: ""
            paymentsUrl: http://{{ .Release.Name }}-payment-api
            postgresPassword: hmcts
            postgresUsername: hmcts
            postgresqlHostName: '{{ .Release.Name }}-postgresql'
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            s2sUrl: http://{{ .Release.Name }}-s2s
            smoketestscron:
              enabled: true
            subscriptionId: 1c4f0704-a29e-403d-b719-b9
          image: hmctspublic.azurecr.io/ccd/data-store-api:latest
          ingressClass: traefik
          ingressHost: ""
          keyVaults:
            ccd:
              secrets:
              - data-store-api-POSTGRES-PASS
              - data-store-api-draftStoreEncryptionSecret
              - data-store-api-draft-key
              - ccd-data-s2s-secret
              - ccd-ELASTIC-SEARCH-URL
              - ccd-ELASTIC-SEARCH-DATA-NODES-URL
              - ccd-ELASTIC-SEARCH-PASSWORD
              - AppInsightsInstrumentationKey
          livenessDelay: 240
          livenessFailureThreshold: 3
          livenessPath: /health/liveness
          livenessPeriod: 15
          livenessTimeout: 3
          memoryLimits: 2048Mi
          memoryRequests: 512Mi
          pdb:
            enabled: true
            maxUnavailable: 50%
          postgresql:
            enabled: false
            extraEnv: {}
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              enableKeyVaults: false
              functionaltestscron:
                enabled: true
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresql: {}
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              smoketestscron:
                enabled: true
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            image:
              debug: false
              pullPolicy: IfNotPresent
              registry: docker.io
              repository: bitnami/postgresql
              tag: 11.5.0-debian-9-r60
            livenessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            master:
              affinity: {}
              extraVolumeMounts: []
              extraVolumes: []
              nodeSelector: {}
              podAnnotations: {}
              podLabels: {}
              tolerations: []
            metrics:
              enabled: false
              image:
                pullPolicy: IfNotPresent
                registry: docker.io
                repository: bitnami/postgres-exporter
                tag: 0.5.1-debian-9-r73
              livenessProbe:
                enabled: true
                failureThreshold: 6
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              readinessProbe:
                enabled: true
                failureThreshold: 6
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              securityContext:
                enabled: false
                runAsUser: 1001
              service:
                annotations:
                  prometheus.io/port: "9187"
                  prometheus.io/scrape: "true"
                loadBalancerIP: null
                type: ClusterIP
              serviceMonitor:
                additionalLabels: {}
                enabled: false
            networkPolicy:
              allowExternal: true
              enabled: false
            persistence:
              accessModes:
              - ReadWriteOnce
              annotations: {}
              enabled: false
              mountPath: /bitnami/postgresql
              size: 8Gi
              subPath: ""
            postgresqlDataDir: /bitnami/postgresql/data
            postgresqlDatabase: javadatabase
            postgresqlPassword: javapassword
            postgresqlUsername: javapostgres
            readinessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            replication:
              applicationName: my_application
              enabled: false
              numSynchronousReplicas: 0
              password: repl_password
              slaveReplicas: 1
              synchronousCommit: "off"
              user: repl_user
            resources:
              requests:
                cpu: 250m
                memory: 256Mi
            securityContext:
              enabled: true
              fsGroup: 1001
              runAsUser: 1001
            service:
              annotations: {}
              port: 5432
              type: ClusterIP
            serviceAccount:
              enabled: false
            slave:
              affinity: {}
              extraVolumeMounts: []
              extraVolumes: []
              nodeSelector: {}
              podAnnotations: {}
              podLabels: {}
              tolerations: []
            updateStrategy:
              type: RollingUpdate
            volumePermissions:
              enabled: true
              image:
                pullPolicy: Always
                registry: docker.io
                repository: bitnami/minideb
                tag: stretch
              securityContext:
                runAsUser: 0
          prometheus:
            enabled: false
            path: /prometheus
          readinessDelay: 240
          readinessPath: /health
          readinessPeriod: 15
          readinessTimeout: 3
          registerAdditionalDns:
            enabled: false
          releaseNameOverride: '{{ .Release.Name }}-ccd-data-store-api'
          replicas: 1
          smoketests:
            enabled: false
            image: hmctspublic.azurecr.io/spring-boot/template
          smoketestscron:
            enabled: false
            image: hmctspublic.azurecr.io/spring-boot/template
            schedule: 20 0/1 * * *
          testsConfig:
            cpuLimits: 1000m
            cpuRequests: 100m
            memoryLimits: 1024Mi
            memoryRequests: 256Mi
          useInterpodAntiAffinity: false
      ccd-definition-importer:
        cpuLimits: 1500m
        cpuRequests: 250m
        definitionFilename: ""
        definitionStoreUrl: '{{ tpl .Values.global.ccdDefinitionStoreUrl $}}'
        definitions: ""
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: true
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          environment: null
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresqlHostName: '{{ .Release.Name }}-postgresql'
          postgresqlPassword: hmcts
          postgresqlUsername: hmcts
          s2sUrl: http://{{ .Release.Name }}-s2s
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        idamApiUrl: '{{ tpl .Values.global.idamApiUrl $}}'
        idamClientId: ccd_admin
        image: hmctspublic.azurecr.io/ccd/definition-importer:latest
        ingressHost: ""
        keyVaults:
          ccd:
            excludeEnvironmentSuffix: false
            secrets:
            - ccd-importer-autotest-email
            - ccd-importer-autotest-password
            - ccd-api-gateway-oauth2-client-secret
        memoryLimits: 2048Mi
        memoryRequests: 512Mi
        microservice: ccd_gw
        redirectUri: https://{{ tpl .Values.global.ccdAdminWebIngress $}}/oauth2redirect
        releaseNameOverride: '{{ .Release.Name }}-definition-importer'
        s2sUrl: '{{ tpl .Values.global.s2sUrl $}}'
        secrets:
          CLIENT_SECRET:
            disabled: false
            key: idam-client-secret
            secretRef: importer-creds
          IMPORTER_PASSWORD:
            disabled: false
            key: password
            secretRef: importer-creds
          IMPORTER_USERNAME:
            disabled: false
            key: username
            secretRef: importer-creds
        userRoles:
        - caseworker-cmc
        verbose: true
        waitHosts: ""
        waitHostsTimeout: 300
      ccd-definition-store-api:
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: true
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresqlHostName: '{{ .Release.Name }}-postgresql'
          postgresqlPassword: hmcts
          postgresqlUsername: hmcts
          s2sUrl: http://{{ .Release.Name }}-s2s
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        java:
          aadIdentityName: ccd
          applicationPort: 4451
          cpuLimits: 1500m
          cpuRequests: 250m
          devApplicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
          devcpuLimits: 2500m
          devcpuRequests: 250m
          devmemoryLimits: 1024Mi
          devmemoryRequests: 512Mi
          environment:
            ADMIN_WEB_AUTHORIZATION_ENABLED: false
            ADMIN_WEB_AUTHORIZATION_IMPORT_DEFINITION_0: ccd-import
            ADMIN_WEB_AUTHORIZATION_MANAGE_DEFINITION_0: ccd-import
            ADMIN_WEB_AUTHORIZATION_MANAGE_USER_PROFILE_0: ccd-import
            ADMIN_WEB_AUTHORIZATION_MANAGE_USER_ROLE_0: ccd-import
            AZURE_STORAGE_BLOB_CONTAINER_REFERENCE: definition-store
            AZURE_STORAGE_CONNECTION_STRING: DefaultEndpointsProtocol=https;AccountName=$(STORAGE_ACCOUNT_NAME);AccountKey=$(STORAGE_ACCOUNT_KEY);EndpointSuffix=core.windows.net
            AZURE_STORAGE_DEFINITION_UPLOAD_ENABLED: false
            DEFINITION_STORE_DB_HOST: '{{ .Release.Name }}-postgresql'
            DEFINITION_STORE_DB_MAX_POOL_SIZE: 5
            DEFINITION_STORE_DB_NAME: definition-store
            DEFINITION_STORE_DB_OPTIONS: ""
            DEFINITION_STORE_DB_PASSWORD: '{{ tpl .Values.global.postgresPassword
              $}}'
            DEFINITION_STORE_DB_PORT: 5432
            DEFINITION_STORE_DB_USERNAME: '{{ tpl .Values.global.postgresUsername
              $}}'
            DEFINITION_STORE_S2S_AUTHORISED_SERVICES: ccd_data,ccd_gw,ccd_admin,jui_webapp,pui_webapp
            ELASTIC_SEARCH_CASE_INDEX_NAME_FORMAT: '%s_cases'
            ELASTIC_SEARCH_DYNAMIC: false
            ELASTIC_SEARCH_ENABLED: false
            ELASTIC_SEARCH_FAIL_ON_IMPORT: true
            ELASTIC_SEARCH_INDEX_SHARDS: 2
            ELASTIC_SEARCH_INDEX_SHARDS_REPLICAS: 1
            ELASTIC_SEARCH_PORT: 9200
            ELASTIC_SEARCH_SCHEME: http
            ENABLE_DB_MIGRATE: true
            IDAM_S2S_URL: '{{ tpl .Values.global.s2sUrl $}}'
            IDAM_USER_URL: '{{ tpl .Values.global.idamApiUrl $}}'
            USER_PROFILE_HOST: '{{ tpl .Values.global.ccdUserProfileUrl $}}'
          functionaltests:
            enabled: false
            image: hmctspublic.azurecr.io/spring-boot/template
          functionaltestscron:
            enabled: false
            image: hmctspublic.azurecr.io/spring-boot/template
            schedule: 30 0/6 * * *
          global:
            ccdAdminWebIngress: ""
            ccdApiGatewayIngress: ""
            ccdCaseManagementWebIngress: ""
            ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
            ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
            ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
            devMode: true
            dmStoreUrl: http://{{ .Release.Name }}-dm-store
            draftStoreUrl: http://{{ .Release.Name }}-draft-store
            emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
            enableKeyVaults: false
            functionaltestscron:
              enabled: true
            idamApiUrl: ""
            idamWebUrl: ""
            paymentsUrl: http://{{ .Release.Name }}-payment-api
            postgresPassword: hmcts
            postgresUsername: hmcts
            postgresqlHostName: '{{ .Release.Name }}-postgresql'
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            s2sUrl: http://{{ .Release.Name }}-s2s
            smoketestscron:
              enabled: true
            subscriptionId: 1c4f0704-a29e-403d-b719-b9
          image: hmctspublic.azurecr.io/ccd/definition-store-api:latest
          ingressClass: traefik
          ingressHost: ""
          keyVaults:
            ccd:
              secrets:
              - definition-store-api-POSTGRES-PASS
              - ccd-definition-s2s-secret
              - ccd-ELASTIC-SEARCH-URL
              - ccd-ELASTIC-SEARCH-PASSWORD
              - storage-account-primary-connection-string
              - AppInsightsInstrumentationKey
          livenessDelay: 180
          livenessFailureThreshold: 3
          livenessPath: /health/liveness
          livenessPeriod: 15
          livenessTimeout: 3
          memoryLimits: 2G
          memoryRequests: 1G
          pdb:
            enabled: true
            maxUnavailable: 50%
          postgresql:
            enabled: false
            extraEnv: {}
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              enableKeyVaults: false
              functionaltestscron:
                enabled: true
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresql: {}
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              smoketestscron:
                enabled: true
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            image:
              debug: false
              pullPolicy: IfNotPresent
              registry: docker.io
              repository: bitnami/postgresql
              tag: 11.5.0-debian-9-r60
            livenessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            master:
              affinity: {}
              extraVolumeMounts: []
              extraVolumes: []
              nodeSelector: {}
              podAnnotations: {}
              podLabels: {}
              tolerations: []
            metrics:
              enabled: false
              image:
                pullPolicy: IfNotPresent
                registry: docker.io
                repository: bitnami/postgres-exporter
                tag: 0.5.1-debian-9-r73
              livenessProbe:
                enabled: true
                failureThreshold: 6
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              readinessProbe:
                enabled: true
                failureThreshold: 6
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              securityContext:
                enabled: false
                runAsUser: 1001
              service:
                annotations:
                  prometheus.io/port: "9187"
                  prometheus.io/scrape: "true"
                loadBalancerIP: null
                type: ClusterIP
              serviceMonitor:
                additionalLabels: {}
                enabled: false
            networkPolicy:
              allowExternal: true
              enabled: false
            persistence:
              accessModes:
              - ReadWriteOnce
              annotations: {}
              enabled: false
              mountPath: /bitnami/postgresql
              size: 8Gi
              subPath: ""
            postgresqlDataDir: /bitnami/postgresql/data
            postgresqlDatabase: javadatabase
            postgresqlPassword: javapassword
            postgresqlUsername: javapostgres
            readinessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            replication:
              applicationName: my_application
              enabled: false
              numSynchronousReplicas: 0
              password: repl_password
              slaveReplicas: 1
              synchronousCommit: "off"
              user: repl_user
            resources:
              requests:
                cpu: 250m
                memory: 256Mi
            securityContext:
              enabled: true
              fsGroup: 1001
              runAsUser: 1001
            service:
              annotations: {}
              port: 5432
              type: ClusterIP
            serviceAccount:
              enabled: false
            slave:
              affinity: {}
              extraVolumeMounts: []
              extraVolumes: []
              nodeSelector: {}
              podAnnotations: {}
              podLabels: {}
              tolerations: []
            updateStrategy:
              type: RollingUpdate
            volumePermissions:
              enabled: true
              image:
                pullPolicy: Always
                registry: docker.io
                repository: bitnami/minideb
                tag: stretch
              securityContext:
                runAsUser: 0
          prometheus:
            enabled: false
            path: /prometheus
          readinessDelay: 180
          readinessPath: /health
          readinessPeriod: 15
          readinessTimeout: 3
          registerAdditionalDns:
            enabled: false
          releaseNameOverride: '{{ .Release.Name }}-ccd-definition-store'
          replicas: 1
          secrets:
            STORAGE_ACCOUNT_KEY:
              disabled: true
              key: accessKey
              secretRef: storage-secret-{{ .Release.Name }}-blobstorage
            STORAGE_ACCOUNT_NAME:
              disabled: true
              key: storageAccountName
              secretRef: storage-secret-{{ .Release.Name }}-blobstorage
          smoketests:
            enabled: false
            image: hmctspublic.azurecr.io/spring-boot/template
          smoketestscron:
            enabled: false
            image: hmctspublic.azurecr.io/spring-boot/template
            schedule: 20 0/1 * * *
          testsConfig:
            cpuLimits: 1000m
            cpuRequests: 100m
            memoryLimits: 1024Mi
            memoryRequests: 256Mi
          useInterpodAntiAffinity: false
      ccd-test-stubs-service:
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: true
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresqlHostName: '{{ .Release.Name }}-postgresql'
          postgresqlPassword: hmcts
          postgresqlUsername: hmcts
          s2sUrl: http://{{ .Release.Name }}-s2s
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        java:
          applicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
          applicationPort: 5555
          cpuLimits: 2500m
          cpuRequests: 25m
          environment:
            WIREMOCK_SERVER_MAPPINGS_PATH: wiremock
          global:
            ccdAdminWebIngress: ""
            ccdApiGatewayIngress: ""
            ccdCaseManagementWebIngress: ""
            ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
            ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
            ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
            devMode: true
            dmStoreUrl: http://{{ .Release.Name }}-dm-store
            draftStoreUrl: http://{{ .Release.Name }}-draft-store
            emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
            enableKeyVaults: false
            idamApiUrl: ""
            idamWebUrl: ""
            paymentsUrl: http://{{ .Release.Name }}-payment-api
            postgresPassword: hmcts
            postgresUsername: hmcts
            postgresqlHostName: '{{ .Release.Name }}-postgresql'
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            s2sUrl: http://{{ .Release.Name }}-s2s
            subscriptionId: 1c4f0704-a29e-403d-b719-b9
          image: hmctspublic.azurecr.io/ccd/test-stubs-service:latest
          livenessDelay: 30
          livenessFailureThreshold: 3
          livenessPath: /health
          livenessPeriod: 15
          livenessTimeout: 3
          memoryLimits: 1024Mi
          memoryRequests: 512Mi
          pdb:
            enabled: true
            maxUnavailable: 50%
          postgresql:
            enabled: false
            extraEnv:
            - name: POSTGRESQL_DATABASE
              value: javadatabase
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              enableKeyVaults: false
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresql: {}
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            image:
              debug: false
              pullPolicy: Always
              registry: docker.io
              repository: bitnami/postgresql
              tag: 11.3.0
            livenessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            master:
              affinity: {}
              nodeSelector: {}
              podAnnotations: {}
              podLabels: {}
              tolerations: []
            metrics:
              enabled: false
              image:
                pullPolicy: IfNotPresent
                registry: docker.io
                repository: wrouesnel/postgres_exporter
                tag: v0.4.7
              livenessProbe:
                enabled: true
                failureThreshold: 6
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              readinessProbe:
                enabled: true
                failureThreshold: 6
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              securityContext:
                enabled: false
                runAsUser: 1001
              service:
                annotations:
                  prometheus.io/port: "9187"
                  prometheus.io/scrape: "true"
                loadBalancerIP: null
                type: ClusterIP
            networkPolicy:
              allowExternal: true
              enabled: false
            persistence:
              accessModes:
              - ReadWriteOnce
              annotations: {}
              enabled: false
              mountPath: /bitnami/postgresql
              size: 8Gi
              subPath: ""
            postgresqlDataDir: /bitnami/postgresql/data
            postgresqlDatabase: javadatabase
            postgresqlPassword: javapassword
            postgresqlUsername: javapostgres
            readinessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            replication:
              applicationName: my_application
              enabled: false
              numSynchronousReplicas: 0
              password: repl_password
              slaveReplicas: 1
              synchronousCommit: "off"
              user: repl_user
            resources:
              requests:
                cpu: 250m
                memory: 256Mi
            securityContext:
              enabled: true
              fsGroup: 1001
              runAsUser: 1001
            service:
              annotations: {}
              port: 5432
              type: ClusterIP
            serviceAccount:
              enabled: false
            slave:
              affinity: {}
              nodeSelector: {}
              podAnnotations: {}
              podLabels: {}
              tolerations: []
            updateStrategy:
              type: RollingUpdate
            volumePermissions:
              enabled: true
              image:
                pullPolicy: Always
                registry: docker.io
                repository: bitnami/minideb
                tag: latest
              securityContext:
                runAsUser: 0
          readinessDelay: 30
          readinessPath: /health
          readinessPeriod: 15
          readinessTimeout: 3
          registerAdditionalDns:
            enabled: false
          releaseNameOverride: '{{ .Release.Name }}-ccd-test-stubs-service'
          replicas: 1
          useInterpodAntiAffinity: false
      ccd-user-profile-api:
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: true
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresqlHostName: '{{ .Release.Name }}-postgresql'
          postgresqlPassword: hmcts
          postgresqlUsername: hmcts
          s2sUrl: http://{{ .Release.Name }}-s2s
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        java:
          aadIdentityName: ccd
          applicationPort: 4453
          cpuLimits: 1500m
          cpuRequests: 250m
          devApplicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
          devcpuLimits: 2500m
          devcpuRequests: 250m
          devmemoryLimits: 1024Mi
          devmemoryRequests: 512Mi
          environment:
            ENABLE_DB_MIGRATE: true
            IDAM_S2S_URL: '{{ tpl .Values.global.s2sUrl $}}'
            LOGBACK_REQUIRE_ALERT_LEVEL: "false"
            LOGBACK_REQUIRE_ERROR_CODE: "false"
            USER_PROFILE_DB_HOST: '{{ .Release.Name }}-postgresql'
            USER_PROFILE_DB_NAME: user-profile
            USER_PROFILE_DB_OPTIONS: ?stringtype=unspecified
            USER_PROFILE_DB_PASSWORD: '{{ tpl .Values.global.postgresPassword $}}'
            USER_PROFILE_DB_PORT: 5432
            USER_PROFILE_DB_USERNAME: '{{ tpl .Values.global.postgresUsername $}}'
            USER_PROFILE_S2S_AUTHORISED_SERVICES: ccd_data,ccd_definition,ccd_admin
          functionaltests:
            enabled: false
            image: hmctspublic.azurecr.io/spring-boot/template
          functionaltestscron:
            enabled: false
            image: hmctspublic.azurecr.io/spring-boot/template
            schedule: 30 0/6 * * *
          global:
            ccdAdminWebIngress: ""
            ccdApiGatewayIngress: ""
            ccdCaseManagementWebIngress: ""
            ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
            ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
            ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
            devMode: true
            dmStoreUrl: http://{{ .Release.Name }}-dm-store
            draftStoreUrl: http://{{ .Release.Name }}-draft-store
            emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
            enableKeyVaults: false
            functionaltestscron:
              enabled: true
            idamApiUrl: ""
            idamWebUrl: ""
            paymentsUrl: http://{{ .Release.Name }}-payment-api
            postgresPassword: hmcts
            postgresUsername: hmcts
            postgresqlHostName: '{{ .Release.Name }}-postgresql'
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            s2sUrl: http://{{ .Release.Name }}-s2s
            smoketestscron:
              enabled: true
            subscriptionId: 1c4f0704-a29e-403d-b719-b9
          image: hmctspublic.azurecr.io/ccd/user-profile-api:latest
          ingressClass: traefik
          ingressHost: ""
          keyVaults:
            ccd:
              secrets:
              - user-profile-api-POSTGRES-PASS
              - AppInsightsInstrumentationKey
          livenessDelay: 120
          livenessFailureThreshold: 3
          livenessPath: /health/liveness
          livenessPeriod: 15
          livenessTimeout: 3
          memoryLimits: 2048Mi
          memoryRequests: 512Mi
          pdb:
            enabled: true
            maxUnavailable: 50%
          postgresql:
            enabled: false
            extraEnv: {}
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              enableKeyVaults: false
              functionaltestscron:
                enabled: true
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresql: {}
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              smoketestscron:
                enabled: true
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            image:
              debug: false
              pullPolicy: IfNotPresent
              registry: docker.io
              repository: bitnami/postgresql
              tag: 11.5.0-debian-9-r60
            livenessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            master:
              affinity: {}
              extraVolumeMounts: []
              extraVolumes: []
              nodeSelector: {}
              podAnnotations: {}
              podLabels: {}
              tolerations: []
            metrics:
              enabled: false
              image:
                pullPolicy: IfNotPresent
                registry: docker.io
                repository: bitnami/postgres-exporter
                tag: 0.5.1-debian-9-r73
              livenessProbe:
                enabled: true
                failureThreshold: 6
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              readinessProbe:
                enabled: true
                failureThreshold: 6
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              securityContext:
                enabled: false
                runAsUser: 1001
              service:
                annotations:
                  prometheus.io/port: "9187"
                  prometheus.io/scrape: "true"
                loadBalancerIP: null
                type: ClusterIP
              serviceMonitor:
                additionalLabels: {}
                enabled: false
            networkPolicy:
              allowExternal: true
              enabled: false
            persistence:
              accessModes:
              - ReadWriteOnce
              annotations: {}
              enabled: false
              mountPath: /bitnami/postgresql
              size: 8Gi
              subPath: ""
            postgresqlDataDir: /bitnami/postgresql/data
            postgresqlDatabase: javadatabase
            postgresqlPassword: javapassword
            postgresqlUsername: javapostgres
            readinessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            replication:
              applicationName: my_application
              enabled: false
              numSynchronousReplicas: 0
              password: repl_password
              slaveReplicas: 1
              synchronousCommit: "off"
              user: repl_user
            resources:
              requests:
                cpu: 250m
                memory: 256Mi
            securityContext:
              enabled: true
              fsGroup: 1001
              runAsUser: 1001
            service:
              annotations: {}
              port: 5432
              type: ClusterIP
            serviceAccount:
              enabled: false
            slave:
              affinity: {}
              extraVolumeMounts: []
              extraVolumes: []
              nodeSelector: {}
              podAnnotations: {}
              podLabels: {}
              tolerations: []
            updateStrategy:
              type: RollingUpdate
            volumePermissions:
              enabled: true
              image:
                pullPolicy: Always
                registry: docker.io
                repository: bitnami/minideb
                tag: stretch
              securityContext:
                runAsUser: 0
          prometheus:
            enabled: false
            path: /prometheus
          readinessDelay: 120
          readinessPath: /health
          readinessPeriod: 15
          readinessTimeout: 3
          registerAdditionalDns:
            enabled: false
          releaseNameOverride: '{{ .Release.Name }}-ccd-user-profile-api'
          replicas: 1
          smoketests:
            enabled: false
            image: hmctspublic.azurecr.io/spring-boot/template
          smoketestscron:
            enabled: false
            image: hmctspublic.azurecr.io/spring-boot/template
            schedule: 20 0/1 * * *
          testsConfig:
            cpuLimits: 1000m
            cpuRequests: 100m
            memoryLimits: 1024Mi
            memoryRequests: 256Mi
          useInterpodAntiAffinity: false
      ccd-user-profile-importer:
        cpuLimits: 1500m
        cpuRequests: 250m
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: true
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          environment: null
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresqlHostName: '{{ .Release.Name }}-postgresql'
          postgresqlPassword: hmcts
          postgresqlUsername: hmcts
          s2sUrl: http://{{ .Release.Name }}-s2s
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        image: hmctspublic.azurecr.io/ccd/user-profile-importer:latest
        memoryLimits: 2048Mi
        memoryRequests: 512Mi
        microservice: ccd_definition
        releaseNameOverride: '{{ tpl .Release.Name $}}-user-profile-importer'
        s2sUrl: '{{ tpl .Values.global.s2sUrl $}}'
        userProfileUrl: '{{ tpl .Values.global.ccdUserProfileUrl $}}'
        waitHosts: ""
        waitHostsTimeout: 300
      ccpay:
        ccd:
          blobstorage:
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            location: uksouth
            releaseNameOverride: '{{ .Release.Name }}-blobstorage'
            resourceGroup: ccd-aks
            setup:
              containers:
              - definition-store
              - dm-store
            teamName: CCD
          ccd:
            activityApi:
              enabled: true
            adminWeb:
              enabled: true
            apiGatewayWeb:
              enabled: true
            blobstorage:
              enabled: true
            definitionImporter:
              enabled: false
            dmStore:
              enabled: true
            draftStore:
              enabled: true
            emAnnotation:
              enabled: false
            managementWeb:
              enabled: true
            paymentApi:
              enabled: true
            postgresql:
              enabled: true
            printService:
              enabled: true
            s2s:
              enabled: true
            testStubsService:
              enabled: true
            userProfileImporter:
              enabled: false
          ccd-admin-web:
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            idam-pr:
              api:
                url: '{{ tpl .Values.global.idamApiUrl $}}'
              cpuLimits: 2500m
              cpuRequests: 25m
              global:
                ccdAdminWebIngress: ""
                ccdApiGatewayIngress: ""
                ccdCaseManagementWebIngress: ""
                ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                devMode: true
                dmStoreUrl: http://{{ .Release.Name }}-dm-store
                draftStoreUrl: http://{{ .Release.Name }}-draft-store
                emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                idamApiUrl: ""
                idamWebUrl: ""
                paymentsUrl: http://{{ .Release.Name }}-payment-api
                postgresPassword: hmcts
                postgresUsername: hmcts
                postgresqlHostName: '{{ .Release.Name }}-postgresql'
                postgresqlPassword: hmcts
                postgresqlUsername: hmcts
                s2sUrl: http://{{ .Release.Name }}-s2s
                subscriptionId: 1c4f0704-a29e-403d-b719-b9
              memoryLimits: 1024Mi
              memoryRequests: 512Mi
              redirect_uris:
                CCD Admin:
                - https://{{ tpl .Values.global.ccdAdminWebIngress $}}/oauth2redirect
                test-public-service:
                - http://localhost/oauth2/receiver
              releaseNameOverride: ccd-admin-web-idam-pr
              web_public:
                url: '{{ tpl .Values.global.idamWebUrl $}}'
            nodejs:
              applicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
              applicationPort: 3100
              cpuLimits: 1
              cpuRequests: 25m
              environment:
                ADMIN_ALL_USER_ROLES_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl
                  $}}/api/user-roles'
                ADMINWEB_AUTHORIZATION_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl
                  $}}/api/idam/adminweb/authorization'
                ADMINWEB_CREATE_DEFINITION_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl
                  $}}/api/draft'
                ADMINWEB_DEFINITIONS_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl
                  $}}/api/drafts'
                ADMINWEB_IMPORT_AUDITS_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl
                  $}}/api/import-audits'
                ADMINWEB_IMPORT_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl
                  $}}/import'
                ADMINWEB_JURISDICTIONS_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl
                  $}}/api/data/jurisdictions'
                ADMINWEB_LOGIN_URL: '{{ tpl .Values.global.idamWebUrl $}}/login'
                ADMINWEB_ROLES_WHITELIST: ccd-import,ccd-import-validate
                ADMINWEB_SAVE_USER_PROFILE_URL: '{{ tpl .Values.global.ccdUserProfileUrl
                  $}}/users/save'
                ADMINWEB_UPDATE_DEFINITION_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl
                  $}}/api/draft/save'
                ADMINWEB_USER_PROFILE_URL: '{{ tpl .Values.global.ccdUserProfileUrl
                  $}}/users'
                ADMINWEB_USER_ROLE_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl
                  $}}/api/user-role'
                ADMINWEB_WHOAMI_URL: '{{ tpl .Values.global.ccdDefinitionStoreUrl
                  $}}/api/idam/profile'
                HPKP_MAX_AGE: 2592000
                HPKP_SHA256S: Set-proper-SHA256s
                IDAM_ADMIN_WEB_SERVICE_KEY: AAAAAAAAAAAAAAAA
                IDAM_BASE_URL: '{{ tpl .Values.global.idamApiUrl $}}'
                IDAM_OAUTH2_CLIENT_ID: ccd_admin
                IDAM_OAUTH2_LOGOUT_ENDPOINT: '{{ tpl .Values.global.idamApiUrl $}}/session/:token'
                IDAM_OAUTH2_TOKEN_ENDPOINT: '{{ tpl .Values.global.idamApiUrl $}}/oauth2/token'
                IDAM_S2S_URL: '{{ tpl .Values.global.s2sUrl $}}'
                IDAM_SERVICE_NAME: ccd_admin
                NODE_CONFIG_DIR: ./config
                NODE_ENV: production
                REFORM_SERVICE_NAME: admin-web
                REFORM_TEAM: ccd
                SECURE_AUTH_COOKIE_ENABLED: true
                SECURITY_REFERRER_POLICY: origin
                TS_BASE_URL: ./src/main
                USE_CSRF_PROTECTION: true
                UV_THREADPOOL_SIZE: 64
              global:
                ccdAdminWebIngress: ""
                ccdApiGatewayIngress: ""
                ccdCaseManagementWebIngress: ""
                ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                devMode: true
                dmStoreUrl: http://{{ .Release.Name }}-dm-store
                draftStoreUrl: http://{{ .Release.Name }}-draft-store
                emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                enableKeyVaults: false
                idamApiUrl: ""
                idamWebUrl: ""
                paymentsUrl: http://{{ .Release.Name }}-payment-api
                postgresPassword: hmcts
                postgresUsername: hmcts
                postgresqlHostName: '{{ .Release.Name }}-postgresql'
                postgresqlPassword: hmcts
                postgresqlUsername: hmcts
                s2sUrl: http://{{ .Release.Name }}-s2s
                subscriptionId: 1c4f0704-a29e-403d-b719-b9
              image: hmctspublic.azurecr.io/ccd/admin-web:latest
              imagePullPolicy: IfNotPresent
              ingressClass: traefik
              livenessDelay: 5
              livenessFailureThreshold: 3
              livenessPath: /health/liveness
              livenessPeriod: 15
              livenessTimeout: 3
              memoryLimits: 512Mi
              memoryRequests: 64Mi
              pdb:
                enabled: true
                maxUnavailable: 50%
              prometheus:
                enabled: false
                path: /metrics
              readinessDelay: 5
              readinessPath: /health
              readinessPeriod: 15
              readinessTimeout: 3
              registerAdditionalDns:
                enabled: false
              releaseNameOverride: '{{ .Release.Name }}-ccd-admin-web'
              replicas: 1
              useInterpodAntiAffinity: false
            tags:
              idam-pr: false
          ccd-api-gateway-web:
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            nodejs:
              applicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
              applicationPort: 3453
              cpuLimits: 1
              cpuRequests: 25m
              environment:
                CORS_ORIGIN_METHODS: GET,POST,OPTIONS,PUT,DELETE
                CORS_ORIGIN_WHITELIST: https://{{ tpl .Values.global.ccdCaseManagementWebIngress
                  $}},http://{{ tpl .Values.global.ccdCaseManagementWebIngress $}},{{
                  tpl .Values.global.ccdCaseManagementWebIngress $}},*
                IDAM_BASE_URL: '{{ tpl .Values.global.idamApiUrl $}}'
                IDAM_OAUTH2_CLIENT_ID: ccd_gateway
                IDAM_OAUTH2_LOGOUT_ENDPOINT: '{{ tpl .Values.global.idamApiUrl $ }}/session/:token'
                IDAM_OAUTH2_TOKEN_ENDPOINT: '{{ tpl .Values.global.idamApiUrl $ }}/oauth2/token'
                IDAM_S2S_URL: '{{ tpl .Values.global.s2sUrl $}}'
                IDAM_SERVICE_KEY: AAAAAAAAAAAAAAAA
                IDAM_SERVICE_NAME: ccd_gw
                PROXY_AGGREGATED: '{{ tpl .Values.global.ccdDataStoreUrl $}}'
                PROXY_CASE_ACTIVITY: http://ccd-case-activity-api
                PROXY_DATA: '{{ tpl .Values.global.ccdDataStoreUrl $}}'
                PROXY_DEFINITION_IMPORT: '{{ tpl .Values.global.ccdDefinitionStoreUrl
                  $}}'
                PROXY_DOCUMENT_MANAGEMENT: '{{ tpl .Values.global.dmStoreUrl $}}'
                PROXY_MV_ANNOTATIONS_API_URL: '{{ tpl .Values.global.emAnnotationUrl
                  $}}'
                PROXY_PAYMENTS: '{{ tpl .Values.global.paymentsUrl $}}'
                PROXY_PRINT_SERVICE: http://ccd-case-print-service
                SECURE_AUTH_COOKIE_ENABLED: true
              global:
                ccdAdminWebIngress: ""
                ccdApiGatewayIngress: ""
                ccdCaseManagementWebIngress: ""
                ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                devMode: true
                dmStoreUrl: http://{{ .Release.Name }}-dm-store
                draftStoreUrl: http://{{ .Release.Name }}-draft-store
                emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                enableKeyVaults: false
                idamApiUrl: ""
                idamWebUrl: ""
                paymentsUrl: http://{{ .Release.Name }}-payment-api
                postgresPassword: hmcts
                postgresUsername: hmcts
                postgresqlHostName: '{{ .Release.Name }}-postgresql'
                postgresqlPassword: hmcts
                postgresqlUsername: hmcts
                s2sUrl: http://{{ .Release.Name }}-s2s
                subscriptionId: 1c4f0704-a29e-403d-b719-b9
              image: hmctspublic.azurecr.io/ccd/api-gateway-web:latest
              imagePullPolicy: IfNotPresent
              ingressClass: traefik
              keyVaults:
                ccd:
                  secrets:
                  - ccd-api-gateway-oauth2-client-secret
                  - ccd-gw-s2s-secret
                  - postcode-info-address-lookup-token
              livenessDelay: 5
              livenessFailureThreshold: 3
              livenessPath: /health/liveness
              livenessPeriod: 15
              livenessTimeout: 3
              memoryLimits: 512Mi
              memoryRequests: 64Mi
              pdb:
                enabled: true
                maxUnavailable: 50%
              prometheus:
                enabled: false
                path: /metrics
              readinessDelay: 5
              readinessPath: /health
              readinessPeriod: 15
              readinessTimeout: 3
              registerAdditionalDns:
                enabled: false
              releaseNameOverride: '{{ .Release.Name }}-ccd-api-gw'
              replicas: 1
              useInterpodAntiAffinity: false
          ccd-case-activity-api:
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            nodejs:
              applicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
              applicationPort: 3460
              cpuLimits: 500m
              cpuRequests: 25m
              environment:
                APP_REQUEST_TIMEOUT: 5
                APP_STORE_CLEANUP_CRONTAB: '* * * * *'
                AUTH_BLACK_LIST: solicitor
                AUTH_WHITE_LIST: ^caseworker-.+
                CORS_ORIGIN_METHODS: GET,POST,OPTIONS
                CORS_ORIGIN_WHITELIST: https://ccd-case-management-web-aat.service.core-compute-aat.internal,https://www-ccd.nonprod.platform.hmcts.net
                IDAM_BASE_URL: '{{ tpl .Values.global.idamApiUrl $}}'
                REDIS_ACTIVITY_TTL: 5
                REDIS_HOST: ${SERVICE_NAME}-redis-master
                REDIS_KEY_PREFIX: 'activity:'
                REDIS_PASSWORD: fake-password
                REDIS_PORT: 6379
                REDIS_SSL_ENABLED: false
                REDIS_USER_DETAILS_TTL: 6000
              global:
                ccdAdminWebIngress: ""
                ccdApiGatewayIngress: ""
                ccdCaseManagementWebIngress: ""
                ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                devMode: true
                dmStoreUrl: http://{{ .Release.Name }}-dm-store
                draftStoreUrl: http://{{ .Release.Name }}-draft-store
                emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                enableKeyVaults: false
                idamApiUrl: ""
                idamWebUrl: ""
                paymentsUrl: http://{{ .Release.Name }}-payment-api
                postgresPassword: hmcts
                postgresUsername: hmcts
                postgresqlHostName: '{{ .Release.Name }}-postgresql'
                postgresqlPassword: hmcts
                postgresqlUsername: hmcts
                s2sUrl: http://{{ .Release.Name }}-s2s
                subscriptionId: 1c4f0704-a29e-403d-b719-b9
              image: hmctspublic.azurecr.io/ccd/case-activity-api:latest
              imagePullPolicy: IfNotPresent
              ingressClass: traefik
              livenessDelay: 5
              livenessFailureThreshold: 3
              livenessPath: /health/liveness
              livenessPeriod: 15
              livenessTimeout: 3
              memoryLimits: 512Mi
              memoryRequests: 64Mi
              pdb:
                enabled: true
                maxUnavailable: 50%
              prometheus:
                enabled: false
                path: /metrics
              readinessDelay: 5
              readinessPath: /health
              readinessPeriod: 15
              readinessTimeout: 3
              registerAdditionalDns:
                enabled: false
              releaseNameOverride: '{{ .Release.Name }}-ccd-case-activity-api'
              replicas: 1
              useInterpodAntiAffinity: false
            redis:
              cluster:
                enabled: false
                slaveCount: 1
              configmap: '# maxmemory-policy volatile-lru'
              global:
                ccdAdminWebIngress: ""
                ccdApiGatewayIngress: ""
                ccdCaseManagementWebIngress: ""
                ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                devMode: true
                dmStoreUrl: http://{{ .Release.Name }}-dm-store
                draftStoreUrl: http://{{ .Release.Name }}-draft-store
                emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                idamApiUrl: ""
                idamWebUrl: ""
                paymentsUrl: http://{{ .Release.Name }}-payment-api
                postgresPassword: hmcts
                postgresUsername: hmcts
                postgresqlHostName: '{{ .Release.Name }}-postgresql'
                postgresqlPassword: hmcts
                postgresqlUsername: hmcts
                s2sUrl: http://{{ .Release.Name }}-s2s
                subscriptionId: 1c4f0704-a29e-403d-b719-b9
              image:
                pullPolicy: Always
                registry: docker.io
                repository: bitnami/redis
                tag: 4.0.12
              master:
                affinity: {}
                command: /run.sh
                disableCommands:
                - FLUSHDB
                - FLUSHALL
                extraFlags: []
                livenessProbe:
                  enabled: true
                  failureThreshold: 5
                  initialDelaySeconds: 5
                  periodSeconds: 5
                  successThreshold: 1
                  timeoutSeconds: 5
                persistence:
                  accessModes:
                  - ReadWriteOnce
                  enabled: false
                  path: /data
                  size: 8Gi
                  subPath: ""
                podAnnotations: {}
                podLabels: {}
                port: 6379
                readinessProbe:
                  enabled: true
                  failureThreshold: 5
                  initialDelaySeconds: 5
                  periodSeconds: 5
                  successThreshold: 1
                  timeoutSeconds: 1
                securityContext:
                  enabled: true
                  fsGroup: 1001
                  runAsUser: 1001
                service:
                  annotations: {}
                  loadBalancerIP: null
                  port: 6379
                  type: ClusterIP
                statefulset:
                  updateStrategy: RollingUpdate
              metrics:
                enabled: false
                image:
                  pullPolicy: IfNotPresent
                  registry: docker.io
                  repository: oliver006/redis_exporter
                  tag: v0.28.0
                service:
                  annotations:
                    prometheus.io/port: "9121"
                    prometheus.io/scrape: "true"
                  type: ClusterIP
                serviceMonitor:
                  enabled: false
                  selector:
                    prometheus: kube-prometheus
              nameOverride: redis
              networkPolicy:
                enabled: false
              password: fake-password
              persistence: {}
              rbac:
                create: false
                role:
                  rules: []
              serviceAccount:
                create: false
                name: null
              slave:
                affinity: {}
                service:
                  annotations: {}
                  loadBalancerIP: null
                  type: ClusterIP
              sysctlImage:
                command: []
                enabled: false
                mountHostSys: false
                pullPolicy: Always
                registry: docker.io
                repository: bitnami/minideb
                tag: latest
              usePassword: true
              usePasswordFile: false
              volumePermissions:
                image:
                  pullPolicy: IfNotPresent
                  registry: docker.io
                  repository: bitnami/minideb
                  tag: latest
          ccd-case-management-web:
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            idam-pr:
              api:
                url: '{{ .Values.global.idamApiUrl }}'
              cpuLimits: 2500m
              cpuRequests: 25m
              global:
                ccdAdminWebIngress: ""
                ccdApiGatewayIngress: ""
                ccdCaseManagementWebIngress: ""
                ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                devMode: true
                dmStoreUrl: http://{{ .Release.Name }}-dm-store
                draftStoreUrl: http://{{ .Release.Name }}-draft-store
                emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                idamApiUrl: ""
                idamWebUrl: ""
                paymentsUrl: http://{{ .Release.Name }}-payment-api
                postgresPassword: hmcts
                postgresUsername: hmcts
                postgresqlHostName: '{{ .Release.Name }}-postgresql'
                postgresqlPassword: hmcts
                postgresqlUsername: hmcts
                s2sUrl: http://{{ .Release.Name }}-s2s
                subscriptionId: 1c4f0704-a29e-403d-b719-b9
              memoryLimits: 1024Mi
              memoryRequests: 512Mi
              redirect_uris:
                CCD:
                - https://{{.Values.global.ccdCaseManagementWebIngress}}/oauth2redirect
                test-public-service:
                - http://localhost/oauth2/receiver
              releaseNameOverride: ccd-idam-pr
              web_public:
                url: '{{ .Values.global.idamWebUrl }}'
            nodejs:
              applicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
              applicationPort: 3451
              cpuLimits: 1
              cpuRequests: 25m
              environment:
                ANNOTATION_API_URL: https://{{ tpl .Values.global.ccdApiGatewayIngress
                  $}}/em-anno"
                CCD_ACTIVITY_BATCH_COLLECTION_DELAY_MS: 1
                CCD_ACTIVITY_MAX_REQUEST_PER_BATCH: 25
                CCD_ACTIVITY_NEXT_POLL_REQUEST_MS: 5000
                CCD_ACTIVITY_RETRY: 5
                CCD_ACTIVITY_URL: https://{{ tpl .Values.global.ccdApiGatewayIngress
                  $}}/activity
                CCD_API_URL: https://{{ tpl  .Values.global.ccdApiGatewayIngress $
                  }}/aggregated
                CCD_DATA_URL: https://{{ tpl .Values.global.ccdApiGatewayIngress $}}/data
                CCD_GW_LOGOUT_URL: https://{{ tpl .Values.global.ccdApiGatewayIngress
                  $ }}/logout
                CCD_GW_OAUTH2_CLIENT_ID: ccd_gateway
                CCD_GW_OAUTH2_URL: https://{{ tpl .Values.global.ccdApiGatewayIngress
                  $}}/oauth2
                CCD_PAGE_SIZE: 25
                DM_URL: https://{{ tpl .Values.global.ccdApiGatewayIngress $}}/documents
                DM_URL_REMOTE: ^https?://(?:{{ tpl .Values.global.dmStoreUrl $}}(?::\d+)?)/documents
                IDAM_LOGIN_URL: '{{ .Values.global.idamWebUrl }}/login'
                PAYMENTS_URL: https://{{ tpl .Values.global.ccdApiGatewayIngress $
                  }}/payments
                POSTCODE_LOOKUP_URL: https://gateway-ccd.aat.platform.hmcts.net/addresses?postcode={{
                  .Values.postcodeParam }}
                PRINT_SERVICE_URL: https://{{ tpl .Values.global.ccdApiGatewayIngress
                  $}}/print
                PRINT_SERVICE_URL_REMOTE: https://return-case-doc-ccd.nonprod.platform.hmcts.net
              global:
                ccdAdminWebIngress: ""
                ccdApiGatewayIngress: ""
                ccdCaseManagementWebIngress: ""
                ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                devMode: true
                dmStoreUrl: http://{{ .Release.Name }}-dm-store
                draftStoreUrl: http://{{ .Release.Name }}-draft-store
                emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                enableKeyVaults: false
                idamApiUrl: ""
                idamWebUrl: ""
                paymentsUrl: http://{{ .Release.Name }}-payment-api
                postgresPassword: hmcts
                postgresUsername: hmcts
                postgresqlHostName: '{{ .Release.Name }}-postgresql'
                postgresqlPassword: hmcts
                postgresqlUsername: hmcts
                s2sUrl: http://{{ .Release.Name }}-s2s
                subscriptionId: 1c4f0704-a29e-403d-b719-b9
              image: hmctspublic.azurecr.io/ccd/case-management-web:latest
              imagePullPolicy: IfNotPresent
              livenessDelay: 5
              livenessFailureThreshold: 3
              livenessPath: /health/liveness
              livenessPeriod: 15
              livenessTimeout: 3
              memoryLimits: 512Mi
              memoryRequests: 64Mi
              pdb:
                enabled: true
                maxUnavailable: 50%
              postcodeParam: $${postcode}
              prometheus:
                enabled: false
                path: /metrics
              readinessDelay: 5
              readinessPath: /health
              readinessPeriod: 15
              readinessTimeout: 3
              registerAdditionalDns:
                enabled: false
              releaseNameOverride: '{{ .Release.Name }}-ccd-case-mgmt-web'
              replicas: 1
              useInterpodAntiAffinity: false
          ccd-case-print-service:
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            nodejs:
              applicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
              applicationPort: 3100
              cpuLimits: 1
              cpuRequests: 25m
              environment:
                CASE_DATA_PROBATE_TEMPLATE_URL: http://betaDevBprobateApp01.reform.hmcts.net:4104
                CASE_DATA_STORE_URL: '{{ tpl .Values.global.ccdDataStoreUrl $}}'
                HPKP_MAX_AGE: 2592000
                HPKP_SHA256S: Set-proper-SHA256s
                IDAM_API_URL: '{{ tpl .Values.global.idamApiUrl $}}'
                IDAM_AUTHENTICATION_WEB_URL: '{{ tpl .Values.global.idamWebUrl $}}'
                IDAM_BASE_URL: '{{ tpl .Values.global.idamApiUrl $}}'
                IDAM_PRINT_SERVICE_KEY: AAAAAAAAAAAAAAAA
                IDAM_S2S_AUTH: '{{ tpl .Values.global.s2sUrl $}}'
                IDAM_S2S_URL: '{{ tpl .Values.global.s2sUrl $}}'
                IDAM_SERVICE_NAME: ccd_ps
                NODE_CONFIG_DIR: ./config
                NODE_ENV: production
                REFORM_ENVIRONMENT: aat
                REFORM_SERVICE_NAME: case-print-service
                REFORM_TEAM: ccd
                SECURITY_REFERRER_POLICY: origin
                TS_BASE_URL: ./src/main
                USE_CSRF_PROTECTION: true
                UV_THREADPOOL_SIZE: 64
              global:
                ccdAdminWebIngress: ""
                ccdApiGatewayIngress: ""
                ccdCaseManagementWebIngress: ""
                ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                devMode: true
                dmStoreUrl: http://{{ .Release.Name }}-dm-store
                draftStoreUrl: http://{{ .Release.Name }}-draft-store
                emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                enableKeyVaults: false
                idamApiUrl: ""
                idamWebUrl: ""
                paymentsUrl: http://{{ .Release.Name }}-payment-api
                postgresPassword: hmcts
                postgresUsername: hmcts
                postgresqlHostName: '{{ .Release.Name }}-postgresql'
                postgresqlPassword: hmcts
                postgresqlUsername: hmcts
                s2sUrl: http://{{ .Release.Name }}-s2s
                subscriptionId: 1c4f0704-a29e-403d-b719-b9
              image: hmctspublic.azurecr.io/ccd/case-print-service:latest
              imagePullPolicy: IfNotPresent
              livenessDelay: 5
              livenessFailureThreshold: 3
              livenessPath: /health/liveness
              livenessPeriod: 15
              livenessTimeout: 3
              memoryLimits: 512Mi
              memoryRequests: 64Mi
              pdb:
                enabled: true
                maxUnavailable: 50%
              prometheus:
                enabled: false
                path: /metrics
              readinessDelay: 5
              readinessPath: /health
              readinessPeriod: 15
              readinessTimeout: 3
              registerAdditionalDns:
                enabled: false
              releaseNameOverride: '{{ .Release.Name }}-ccd-case-print-service'
              replicas: 1
              useInterpodAntiAffinity: false
          ccd-data-store-api:
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            java:
              applicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
              applicationPort: 4452
              cpuLimits: 2500m
              cpuRequests: 25m
              environment:
                CCD_DEFAULTPRINTURL: https://return-case-doc-ccd.nonprod.platform.hmcts.net/jurisdictions/:jid/case-types/:ctid/cases/:cid
                CCD_DM_DOMAIN: https?://dm-store.*
                CCD_DRAFT_STORE_URL: '{{ tpl .Values.global.draftStoreUrl $}}'
                CCD_DRAFT_TTL_DAYS: 180
                DATA_STORE_DB_HOST: '{{ .Release.Name }}-postgresql'
                DATA_STORE_DB_NAME: data-store
                DATA_STORE_DB_PASSWORD: '{{ tpl .Values.global.postgresPassword $}}'
                DATA_STORE_DB_PORT: 5432
                DATA_STORE_DB_USERNAME: '{{ tpl .Values.global.postgresUsername $}}'
                DATA_STORE_IDAM_KEY: AAAAAAAAAAAAAAAA
                DATA_STORE_S2S_AUTHORISED_SERVICES: ccd_data,ccd_gw,ccd_ps,probate_backend,divorce_ccd_submission,sscs,sscs_bulkscan,cmc,cmc_claim_store,cmc_claim_external_api,jui_webapp,pui_webapp,bulk_scan_orchestrator,fpl_case_service,iac,finrem_ccd_data_migrator,finrem_case_orchestration,employment_tribunals,ethos_repl_service
                DEFINITION_CACHE_EVICTION_POLICY: NONE
                DEFINITION_CACHE_LATEST_VERSION_TTL_SEC: 1
                DEFINITION_CACHE_MAX_IDLE_SEC: 259200
                DEFINITION_CACHE_MAX_SIZE: 5000
                DEFINITION_STORE_HOST: '{{ tpl .Values.global.ccdDefinitionStoreUrl
                  $}}'
                ELASTIC_SEARCH_BLACKLIST: query_string
                ELASTIC_SEARCH_CASE_INDEX_NAME_FORMAT: '%s_cases'
                ELASTIC_SEARCH_CASE_INDEX_TYPE: _doc
                ELASTIC_SEARCH_DATA_NODES_HOSTS: ""
                ELASTIC_SEARCH_ENABLED: false
                ELASTIC_SEARCH_HOSTS: ""
                ELASTIC_SEARCH_PASSWORD: ""
                ENABLE_DB_MIGRATE: true
                IDAM_S2S_URL: '{{ tpl .Values.global.s2sUrl $}}'
                IDAM_USER_URL: '{{ tpl .Values.global.idamApiUrl $}}'
                USER_PROFILE_HOST: '{{ tpl .Values.global.ccdUserProfileUrl $}}'
              global:
                ccdAdminWebIngress: ""
                ccdApiGatewayIngress: ""
                ccdCaseManagementWebIngress: ""
                ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                devMode: true
                dmStoreUrl: http://{{ .Release.Name }}-dm-store
                draftStoreUrl: http://{{ .Release.Name }}-draft-store
                emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                enableKeyVaults: false
                idamApiUrl: ""
                idamWebUrl: ""
                paymentsUrl: http://{{ .Release.Name }}-payment-api
                postgresPassword: hmcts
                postgresUsername: hmcts
                postgresqlHostName: '{{ .Release.Name }}-postgresql'
                postgresqlPassword: hmcts
                postgresqlUsername: hmcts
                s2sUrl: http://{{ .Release.Name }}-s2s
                subscriptionId: 1c4f0704-a29e-403d-b719-b9
              image: hmctspublic.azurecr.io/ccd/data-store-api:latest
              keyVaults:
                ccd:
                  resourceGroup: ccd-shared
                  secrets:
                  - ccd-data-store-api-draftStoreEncryptionSecret
                s2s:
                  resourceGroup: rpe-service-auth-provider
                  secrets:
                  - microservicekey-ccd-data
              livenessDelay: 240
              livenessFailureThreshold: 3
              livenessPath: /health/liveness
              livenessPeriod: 15
              livenessTimeout: 3
              memoryLimits: 1024Mi
              memoryRequests: 512Mi
              pdb:
                enabled: true
                maxUnavailable: 50%
              postgresql:
                enabled: false
                extraEnv:
                - name: POSTGRESQL_DATABASE
                  value: javadatabase
                global:
                  ccdAdminWebIngress: ""
                  ccdApiGatewayIngress: ""
                  ccdCaseManagementWebIngress: ""
                  ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                  ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                  ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                  devMode: true
                  dmStoreUrl: http://{{ .Release.Name }}-dm-store
                  draftStoreUrl: http://{{ .Release.Name }}-draft-store
                  emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                  enableKeyVaults: false
                  idamApiUrl: ""
                  idamWebUrl: ""
                  paymentsUrl: http://{{ .Release.Name }}-payment-api
                  postgresPassword: hmcts
                  postgresUsername: hmcts
                  postgresql: {}
                  postgresqlHostName: '{{ .Release.Name }}-postgresql'
                  postgresqlPassword: hmcts
                  postgresqlUsername: hmcts
                  s2sUrl: http://{{ .Release.Name }}-s2s
                  subscriptionId: 1c4f0704-a29e-403d-b719-b9
                image:
                  debug: false
                  pullPolicy: Always
                  registry: docker.io
                  repository: bitnami/postgresql
                  tag: 11.3.0
                livenessProbe:
                  enabled: true
                  failureThreshold: 6
                  initialDelaySeconds: 30
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                master:
                  affinity: {}
                  nodeSelector: {}
                  podAnnotations: {}
                  podLabels: {}
                  tolerations: []
                metrics:
                  enabled: false
                  image:
                    pullPolicy: IfNotPresent
                    registry: docker.io
                    repository: wrouesnel/postgres_exporter
                    tag: v0.4.7
                  livenessProbe:
                    enabled: true
                    failureThreshold: 6
                    initialDelaySeconds: 5
                    periodSeconds: 10
                    successThreshold: 1
                    timeoutSeconds: 5
                  readinessProbe:
                    enabled: true
                    failureThreshold: 6
                    initialDelaySeconds: 5
                    periodSeconds: 10
                    successThreshold: 1
                    timeoutSeconds: 5
                  securityContext:
                    enabled: false
                    runAsUser: 1001
                  service:
                    annotations:
                      prometheus.io/port: "9187"
                      prometheus.io/scrape: "true"
                    loadBalancerIP: null
                    type: ClusterIP
                networkPolicy:
                  allowExternal: true
                  enabled: false
                persistence:
                  accessModes:
                  - ReadWriteOnce
                  annotations: {}
                  enabled: false
                  mountPath: /bitnami/postgresql
                  size: 8Gi
                  subPath: ""
                postgresqlDataDir: /bitnami/postgresql/data
                postgresqlDatabase: javadatabase
                postgresqlPassword: javapassword
                postgresqlUsername: javapostgres
                readinessProbe:
                  enabled: true
                  failureThreshold: 6
                  initialDelaySeconds: 5
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                replication:
                  applicationName: my_application
                  enabled: false
                  numSynchronousReplicas: 0
                  password: repl_password
                  slaveReplicas: 1
                  synchronousCommit: "off"
                  user: repl_user
                resources:
                  requests:
                    cpu: 250m
                    memory: 256Mi
                securityContext:
                  enabled: true
                  fsGroup: 1001
                  runAsUser: 1001
                service:
                  annotations: {}
                  port: 5432
                  type: ClusterIP
                serviceAccount:
                  enabled: false
                slave:
                  affinity: {}
                  nodeSelector: {}
                  podAnnotations: {}
                  podLabels: {}
                  tolerations: []
                updateStrategy:
                  type: RollingUpdate
                volumePermissions:
                  enabled: true
                  image:
                    pullPolicy: Always
                    registry: docker.io
                    repository: bitnami/minideb
                    tag: latest
                  securityContext:
                    runAsUser: 0
              readinessDelay: 240
              readinessPath: /health
              readinessPeriod: 15
              readinessTimeout: 3
              registerAdditionalDns:
                enabled: false
              releaseNameOverride: '{{ .Release.Name }}-ccd-data-store-api'
              replicas: 1
              useInterpodAntiAffinity: false
          ccd-definition-importer:
            cpuLimits: 1500m
            cpuRequests: 250m
            definitionFilename: ""
            definitionStoreUrl: '{{ tpl .Values.global.ccdDefinitionStoreUrl $}}'
            definitions: ""
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              environment: null
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            idamApiUrl: '{{ tpl .Values.global.idamApiUrl $}}'
            idamClientId: ccd_gateway
            image: hmctspublic.azurecr.io/ccd/definition-importer:latest
            ingressHost: ""
            keyVaults:
              ccd:
                excludeEnvironmentSuffix: false
                secrets:
                - ccd-importer-autotest-email
                - ccd-importer-autotest-password
                - ccd-api-gateway-oauth2-client-secret
            memoryLimits: 2048Mi
            memoryRequests: 512Mi
            microservice: ccd_gw
            redirectUri: https://{{ tpl .Values.global.ccdCaseManagementWebIngress
              $}}/oauth2redirect
            releaseNameOverride: '{{ .Release.Name }}-definition-importer'
            s2sUrl: '{{ tpl .Values.global.s2sUrl $}}'
            secrets:
              CLIENT_SECRET:
                disabled: false
                key: idam-client-secret
                secretRef: importer-creds
              IMPORTER_PASSWORD:
                disabled: false
                key: password
                secretRef: importer-creds
              IMPORTER_USERNAME:
                disabled: false
                key: username
                secretRef: importer-creds
            userRoles:
            - caseworker-cmc
            verbose: true
            waitHosts: ""
            waitHostsTimeout: 300
          ccd-definition-store-api:
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            java:
              applicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
              applicationPort: 4451
              cpuLimits: 2500m
              cpuRequests: 25m
              environment:
                AZURE_STORAGE_BLOB_CONTAINER_REFERENCE: definition-store
                AZURE_STORAGE_CONNECTION_STRING: DefaultEndpointsProtocol=https;AccountName=$(STORAGE_ACCOUNT_NAME);AccountKey=$(STORAGE_ACCOUNT_KEY);EndpointSuffix=core.windows.net
                AZURE_STORAGE_DEFINITION_UPLOAD_ENABLED: true
                DEFINITION_STORE_DB_HOST: '{{ .Release.Name }}-postgresql'
                DEFINITION_STORE_DB_NAME: definition-store
                DEFINITION_STORE_DB_PASSWORD: '{{ tpl .Values.global.postgresPassword
                  $}}'
                DEFINITION_STORE_DB_PORT: 5432
                DEFINITION_STORE_DB_USERNAME: '{{ tpl .Values.global.postgresUsername
                  $}}'
                DEFINITION_STORE_S2S_AUTHORISED_SERVICES: ccd_data,ccd_gw,ccd_admin,jui_webapp,pui_webapp
                ELASTIC_SEARCH_CASE_INDEX_NAME_FORMAT: '%s_cases'
                ELASTIC_SEARCH_DYNAMIC: false
                ELASTIC_SEARCH_ENABLED: false
                ELASTIC_SEARCH_FAIL_ON_IMPORT: false
                ELASTIC_SEARCH_HOST: ""
                ELASTIC_SEARCH_INDEX_SHARDS: 2
                ELASTIC_SEARCH_INDEX_SHARDS_REPLICAS: 1
                ELASTIC_SEARCH_PORT: 9200
                ELASTIC_SEARCH_SCHEME: http
                ENABLE_DB_MIGRATE: true
                IDAM_S2S_URL: '{{ tpl .Values.global.s2sUrl $}}'
                IDAM_USER_URL: '{{ tpl .Values.global.idamApiUrl $}}'
                USER_PROFILE_HOST: '{{ tpl .Values.global.ccdUserProfileUrl $}}'
              global:
                ccdAdminWebIngress: ""
                ccdApiGatewayIngress: ""
                ccdCaseManagementWebIngress: ""
                ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                devMode: true
                dmStoreUrl: http://{{ .Release.Name }}-dm-store
                draftStoreUrl: http://{{ .Release.Name }}-draft-store
                emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                enableKeyVaults: false
                idamApiUrl: ""
                idamWebUrl: ""
                paymentsUrl: http://{{ .Release.Name }}-payment-api
                postgresPassword: hmcts
                postgresUsername: hmcts
                postgresqlHostName: '{{ .Release.Name }}-postgresql'
                postgresqlPassword: hmcts
                postgresqlUsername: hmcts
                s2sUrl: http://{{ .Release.Name }}-s2s
                subscriptionId: 1c4f0704-a29e-403d-b719-b9
              image: hmctspublic.azurecr.io/ccd/definition-store-api:latest
              keyVaults:
                s2s:
                  resourceGroup: rpe-service-auth-provider
                  secrets:
                  - microservicekey-ccd-definition
              livenessDelay: 180
              livenessFailureThreshold: 3
              livenessPath: /health/liveness
              livenessPeriod: 15
              livenessTimeout: 3
              memoryLimits: 1024Mi
              memoryRequests: 512Mi
              pdb:
                enabled: true
                maxUnavailable: 50%
              postgresql:
                enabled: false
                extraEnv:
                - name: POSTGRESQL_DATABASE
                  value: javadatabase
                global:
                  ccdAdminWebIngress: ""
                  ccdApiGatewayIngress: ""
                  ccdCaseManagementWebIngress: ""
                  ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                  ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                  ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                  devMode: true
                  dmStoreUrl: http://{{ .Release.Name }}-dm-store
                  draftStoreUrl: http://{{ .Release.Name }}-draft-store
                  emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                  enableKeyVaults: false
                  idamApiUrl: ""
                  idamWebUrl: ""
                  paymentsUrl: http://{{ .Release.Name }}-payment-api
                  postgresPassword: hmcts
                  postgresUsername: hmcts
                  postgresql: {}
                  postgresqlHostName: '{{ .Release.Name }}-postgresql'
                  postgresqlPassword: hmcts
                  postgresqlUsername: hmcts
                  s2sUrl: http://{{ .Release.Name }}-s2s
                  subscriptionId: 1c4f0704-a29e-403d-b719-b9
                image:
                  debug: false
                  pullPolicy: Always
                  registry: docker.io
                  repository: bitnami/postgresql
                  tag: 11.3.0
                livenessProbe:
                  enabled: true
                  failureThreshold: 6
                  initialDelaySeconds: 30
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                master:
                  affinity: {}
                  nodeSelector: {}
                  podAnnotations: {}
                  podLabels: {}
                  tolerations: []
                metrics:
                  enabled: false
                  image:
                    pullPolicy: IfNotPresent
                    registry: docker.io
                    repository: wrouesnel/postgres_exporter
                    tag: v0.4.7
                  livenessProbe:
                    enabled: true
                    failureThreshold: 6
                    initialDelaySeconds: 5
                    periodSeconds: 10
                    successThreshold: 1
                    timeoutSeconds: 5
                  readinessProbe:
                    enabled: true
                    failureThreshold: 6
                    initialDelaySeconds: 5
                    periodSeconds: 10
                    successThreshold: 1
                    timeoutSeconds: 5
                  securityContext:
                    enabled: false
                    runAsUser: 1001
                  service:
                    annotations:
                      prometheus.io/port: "9187"
                      prometheus.io/scrape: "true"
                    loadBalancerIP: null
                    type: ClusterIP
                networkPolicy:
                  allowExternal: true
                  enabled: false
                persistence:
                  accessModes:
                  - ReadWriteOnce
                  annotations: {}
                  enabled: false
                  mountPath: /bitnami/postgresql
                  size: 8Gi
                  subPath: ""
                postgresqlDataDir: /bitnami/postgresql/data
                postgresqlDatabase: javadatabase
                postgresqlPassword: javapassword
                postgresqlUsername: javapostgres
                readinessProbe:
                  enabled: true
                  failureThreshold: 6
                  initialDelaySeconds: 5
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                replication:
                  applicationName: my_application
                  enabled: false
                  numSynchronousReplicas: 0
                  password: repl_password
                  slaveReplicas: 1
                  synchronousCommit: "off"
                  user: repl_user
                resources:
                  requests:
                    cpu: 250m
                    memory: 256Mi
                securityContext:
                  enabled: true
                  fsGroup: 1001
                  runAsUser: 1001
                service:
                  annotations: {}
                  port: 5432
                  type: ClusterIP
                serviceAccount:
                  enabled: false
                slave:
                  affinity: {}
                  nodeSelector: {}
                  podAnnotations: {}
                  podLabels: {}
                  tolerations: []
                updateStrategy:
                  type: RollingUpdate
                volumePermissions:
                  enabled: true
                  image:
                    pullPolicy: Always
                    registry: docker.io
                    repository: bitnami/minideb
                    tag: latest
                  securityContext:
                    runAsUser: 0
              readinessDelay: 180
              readinessPath: /health
              readinessPeriod: 15
              readinessTimeout: 3
              registerAdditionalDns:
                enabled: false
              releaseNameOverride: '{{ .Release.Name }}-ccd-definition-store'
              replicas: 1
              secrets:
                STORAGE_ACCOUNT_KEY:
                  key: accessKey
                  secretRef: storage-secret-{{ .Release.Name }}-blobstorage
                STORAGE_ACCOUNT_NAME:
                  key: storageAccountName
                  secretRef: storage-secret-{{ .Release.Name }}-blobstorage
              useInterpodAntiAffinity: false
          ccd-test-stubs-service:
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            java:
              applicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
              applicationPort: 5555
              cpuLimits: 2500m
              cpuRequests: 25m
              environment:
                WIREMOCK_SERVER_MAPPINGS_PATH: wiremock
              global:
                ccdAdminWebIngress: ""
                ccdApiGatewayIngress: ""
                ccdCaseManagementWebIngress: ""
                ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                devMode: true
                dmStoreUrl: http://{{ .Release.Name }}-dm-store
                draftStoreUrl: http://{{ .Release.Name }}-draft-store
                emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                enableKeyVaults: false
                idamApiUrl: ""
                idamWebUrl: ""
                paymentsUrl: http://{{ .Release.Name }}-payment-api
                postgresPassword: hmcts
                postgresUsername: hmcts
                postgresqlHostName: '{{ .Release.Name }}-postgresql'
                postgresqlPassword: hmcts
                postgresqlUsername: hmcts
                s2sUrl: http://{{ .Release.Name }}-s2s
                subscriptionId: 1c4f0704-a29e-403d-b719-b9
              image: hmctspublic.azurecr.io/ccd/test-stubs-service:latest
              livenessDelay: 30
              livenessFailureThreshold: 3
              livenessPath: /health
              livenessPeriod: 15
              livenessTimeout: 3
              memoryLimits: 1024Mi
              memoryRequests: 512Mi
              pdb:
                enabled: true
                maxUnavailable: 50%
              postgresql:
                enabled: false
                extraEnv:
                - name: POSTGRESQL_DATABASE
                  value: javadatabase
                global:
                  ccdAdminWebIngress: ""
                  ccdApiGatewayIngress: ""
                  ccdCaseManagementWebIngress: ""
                  ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                  ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                  ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                  devMode: true
                  dmStoreUrl: http://{{ .Release.Name }}-dm-store
                  draftStoreUrl: http://{{ .Release.Name }}-draft-store
                  emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                  enableKeyVaults: false
                  idamApiUrl: ""
                  idamWebUrl: ""
                  paymentsUrl: http://{{ .Release.Name }}-payment-api
                  postgresPassword: hmcts
                  postgresUsername: hmcts
                  postgresql: {}
                  postgresqlHostName: '{{ .Release.Name }}-postgresql'
                  postgresqlPassword: hmcts
                  postgresqlUsername: hmcts
                  s2sUrl: http://{{ .Release.Name }}-s2s
                  subscriptionId: 1c4f0704-a29e-403d-b719-b9
                image:
                  debug: false
                  pullPolicy: Always
                  registry: docker.io
                  repository: bitnami/postgresql
                  tag: 11.3.0
                livenessProbe:
                  enabled: true
                  failureThreshold: 6
                  initialDelaySeconds: 30
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                master:
                  affinity: {}
                  nodeSelector: {}
                  podAnnotations: {}
                  podLabels: {}
                  tolerations: []
                metrics:
                  enabled: false
                  image:
                    pullPolicy: IfNotPresent
                    registry: docker.io
                    repository: wrouesnel/postgres_exporter
                    tag: v0.4.7
                  livenessProbe:
                    enabled: true
                    failureThreshold: 6
                    initialDelaySeconds: 5
                    periodSeconds: 10
                    successThreshold: 1
                    timeoutSeconds: 5
                  readinessProbe:
                    enabled: true
                    failureThreshold: 6
                    initialDelaySeconds: 5
                    periodSeconds: 10
                    successThreshold: 1
                    timeoutSeconds: 5
                  securityContext:
                    enabled: false
                    runAsUser: 1001
                  service:
                    annotations:
                      prometheus.io/port: "9187"
                      prometheus.io/scrape: "true"
                    loadBalancerIP: null
                    type: ClusterIP
                networkPolicy:
                  allowExternal: true
                  enabled: false
                persistence:
                  accessModes:
                  - ReadWriteOnce
                  annotations: {}
                  enabled: false
                  mountPath: /bitnami/postgresql
                  size: 8Gi
                  subPath: ""
                postgresqlDataDir: /bitnami/postgresql/data
                postgresqlDatabase: javadatabase
                postgresqlPassword: javapassword
                postgresqlUsername: javapostgres
                readinessProbe:
                  enabled: true
                  failureThreshold: 6
                  initialDelaySeconds: 5
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                replication:
                  applicationName: my_application
                  enabled: false
                  numSynchronousReplicas: 0
                  password: repl_password
                  slaveReplicas: 1
                  synchronousCommit: "off"
                  user: repl_user
                resources:
                  requests:
                    cpu: 250m
                    memory: 256Mi
                securityContext:
                  enabled: true
                  fsGroup: 1001
                  runAsUser: 1001
                service:
                  annotations: {}
                  port: 5432
                  type: ClusterIP
                serviceAccount:
                  enabled: false
                slave:
                  affinity: {}
                  nodeSelector: {}
                  podAnnotations: {}
                  podLabels: {}
                  tolerations: []
                updateStrategy:
                  type: RollingUpdate
                volumePermissions:
                  enabled: true
                  image:
                    pullPolicy: Always
                    registry: docker.io
                    repository: bitnami/minideb
                    tag: latest
                  securityContext:
                    runAsUser: 0
              readinessDelay: 30
              readinessPath: /health
              readinessPeriod: 15
              readinessTimeout: 3
              registerAdditionalDns:
                enabled: false
              releaseNameOverride: '{{ .Release.Name }}-ccd-test-stubs-service'
              replicas: 1
              useInterpodAntiAffinity: false
          ccd-user-profile-api:
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            java:
              applicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
              applicationPort: 4453
              cpuLimits: 2500m
              cpuRequests: 25m
              environment:
                IDAM_S2S_URL: '{{ tpl .Values.global.s2sUrl $}}'
                LOGBACK_REQUIRE_ALERT_LEVEL: "false"
                LOGBACK_REQUIRE_ERROR_CODE: "false"
                USER_PROFILE_DB_HOST: '{{ .Release.Name }}-postgresql'
                USER_PROFILE_DB_NAME: user-profile
                USER_PROFILE_DB_PASSWORD: '{{ tpl .Values.global.postgresPassword
                  $}}'
                USER_PROFILE_DB_PORT: 5432
                USER_PROFILE_DB_USERNAME: '{{ tpl .Values.global.postgresUsername
                  $}}'
                USER_PROFILE_S2S_AUTHORISED_SERVICES: ccd_data,ccd_definition,ccd_admin
              global:
                ccdAdminWebIngress: ""
                ccdApiGatewayIngress: ""
                ccdCaseManagementWebIngress: ""
                ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                devMode: true
                dmStoreUrl: http://{{ .Release.Name }}-dm-store
                draftStoreUrl: http://{{ .Release.Name }}-draft-store
                emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                enableKeyVaults: false
                idamApiUrl: ""
                idamWebUrl: ""
                paymentsUrl: http://{{ .Release.Name }}-payment-api
                postgresPassword: hmcts
                postgresUsername: hmcts
                postgresqlHostName: '{{ .Release.Name }}-postgresql'
                postgresqlPassword: hmcts
                postgresqlUsername: hmcts
                s2sUrl: http://{{ .Release.Name }}-s2s
                subscriptionId: 1c4f0704-a29e-403d-b719-b9
              image: hmctspublic.azurecr.io/ccd/user-profile-api:latest
              livenessDelay: 120
              livenessFailureThreshold: 3
              livenessPath: /health/liveness
              livenessPeriod: 15
              livenessTimeout: 3
              memoryLimits: 1024Mi
              memoryRequests: 512Mi
              pdb:
                enabled: true
                maxUnavailable: 50%
              postgresql:
                enabled: false
                extraEnv:
                - name: POSTGRESQL_DATABASE
                  value: javadatabase
                global:
                  ccdAdminWebIngress: ""
                  ccdApiGatewayIngress: ""
                  ccdCaseManagementWebIngress: ""
                  ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                  ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                  ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                  devMode: true
                  dmStoreUrl: http://{{ .Release.Name }}-dm-store
                  draftStoreUrl: http://{{ .Release.Name }}-draft-store
                  emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                  enableKeyVaults: false
                  idamApiUrl: ""
                  idamWebUrl: ""
                  paymentsUrl: http://{{ .Release.Name }}-payment-api
                  postgresPassword: hmcts
                  postgresUsername: hmcts
                  postgresql: {}
                  postgresqlHostName: '{{ .Release.Name }}-postgresql'
                  postgresqlPassword: hmcts
                  postgresqlUsername: hmcts
                  s2sUrl: http://{{ .Release.Name }}-s2s
                  subscriptionId: 1c4f0704-a29e-403d-b719-b9
                image:
                  debug: false
                  pullPolicy: Always
                  registry: docker.io
                  repository: bitnami/postgresql
                  tag: 11.3.0
                livenessProbe:
                  enabled: true
                  failureThreshold: 6
                  initialDelaySeconds: 30
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                master:
                  affinity: {}
                  nodeSelector: {}
                  podAnnotations: {}
                  podLabels: {}
                  tolerations: []
                metrics:
                  enabled: false
                  image:
                    pullPolicy: IfNotPresent
                    registry: docker.io
                    repository: wrouesnel/postgres_exporter
                    tag: v0.4.7
                  livenessProbe:
                    enabled: true
                    failureThreshold: 6
                    initialDelaySeconds: 5
                    periodSeconds: 10
                    successThreshold: 1
                    timeoutSeconds: 5
                  readinessProbe:
                    enabled: true
                    failureThreshold: 6
                    initialDelaySeconds: 5
                    periodSeconds: 10
                    successThreshold: 1
                    timeoutSeconds: 5
                  securityContext:
                    enabled: false
                    runAsUser: 1001
                  service:
                    annotations:
                      prometheus.io/port: "9187"
                      prometheus.io/scrape: "true"
                    loadBalancerIP: null
                    type: ClusterIP
                networkPolicy:
                  allowExternal: true
                  enabled: false
                persistence:
                  accessModes:
                  - ReadWriteOnce
                  annotations: {}
                  enabled: false
                  mountPath: /bitnami/postgresql
                  size: 8Gi
                  subPath: ""
                postgresqlDataDir: /bitnami/postgresql/data
                postgresqlDatabase: javadatabase
                postgresqlPassword: javapassword
                postgresqlUsername: javapostgres
                readinessProbe:
                  enabled: true
                  failureThreshold: 6
                  initialDelaySeconds: 5
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                replication:
                  applicationName: my_application
                  enabled: false
                  numSynchronousReplicas: 0
                  password: repl_password
                  slaveReplicas: 1
                  synchronousCommit: "off"
                  user: repl_user
                resources:
                  requests:
                    cpu: 250m
                    memory: 256Mi
                securityContext:
                  enabled: true
                  fsGroup: 1001
                  runAsUser: 1001
                service:
                  annotations: {}
                  port: 5432
                  type: ClusterIP
                serviceAccount:
                  enabled: false
                slave:
                  affinity: {}
                  nodeSelector: {}
                  podAnnotations: {}
                  podLabels: {}
                  tolerations: []
                updateStrategy:
                  type: RollingUpdate
                volumePermissions:
                  enabled: true
                  image:
                    pullPolicy: Always
                    registry: docker.io
                    repository: bitnami/minideb
                    tag: latest
                  securityContext:
                    runAsUser: 0
              readinessDelay: 120
              readinessPath: /health
              readinessPeriod: 15
              readinessTimeout: 3
              registerAdditionalDns:
                enabled: false
              releaseNameOverride: '{{ .Release.Name }}-ccd-user-profile-api'
              replicas: 1
              useInterpodAntiAffinity: false
          ccd-user-profile-importer:
            cpuLimits: 1500m
            cpuRequests: 250m
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              environment: null
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            image: hmctspublic.azurecr.io/ccd/user-profile-importer:latest
            memoryLimits: 2048Mi
            memoryRequests: 512Mi
            microservice: ccd_definition
            releaseNameOverride: '{{ tpl .Release.Name $}}-user-profile-importer'
            s2sUrl: '{{ tpl .Values.global.s2sUrl $}}'
            userProfileUrl: '{{ tpl .Values.global.ccdUserProfileUrl $}}'
            waitHosts: ""
            waitHostsTimeout: 300
          dm-store:
            blobstorage:
              global:
                ccdAdminWebIngress: ""
                ccdApiGatewayIngress: ""
                ccdCaseManagementWebIngress: ""
                ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                devMode: true
                dmStoreUrl: http://{{ .Release.Name }}-dm-store
                draftStoreUrl: http://{{ .Release.Name }}-draft-store
                emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                idamApiUrl: ""
                idamWebUrl: ""
                paymentsUrl: http://{{ .Release.Name }}-payment-api
                postgresPassword: hmcts
                postgresUsername: hmcts
                postgresqlHostName: '{{ .Release.Name }}-postgresql'
                postgresqlPassword: hmcts
                postgresqlUsername: hmcts
                s2sUrl: http://{{ .Release.Name }}-s2s
                subscriptionId: 1c4f0704-a29e-403d-b719-b9
              location: uksouth
              resourceGroup: dm-store-aks
              setup:
                containers:
                - dm-docstore
              teamName: CCD
            dm-store:
              blobstorage:
                enabled: false
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            java:
              aadIdentityName: dm-store
              applicationPort: "4603"
              cpuLimits: 1500m
              cpuRequests: 250m
              devApplicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
              devcpuLimits: 2500m
              devcpuRequests: 250m
              devmemoryLimits: 1024Mi
              devmemoryRequests: 512Mi
              environment:
                BLOBSTORE_MIGRATE_CCD_PUBLIC_KEY: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDiQ//gc/G53d9dLCtf123fIYo49gUySuJuxOcw2GtieWTMSy+O7RNtsAIjVf3mCOdDNuN69tZNPEWMdaW8n11s9MwYFahtxDecyn0KIP9MvPsfSMSbxhp/f7kfbdB/H/S5eYea66JTyeJS6uNd76RdHttx0mLO30ZkRcXB25c2SIXhRYsdoeKS5GXHDdNejkQM0S/Ev94x2UunApmYHjWN1XcDhsEsAeF4WHnvYh2XiMn9vHY44AqvbWLlAmCgzaXpz8Xhl0fO7jDKSeReDyuM3UTMaiFFaxuvliGol7aIXq/aVe/miiD2SLxHZ6RxAPW80bhXrzJMTLTCqhCEhzfv
                  someone@somewhere.sometime
                BLOBSTORE_MIGRATE_CCD_PUBLIC_KEY_REQUIRED: "false"
                BLOBSTORE_MIGRATE_CCD_SECRET: y2hahvdZ9evcTVq2
                CASE_WORKER_ROLES: caseworker-probate,caseworker-cmc,caseworker-sscs,caseworker-divorce
                DM_MULTIPART_WHITELIST: image/jpeg,application/pdf,image/tiff,image/png,image/bmp,text/plain,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/vnd.openxmlformats-officedocument.wordprocessingml.template,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/vnd.openxmlformats-officedocument.spreadsheetml.template,application/vnd.ms-powerpoint,application/vnd.openxmlformats-officedocument.presentationml.presentation,application/vnd.openxmlformats-officedocument.presentationml.template,application/vnd.openxmlformats-officedocument.presentationml.slideshow,application/rtf,text/csv
                DM_MULTIPART_WHITELIST_EXT: .jpg,.jpeg,.bmp,.tif,.tiff,.png,.pdf,.txt,.doc,.dot,.docx,.dotx,.xls,.xlt,.xla,.xlsx,.xltx,.xlsb,.ppt,.pot,.pps,.ppa,.pptx,.potx,.ppsx,.png,.pdf,.rtf,.csv
                ENABLE_AZURE_STORAGE_CONTAINER: "true"
                ENABLE_DB_MIGRATE: "true"
                ENABLE_DELETE: "true"
                ENABLE_DOCUMENT_AND_METADATA_UPLOAD: "false"
                ENABLE_FOLDER_API: "true"
                ENABLE_IDAM_HEALTH_CHECK: "false"
                ENABLE_METADATA_SEARCH: "true"
                ENABLE_THUMBNAIL: "true"
                ENABLE_TTL: "false"
                IDAM_S2S_BASE_URI: '{{ tpl .Values.global.s2sUrl $}}'
                IDAM_USER_BASE_URI: '{{ tpl .Values.global.idamApiUrl $}}'
                JSON_CONSOLE_PRETTY_PRINT: "false"
                LOG_LEVEL_DM: INFO
                LOG_LEVEL_SPRING_WEB: INFO
                LOG_OUTPUT: single
                MAX_ACTIVE_DB_CONNECTIONS: "50"
                MAX_FILE_SIZE: 100MB
                PACKAGES_NAME: dm-store
                PACKAGES_PROJECT: evidence
                POSTGRES_STORAGE_ENABLED: "false"
                REFORM_SERVICE_NAME: dm-store
                REFORM_SERVICE_TYPE: java
                REFORM_TEAM: evidence
                ROOT_LOGGING_LEVEL: INFO
                S2S_NAMES_WHITELIST: em_api,em_gw,ccd_gw,ccd_data,sscs,sscs_bulkscan,divorce_document_upload,divorce_frontend,divorce_document_generator,probate_backend,jui_webapp,pui_webapp,cmc_claim_store,bulk_scan_processor,em_npa_app,bulk_scan_orchestrator,fpl_case_service,finrem_document_generator,iac,em_stitching_api,dg_docassembly_api,ethos_repl_service
                SHOW_SQL: "false"
                SPRING_DATASOURCE_PASSWORD: '{{ tpl .Values.global.postgresPassword
                  $}}'
                SPRING_DATASOURCE_URL: jdbc:postgresql://{{ .Release.Name }}-postgresql:5432/evidence?ssl=disable
                SPRING_DATASOURCE_USERNAME: '{{ tpl .Values.global.postgresUsername
                  $}}'
                STORAGE_CONTAINER_DOCUMENT_CONTAINER_NAME: dm-store
                STORAGEACCOUNT_PRIMARY_CONNECTION_STRING: DefaultEndpointsProtocol=https;AccountName=$(STORAGE_ACCOUNT_NAME);AccountKey=$(STORAGE_ACCOUNT_KEY);EndpointSuffix=core.windows.net
              functionaltests:
                enabled: false
                image: hmctspublic.azurecr.io/spring-boot/template
              functionaltestscron:
                enabled: false
                image: hmctspublic.azurecr.io/spring-boot/template
                schedule: 30 0/6 * * *
              global:
                ccdAdminWebIngress: ""
                ccdApiGatewayIngress: ""
                ccdCaseManagementWebIngress: ""
                ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                devMode: true
                dmStoreUrl: http://{{ .Release.Name }}-dm-store
                draftStoreUrl: http://{{ .Release.Name }}-draft-store
                emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                enableKeyVaults: false
                functionaltestscron:
                  enabled: true
                idamApiUrl: ""
                idamWebUrl: ""
                paymentsUrl: http://{{ .Release.Name }}-payment-api
                postgresPassword: hmcts
                postgresUsername: hmcts
                postgresqlHostName: '{{ .Release.Name }}-postgresql'
                postgresqlPassword: hmcts
                postgresqlUsername: hmcts
                s2sUrl: http://{{ .Release.Name }}-s2s
                smoketestscron:
                  enabled: true
                subscriptionId: 1c4f0704-a29e-403d-b719-b9
              image: hmctspublic.azurecr.io/dm/store:latest
              ingressClass: traefik
              keyVaults:
                dm:
                  resourceGroup: dm-shared
                  secrets:
                  - AppInsightsInstrumentationKey
                  - dm-store-storage-account-primary-connection-string
                  - dm-store-storage-account-secondary-connection-string
                  - POSTGRES-PASS
              livenessDelay: 180
              livenessFailureThreshold: 3
              livenessPath: /health
              livenessPeriod: 15
              livenessTimeout: 3
              memoryLimits: 2048Mi
              memoryRequests: 512Mi
              pdb:
                enabled: true
                maxUnavailable: 50%
              postgresql:
                enabled: false
                extraEnv: {}
                global:
                  ccdAdminWebIngress: ""
                  ccdApiGatewayIngress: ""
                  ccdCaseManagementWebIngress: ""
                  ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                  ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                  ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                  devMode: true
                  dmStoreUrl: http://{{ .Release.Name }}-dm-store
                  draftStoreUrl: http://{{ .Release.Name }}-draft-store
                  emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                  enableKeyVaults: false
                  functionaltestscron:
                    enabled: true
                  idamApiUrl: ""
                  idamWebUrl: ""
                  paymentsUrl: http://{{ .Release.Name }}-payment-api
                  postgresPassword: hmcts
                  postgresUsername: hmcts
                  postgresql: {}
                  postgresqlHostName: '{{ .Release.Name }}-postgresql'
                  postgresqlPassword: hmcts
                  postgresqlUsername: hmcts
                  s2sUrl: http://{{ .Release.Name }}-s2s
                  smoketestscron:
                    enabled: true
                  subscriptionId: 1c4f0704-a29e-403d-b719-b9
                image:
                  debug: false
                  pullPolicy: IfNotPresent
                  registry: docker.io
                  repository: bitnami/postgresql
                  tag: 11.5.0-debian-9-r60
                livenessProbe:
                  enabled: true
                  failureThreshold: 6
                  initialDelaySeconds: 30
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                master:
                  affinity: {}
                  extraVolumeMounts: []
                  extraVolumes: []
                  nodeSelector: {}
                  podAnnotations: {}
                  podLabels: {}
                  tolerations: []
                metrics:
                  enabled: false
                  image:
                    pullPolicy: IfNotPresent
                    registry: docker.io
                    repository: bitnami/postgres-exporter
                    tag: 0.5.1-debian-9-r73
                  livenessProbe:
                    enabled: true
                    failureThreshold: 6
                    initialDelaySeconds: 5
                    periodSeconds: 10
                    successThreshold: 1
                    timeoutSeconds: 5
                  readinessProbe:
                    enabled: true
                    failureThreshold: 6
                    initialDelaySeconds: 5
                    periodSeconds: 10
                    successThreshold: 1
                    timeoutSeconds: 5
                  securityContext:
                    enabled: false
                    runAsUser: 1001
                  service:
                    annotations:
                      prometheus.io/port: "9187"
                      prometheus.io/scrape: "true"
                    loadBalancerIP: null
                    type: ClusterIP
                  serviceMonitor:
                    additionalLabels: {}
                    enabled: false
                nameOverride: dm-store-db
                networkPolicy:
                  allowExternal: true
                  enabled: false
                persistence:
                  accessModes:
                  - ReadWriteOnce
                  annotations: {}
                  enabled: false
                  mountPath: /bitnami/postgresql
                  size: 8Gi
                  subPath: ""
                postgresqlDataDir: /bitnami/postgresql/data
                postgresqlDatabase: javadatabase
                postgresqlPassword: evidence
                postgresqlUsername: evidence
                readinessProbe:
                  enabled: true
                  failureThreshold: 6
                  initialDelaySeconds: 5
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                replication:
                  applicationName: my_application
                  enabled: false
                  numSynchronousReplicas: 0
                  password: repl_password
                  slaveReplicas: 1
                  synchronousCommit: "off"
                  user: repl_user
                resources:
                  requests:
                    cpu: 250m
                    memory: 256Mi
                securityContext:
                  enabled: true
                  fsGroup: 1001
                  runAsUser: 1001
                service:
                  annotations: {}
                  port: 5432
                  type: ClusterIP
                serviceAccount:
                  enabled: false
                slave:
                  affinity: {}
                  extraVolumeMounts: []
                  extraVolumes: []
                  nodeSelector: {}
                  podAnnotations: {}
                  podLabels: {}
                  tolerations: []
                updateStrategy:
                  type: RollingUpdate
                volumePermissions:
                  enabled: true
                  image:
                    pullPolicy: Always
                    registry: docker.io
                    repository: bitnami/minideb
                    tag: stretch
                  securityContext:
                    runAsUser: 0
              prometheus:
                enabled: false
                path: /prometheus
              readinessDelay: 180
              readinessPath: /health
              readinessPeriod: 15
              readinessTimeout: 3
              registerAdditionalDns:
                enabled: false
              releaseNameOverride: '{{ .Release.Name }}-dm-store'
              replicas: 1
              secrets:
                STORAGE_ACCOUNT_KEY:
                  key: accessKey
                  secretRef: storage-secret-{{ .Release.Name }}-blobstorage
                STORAGE_ACCOUNT_NAME:
                  key: storageAccountName
                  secretRef: storage-secret-{{ .Release.Name }}-blobstorage
              smoketests:
                enabled: false
                image: hmctspublic.azurecr.io/spring-boot/template
              smoketestscron:
                enabled: false
                image: hmctspublic.azurecr.io/spring-boot/template
                schedule: 20 0/1 * * *
              testsConfig:
                cpuLimits: 1000m
                cpuRequests: 100m
                memoryLimits: 1024Mi
                memoryRequests: 256Mi
              useInterpodAntiAffinity: false
          draft-store-service:
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            java:
              applicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
              applicationPort: 8800
              cpuLimits: 1500m
              cpuRequests: 250m
              devcpuLimits: 2500m
              devcpuRequests: 25m
              devmemoryLimits: 1024Mi
              devmemoryRequests: 512Mi
              environment:
                DRAFT_STORE_DB_CONN_OPTIONS: ""
                DRAFT_STORE_DB_HOST: '{{ .Release.Name }}-postgresql'
                DRAFT_STORE_DB_NAME: draftstore
                DRAFT_STORE_DB_PASSWORD: '{{ tpl .Values.global.postgresPassword $}}'
                DRAFT_STORE_DB_PORT: "5432"
                DRAFT_STORE_DB_USER_NAME: '{{ tpl .Values.global.postgresUsername
                  $}}'
                IDAM_URL: '{{ tpl .Values.global.idamApiUrl $}}'
                LOGBACK_REQUIRE_ALERT_LEVEL: "false"
                LOGBACK_REQUIRE_ERROR_CODE: "false"
                RUN_DB_MIGRATION_ON_STARTUP: "true"
                S2S_URL: '{{ tpl .Values.global.s2sUrl $}}'
                SPRING_CLOUD_PROPERTIESVOLUME_ENABLED: false
              global:
                ccdAdminWebIngress: ""
                ccdApiGatewayIngress: ""
                ccdCaseManagementWebIngress: ""
                ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                devMode: true
                dmStoreUrl: http://{{ .Release.Name }}-dm-store
                draftStoreUrl: http://{{ .Release.Name }}-draft-store
                emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                enableKeyVaults: false
                idamApiUrl: ""
                idamWebUrl: ""
                paymentsUrl: http://{{ .Release.Name }}-payment-api
                postgresPassword: hmcts
                postgresUsername: hmcts
                postgresqlHostName: '{{ .Release.Name }}-postgresql'
                postgresqlPassword: hmcts
                postgresqlUsername: hmcts
                s2sUrl: http://{{ .Release.Name }}-s2s
                subscriptionId: 1c4f0704-a29e-403d-b719-b9
              image: hmctspublic.azurecr.io/draft-store/service:latest
              ingressHost: ""
              keyVaults: null
              livenessDelay: 240
              livenessFailureThreshold: 3
              livenessPath: /health/liveness
              livenessPeriod: 15
              livenessTimeout: 3
              memoryLimits: 2048Mi
              memoryRequests: 512Mi
              pdb:
                enabled: true
                maxUnavailable: 50%
              postgresql:
                enabled: false
                extraEnv: {}
                global:
                  ccdAdminWebIngress: ""
                  ccdApiGatewayIngress: ""
                  ccdCaseManagementWebIngress: ""
                  ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                  ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                  ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                  devMode: true
                  dmStoreUrl: http://{{ .Release.Name }}-dm-store
                  draftStoreUrl: http://{{ .Release.Name }}-draft-store
                  emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                  enableKeyVaults: false
                  idamApiUrl: ""
                  idamWebUrl: ""
                  paymentsUrl: http://{{ .Release.Name }}-payment-api
                  postgresPassword: hmcts
                  postgresUsername: hmcts
                  postgresql: {}
                  postgresqlHostName: '{{ .Release.Name }}-postgresql'
                  postgresqlPassword: hmcts
                  postgresqlUsername: hmcts
                  s2sUrl: http://{{ .Release.Name }}-s2s
                  subscriptionId: 1c4f0704-a29e-403d-b719-b9
                image:
                  debug: false
                  pullPolicy: IfNotPresent
                  registry: docker.io
                  repository: bitnami/postgresql
                  tag: 11.5.0-debian-9-r34
                livenessProbe:
                  enabled: true
                  failureThreshold: 6
                  initialDelaySeconds: 30
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                master:
                  affinity: {}
                  extraVolumeMounts: []
                  extraVolumes: []
                  nodeSelector: {}
                  podAnnotations: {}
                  podLabels: {}
                  tolerations: []
                metrics:
                  enabled: false
                  image:
                    pullPolicy: IfNotPresent
                    registry: docker.io
                    repository: bitnami/postgres-exporter
                    tag: 0.5.1-debian-9-r48
                  livenessProbe:
                    enabled: true
                    failureThreshold: 6
                    initialDelaySeconds: 5
                    periodSeconds: 10
                    successThreshold: 1
                    timeoutSeconds: 5
                  readinessProbe:
                    enabled: true
                    failureThreshold: 6
                    initialDelaySeconds: 5
                    periodSeconds: 10
                    successThreshold: 1
                    timeoutSeconds: 5
                  securityContext:
                    enabled: false
                    runAsUser: 1001
                  service:
                    annotations:
                      prometheus.io/port: "9187"
                      prometheus.io/scrape: "true"
                    loadBalancerIP: null
                    type: ClusterIP
                  serviceMonitor:
                    additionalLabels: {}
                    enabled: false
                networkPolicy:
                  allowExternal: true
                  enabled: false
                persistence:
                  accessModes:
                  - ReadWriteOnce
                  annotations: {}
                  enabled: false
                  mountPath: /bitnami/postgresql
                  size: 8Gi
                  subPath: ""
                postgresqlDataDir: /bitnami/postgresql/data
                postgresqlDatabase: javadatabase
                postgresqlPassword: javapassword
                postgresqlUsername: javapostgres
                readinessProbe:
                  enabled: true
                  failureThreshold: 6
                  initialDelaySeconds: 5
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                replication:
                  applicationName: my_application
                  enabled: false
                  numSynchronousReplicas: 0
                  password: repl_password
                  slaveReplicas: 1
                  synchronousCommit: "off"
                  user: repl_user
                resources:
                  requests:
                    cpu: 250m
                    memory: 256Mi
                securityContext:
                  enabled: true
                  fsGroup: 1001
                  runAsUser: 1001
                service:
                  annotations: {}
                  port: 5432
                  type: ClusterIP
                serviceAccount:
                  enabled: false
                slave:
                  affinity: {}
                  extraVolumeMounts: []
                  extraVolumes: []
                  nodeSelector: {}
                  podAnnotations: {}
                  podLabels: {}
                  tolerations: []
                updateStrategy:
                  type: RollingUpdate
                volumePermissions:
                  enabled: true
                  image:
                    pullPolicy: Always
                    registry: docker.io
                    repository: bitnami/minideb
                    tag: stretch
                  securityContext:
                    runAsUser: 0
              prometheus:
                enabled: false
                path: /prometheus
              readinessDelay: 240
              readinessPath: /health
              readinessPeriod: 15
              readinessTimeout: 3
              registerAdditionalDns:
                enabled: false
              releaseNameOverride: '{{ .Release.Name }}-draft-store'
              replicas: 1
              useInterpodAntiAffinity: false
          em-anno:
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            java:
              aadIdentityName: em
              applicationPort: 8080
              cpuLimits: 1500m
              cpuRequests: 250m
              devApplicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
              devcpuLimits: 2500m
              devcpuRequests: 25m
              devmemoryLimits: 1024Mi
              devmemoryRequests: 512Mi
              environment:
                DM_STORE_APP_URL: '{{ tpl .Values.global.dmStoreUrl $}}'
                ENABLE_IDAM_HEALTH_CHECK: false
                ENABLE_LIQUIBASE: "true"
                ENABLE_S2S_HEALTH_CHECK: false
                ENDPOINTS_HEALTH_SENSITIVE: false
                ENDPOINTS_INFO_SENSITIVE: false
                IDAM_API_BASE_URI: '{{ tpl .Values.global.idamApiUrl $}}'
                IDAM_S2S_AUTH_URL: http://rpe-service-auth-provider-{{ .Values.global.environment
                  }}.service.core-compute-{{ .Values.global.environment }}.internal
                JSON_CONSOLE_PRETTY_PRINT: false
                LOG_LEVEL_DM: INFO
                LOG_LEVEL_SPRING_WEB: INFO
                LOG_OUTPUT: single
                REFORM_SERVICE_NAME: rpa-em-annotation-api
                REFORM_TEAM: rpa-em-annotation-api
                ROOT_LOGGING_LEVEL: INFO
                RUN_DB_MIGRATION_ON_STARTUP: false
                S2S_BASE_URI: '{{ tpl .Values.global.s2sUrl $}}'
                SERVER_PORT: 8080
                SHOW_SQL: false
                SPRING_DATASOURCE_PASSWORD: '{{ tpl .Values.global.postgresPassword
                  $}}'
                SPRING_DATASOURCE_URL: jdbc:postgresql://{{ .Release.Name }}-postgresql:5432/annotation?ssl=disable
                SPRING_DATASOURCE_USERNAME: '{{ tpl .Values.global.postgresUsername
                  $}}'
              functionaltests:
                backoffLimit: 2
                enabled: false
                kind: Job
              functionaltestscron:
                backoffLimit: 2
                enabled: false
                kind: CronJob
              global:
                ccdAdminWebIngress: ""
                ccdApiGatewayIngress: ""
                ccdCaseManagementWebIngress: ""
                ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                devMode: true
                dmStoreUrl: http://{{ .Release.Name }}-dm-store
                draftStoreUrl: http://{{ .Release.Name }}-draft-store
                emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                enableKeyVaults: false
                idamApiUrl: ""
                idamWebUrl: ""
                paymentsUrl: http://{{ .Release.Name }}-payment-api
                postgresPassword: hmcts
                postgresUsername: hmcts
                postgresqlHostName: '{{ .Release.Name }}-postgresql'
                postgresqlPassword: hmcts
                postgresqlUsername: hmcts
                s2sUrl: http://{{ .Release.Name }}-s2s
                subscriptionId: 1c4f0704-a29e-403d-b719-b9
              image: hmctspublic.azurecr.io/em/anno:latest
              job:
                backoffLimit: 6
                cpuLimits: 2500m
                cpuRequests: 25m
                global:
                  ccdAdminWebIngress: ""
                  ccdApiGatewayIngress: ""
                  ccdCaseManagementWebIngress: ""
                  ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                  ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                  ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                  devMode: true
                  dmStoreUrl: http://{{ .Release.Name }}-dm-store
                  draftStoreUrl: http://{{ .Release.Name }}-draft-store
                  emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                  enableKeyVaults: false
                  idamApiUrl: ""
                  idamWebUrl: ""
                  paymentsUrl: http://{{ .Release.Name }}-payment-api
                  postgresPassword: hmcts
                  postgresUsername: hmcts
                  postgresqlHostName: '{{ .Release.Name }}-postgresql'
                  postgresqlPassword: hmcts
                  postgresqlUsername: hmcts
                  s2sUrl: http://{{ .Release.Name }}-s2s
                  subscriptionId: 1c4f0704-a29e-403d-b719-b9
                kind: Job
                memoryLimits: 1024Mi
                memoryRequests: 512Mi
                restartPolicy: OnFailure
              keyVaults:
                em-anno:
                  secrets:
                  - microservicekey-em-annotation-app
                  - AppInsightsInstrumentationKey
                  - anno-POSTGRES-PASS
              livenessDelay: 180
              livenessFailureThreshold: 3
              livenessPath: /health/liveness
              livenessPeriod: 15
              livenessTimeout: 3
              memoryLimits: 2048Mi
              memoryRequests: 512Mi
              pdb:
                enabled: true
                maxUnavailable: 50%
              postgresql:
                enabled: false
                extraEnv: {}
                global:
                  ccdAdminWebIngress: ""
                  ccdApiGatewayIngress: ""
                  ccdCaseManagementWebIngress: ""
                  ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                  ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                  ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                  devMode: true
                  dmStoreUrl: http://{{ .Release.Name }}-dm-store
                  draftStoreUrl: http://{{ .Release.Name }}-draft-store
                  emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                  enableKeyVaults: false
                  idamApiUrl: ""
                  idamWebUrl: ""
                  paymentsUrl: http://{{ .Release.Name }}-payment-api
                  postgresPassword: hmcts
                  postgresUsername: hmcts
                  postgresql: {}
                  postgresqlHostName: '{{ .Release.Name }}-postgresql'
                  postgresqlPassword: hmcts
                  postgresqlUsername: hmcts
                  s2sUrl: http://{{ .Release.Name }}-s2s
                  subscriptionId: 1c4f0704-a29e-403d-b719-b9
                image:
                  debug: false
                  pullPolicy: IfNotPresent
                  registry: docker.io
                  repository: bitnami/postgresql
                  tag: 11.5.0-debian-9-r60
                livenessProbe:
                  enabled: true
                  failureThreshold: 6
                  initialDelaySeconds: 30
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                master:
                  affinity: {}
                  extraVolumeMounts: []
                  extraVolumes: []
                  nodeSelector: {}
                  podAnnotations: {}
                  podLabels: {}
                  tolerations: []
                metrics:
                  enabled: false
                  image:
                    pullPolicy: IfNotPresent
                    registry: docker.io
                    repository: bitnami/postgres-exporter
                    tag: 0.5.1-debian-9-r73
                  livenessProbe:
                    enabled: true
                    failureThreshold: 6
                    initialDelaySeconds: 5
                    periodSeconds: 10
                    successThreshold: 1
                    timeoutSeconds: 5
                  readinessProbe:
                    enabled: true
                    failureThreshold: 6
                    initialDelaySeconds: 5
                    periodSeconds: 10
                    successThreshold: 1
                    timeoutSeconds: 5
                  securityContext:
                    enabled: false
                    runAsUser: 1001
                  service:
                    annotations:
                      prometheus.io/port: "9187"
                      prometheus.io/scrape: "true"
                    loadBalancerIP: null
                    type: ClusterIP
                  serviceMonitor:
                    additionalLabels: {}
                    enabled: false
                nameOverride: em-anno-db
                networkPolicy:
                  allowExternal: true
                  enabled: false
                persistence:
                  accessModes:
                  - ReadWriteOnce
                  annotations: {}
                  enabled: false
                  mountPath: /bitnami/postgresql
                  size: 8Gi
                  subPath: ""
                postgresqlDataDir: /bitnami/postgresql/data
                postgresqlDatabase: javadatabase
                postgresqlPassword: emannotationapp
                postgresqlUsername: emannotationapp
                readinessProbe:
                  enabled: true
                  failureThreshold: 6
                  initialDelaySeconds: 5
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                replication:
                  applicationName: my_application
                  enabled: false
                  numSynchronousReplicas: 0
                  password: repl_password
                  slaveReplicas: 1
                  synchronousCommit: "off"
                  user: repl_user
                resources:
                  requests:
                    cpu: 250m
                    memory: 256Mi
                securityContext:
                  enabled: true
                  fsGroup: 1001
                  runAsUser: 1001
                service:
                  annotations: {}
                  port: 5432
                  type: ClusterIP
                serviceAccount:
                  enabled: false
                slave:
                  affinity: {}
                  extraVolumeMounts: []
                  extraVolumes: []
                  nodeSelector: {}
                  podAnnotations: {}
                  podLabels: {}
                  tolerations: []
                updateStrategy:
                  type: RollingUpdate
                volumePermissions:
                  enabled: true
                  image:
                    pullPolicy: Always
                    registry: docker.io
                    repository: bitnami/minideb
                    tag: stretch
                  securityContext:
                    runAsUser: 0
              prometheus:
                enabled: false
                path: /prometheus
              readinessDelay: 180
              readinessPath: /health
              readinessPeriod: 15
              readinessTimeout: 3
              registerAdditionalDns:
                enabled: false
              releaseNameOverride: '{{ .Release.Name }}-em-annotation'
              replicas: 1
              smoketests:
                backoffLimit: 2
                enabled: false
                kind: Job
              smoketestscron:
                backoffLimit: 2
                enabled: false
                kind: CronJob
              useInterpodAntiAffinity: false
          global:
            ccdAdminWebIngress: ""
            ccdApiGatewayIngress: ""
            ccdCaseManagementWebIngress: ""
            ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
            ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
            ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
            devMode: true
            dmStoreUrl: http://{{ .Release.Name }}-dm-store
            draftStoreUrl: http://{{ .Release.Name }}-draft-store
            emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
            idamApiUrl: ""
            idamWebUrl: ""
            paymentsUrl: http://{{ .Release.Name }}-payment-api
            postgresPassword: hmcts
            postgresUsername: hmcts
            postgresqlHostName: '{{ .Release.Name }}-postgresql'
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            s2sUrl: http://{{ .Release.Name }}-s2s
            subscriptionId: 1c4f0704-a29e-403d-b719-b9
          payment-api:
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            java:
              applicationPort: 8080
              cpuLimits: 1500m
              cpuRequests: 250m
              devApplicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
              devcpuLimits: 2500m
              devcpuRequests: 250m
              devmemoryLimits: 1024Mi
              devmemoryRequests: 512Mi
              environment:
                APPINSIGHTS_INSTRUMENTATIONKEY: fake-key
                AUTH_IDAM_CLIENT_BASEURL: '{{ tpl .Values.global.idamApiUrl $}}'
                AUTH_PROVIDER_SERVICE_CLIENT_BASEURL: '{{ tpl .Values.global.s2sUrl
                  $}}'
                BAR_PAYMENTS_EMAIL_FROM: no-reply@reform.hmcts.net
                BAR_PAYMENTS_EMAIL_MESSAGE: hi
                BAR_PAYMENTS_EMAIL_SUBJECT: Docker Env Bar Payments Reconciliation
                  Report
                BAR_PAYMENTS_EMAIL_TO: krishnakn00@gmail.com
                BAR_PAYMENTS_REPORT_SCHEDULER_ENABLED: "true"
                CARD_PAYMENTS_EMAIL_FROM: no-reply@reform.hmcts.net
                CARD_PAYMENTS_EMAIL_MESSAGE: hi
                CARD_PAYMENTS_EMAIL_SUBJECT: Docker Env Card Payments Reconciliation
                  Report
                CARD_PAYMENTS_EMAIL_TO: krishnakn00@gmail.com
                CARD_PAYMENTS_REPORT_SCHEDULER_ENABLED: "true"
                CORE_CASE_DATA_API_URL: '{{ tpl .Values.global.ccdDataStoreUrl $}}'
                FEATURE_PAYMENTS_SEARCH: "true"
                FEATURE_SERVICE_CALLBACK: "true"
                FEES_REGISTER_URL: http://fees-register-api-{{ .Values.global.environment
                  }}.service.core-compute-{{ .Values.global.environment }}.internal
                GOV_PAY_OPERATIONAL_SERVICES: ccd_gw
                GOV_PAY_URL: https://publicapi.payments.service.gov.uk/v1/payments
                PAYBUBBLE_HOME_URL: https://ccpay-bubble-frontend-{{ .Values.global.environment
                  }}.service.core-compute-{{ .Values.global.environment }}.internal
                PAYMENT_AUDIT_FILE: /tmp/payment-audit.log
                PBA_CMC_PAYMENTS_EMAIL_FROM: no-reply@reform.hmcts.net
                PBA_CMC_PAYMENTS_EMAIL_MESSAGE: hi
                PBA_CMC_PAYMENTS_EMAIL_SUBJECT: Docker Env Card Payments Reconciliation
                  Report
                PBA_CMC_PAYMENTS_EMAIL_TO: krishnakn00@gmail.com
                PBA_CMC_PAYMENTS_REPORT_SCHEDULER_ENABLED: "true"
                PBA_DIVORCE_PAYMENTS_EMAIL_FROM: no-reply@reform.hmcts.net
                PBA_DIVORCE_PAYMENTS_EMAIL_MESSAGE: hi
                PBA_DIVORCE_PAYMENTS_EMAIL_SUBJECT: Docker Env Card Payments Reconciliation
                  Report
                PBA_DIVORCE_PAYMENTS_EMAIL_TO: krishnakn00@gmail.com
                PBA_DIVORCE_PAYMENTS_REPORT_SCHEDULER_ENABLED: "true"
                PBA_FINREM_PAYMENTS_EMAIL_FROM: no-reply@reform.hmcts.net
                PBA_FINREM_PAYMENTS_EMAIL_MESSAGE: hi
                PBA_FINREM_PAYMENTS_EMAIL_SUBJECT: Docker Env Card Payments Reconciliation
                  Report
                PBA_FINREM_PAYMENTS_EMAIL_TO: krishnakn00@gmail.com
                PBA_FINREM_PAYMENTS_REPORT_SCHEDULER_ENABLED: "true"
                PBA_PROBATE_PAYMENTS_EMAIL_FROM: no-reply@reform.hmcts.net
                PBA_PROBATE_PAYMENTS_EMAIL_MESSAGE: hi
                PBA_PROBATE_PAYMENTS_EMAIL_SUBJECT: Docker Env Card Payments Reconciliation
                  Report
                PBA_PROBATE_PAYMENTS_EMAIL_TO: krishnakn00@gmail.com
                PBA_PROBATE_PAYMENTS_REPORT_SCHEDULER_ENABLED: "true"
                PCI_PAL_CALLBACK_URL: https://core-api-mgmt-{{ .Values.global.environment
                  }}.azure-api.net/telephony-api/telephony/callback
                REFORM_ENVIRONMENT: preview
                REFORM_SERVICE_NAME: payment-api
                REFORM_TEAM: cc
                RUN_DB_MIGRATION_ON_STARTUP: "false"
                S2S_URL: http://rpe-service-auth-provider-{{ .Values.global.environment
                  }}.service.core-compute-{{ .Values.global.environment }}.internal
                SPRING_DATASOURCE_PASSWORD: '{{ tpl .Values.global.postgresPassword
                  $}}'
                SPRING_DATASOURCE_URL: jdbc:postgresql://{{ .Release.Name }}-postgresql:5432/payment_api
                SPRING_DATASOURCE_USERNAME: '{{ tpl .Values.global.postgresUsername
                  $}}'
                SPRING_LIQUIBASE_ENABLED: true
                SPRING_MAIL_HOST: mta.reform.hmcts.net
                SPRING_MAIL_PORT: "25"
                SPRING_MAIL_PROPERTIES_MAIL_SMTP_SSL_TRUST: '*'
                SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: "true"
                TRUSTED_S2S_SERVICE_NAMES: cmc,cmc_claim_store,probate_frontend,divorce_frontend,ccd_gw,bar_api,api_gw,finrem_payment_service,ccpay_bubble,jui_webapp,xui_webapp
              functionaltests:
                enabled: false
                image: hmctspublic.azurecr.io/spring-boot/template
              functionaltestscron:
                enabled: false
                image: hmctspublic.azurecr.io/spring-boot/template
                schedule: 30 0/6 * * *
              global:
                ccdAdminWebIngress: ""
                ccdApiGatewayIngress: ""
                ccdCaseManagementWebIngress: ""
                ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                devMode: true
                dmStoreUrl: http://{{ .Release.Name }}-dm-store
                draftStoreUrl: http://{{ .Release.Name }}-draft-store
                emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                enableKeyVaults: false
                functionaltestscron:
                  enabled: true
                idamApiUrl: ""
                idamWebUrl: ""
                paymentsUrl: http://{{ .Release.Name }}-payment-api
                postgresPassword: hmcts
                postgresUsername: hmcts
                postgresqlHostName: '{{ .Release.Name }}-postgresql'
                postgresqlPassword: hmcts
                postgresqlUsername: hmcts
                s2sUrl: http://{{ .Release.Name }}-s2s
                smoketestscron:
                  enabled: true
                subscriptionId: 1c4f0704-a29e-403d-b719-b9
              image: hmctspublic.azurecr.io/payment/api:latest
              ingressClass: traefik
              keyVaults:
                ccpay:
                  resourceGroup: ccpay
                  secrets:
                  - api-POSTGRES-PASS
                  - sb-primary-connection-string
                  - pci-pal-account-id-cmc
                  - pci-pal-account-id-probate
                  - pci-pal-account-id-divorce
                  - pci-pal-api-url
                  - pci-pal-api-key
                  - gov-pay-keys-reference
                  - gov-pay-keys-cmc
                  - gov-pay-keys-divorce
                  - gov-pay-keys-probate
                  - liberata-keys-oauth2-client-id
                  - liberata-keys-oauth2-client-secret
                  - liberata-keys-oauth2-username
                  - liberata-keys-oauth2-password
              livenessDelay: 180
              livenessFailureThreshold: 3
              livenessPath: /health/liveness
              livenessPeriod: 15
              livenessTimeout: 3
              memoryLimits: 2048Mi
              memoryRequests: 512Mi
              pdb:
                enabled: true
                maxUnavailable: 50%
              postgresql:
                enabled: false
                extraEnv:
                - name: POSTGRESQL_DATABASE
                  value: payment
                global:
                  ccdAdminWebIngress: ""
                  ccdApiGatewayIngress: ""
                  ccdCaseManagementWebIngress: ""
                  ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                  ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                  ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                  devMode: true
                  dmStoreUrl: http://{{ .Release.Name }}-dm-store
                  draftStoreUrl: http://{{ .Release.Name }}-draft-store
                  emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                  enableKeyVaults: false
                  functionaltestscron:
                    enabled: true
                  idamApiUrl: ""
                  idamWebUrl: ""
                  paymentsUrl: http://{{ .Release.Name }}-payment-api
                  postgresPassword: hmcts
                  postgresUsername: hmcts
                  postgresql: {}
                  postgresqlHostName: '{{ .Release.Name }}-postgresql'
                  postgresqlPassword: hmcts
                  postgresqlUsername: hmcts
                  s2sUrl: http://{{ .Release.Name }}-s2s
                  smoketestscron:
                    enabled: true
                  subscriptionId: 1c4f0704-a29e-403d-b719-b9
                image:
                  debug: false
                  pullPolicy: IfNotPresent
                  registry: docker.io
                  repository: bitnami/postgresql
                  tag: 11.5.0-debian-9-r60
                livenessProbe:
                  enabled: true
                  failureThreshold: 6
                  initialDelaySeconds: 30
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                master:
                  affinity: {}
                  extraVolumeMounts: []
                  extraVolumes: []
                  nodeSelector: {}
                  podAnnotations: {}
                  podLabels: {}
                  tolerations: []
                metrics:
                  enabled: false
                  image:
                    pullPolicy: IfNotPresent
                    registry: docker.io
                    repository: bitnami/postgres-exporter
                    tag: 0.5.1-debian-9-r73
                  livenessProbe:
                    enabled: true
                    failureThreshold: 6
                    initialDelaySeconds: 5
                    periodSeconds: 10
                    successThreshold: 1
                    timeoutSeconds: 5
                  readinessProbe:
                    enabled: true
                    failureThreshold: 6
                    initialDelaySeconds: 5
                    periodSeconds: 10
                    successThreshold: 1
                    timeoutSeconds: 5
                  securityContext:
                    enabled: false
                    runAsUser: 1001
                  service:
                    annotations:
                      prometheus.io/port: "9187"
                      prometheus.io/scrape: "true"
                    loadBalancerIP: null
                    type: ClusterIP
                  serviceMonitor:
                    additionalLabels: {}
                    enabled: false
                nameOverride: payment-db
                networkPolicy:
                  allowExternal: true
                  enabled: false
                persistence:
                  accessModes:
                  - ReadWriteOnce
                  annotations: {}
                  enabled: false
                  mountPath: /bitnami/postgresql
                  size: 8Gi
                  subPath: ""
                postgresqlDataDir: /bitnami/postgresql/data
                postgresqlDatabase: payment
                postgresqlPassword: payment
                postgresqlUsername: payment
                readinessProbe:
                  enabled: true
                  failureThreshold: 6
                  initialDelaySeconds: 5
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                replication:
                  applicationName: my_application
                  enabled: false
                  numSynchronousReplicas: 0
                  password: repl_password
                  slaveReplicas: 1
                  synchronousCommit: "off"
                  user: repl_user
                resources:
                  requests:
                    cpu: 250m
                    memory: 256Mi
                securityContext:
                  enabled: true
                  fsGroup: 1001
                  runAsUser: 1001
                service:
                  annotations: {}
                  port: 5432
                  type: ClusterIP
                serviceAccount:
                  enabled: false
                slave:
                  affinity: {}
                  extraVolumeMounts: []
                  extraVolumes: []
                  nodeSelector: {}
                  podAnnotations: {}
                  podLabels: {}
                  tolerations: []
                updateStrategy:
                  type: RollingUpdate
                volumePermissions:
                  enabled: true
                  image:
                    pullPolicy: Always
                    registry: docker.io
                    repository: bitnami/minideb
                    tag: stretch
                  securityContext:
                    runAsUser: 0
              prometheus:
                enabled: false
                path: /prometheus
              readinessDelay: 180
              readinessPath: /health
              readinessPeriod: 15
              readinessTimeout: 3
              registerAdditionalDns:
                enabled: false
              releaseNameOverride: '{{ .Release.Name }}-payment-api'
              replicas: 1
              smoketests:
                enabled: false
                image: hmctspublic.azurecr.io/spring-boot/template
              smoketestscron:
                enabled: false
                image: hmctspublic.azurecr.io/spring-boot/template
                schedule: 20 0/1 * * *
              testsConfig:
                cpuLimits: 1000m
                cpuRequests: 100m
                memoryLimits: 1024Mi
                memoryRequests: 256Mi
              useInterpodAntiAffinity: false
          paymentApi:
            enabled: false
          postgresql:
            extraEnv: {}
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresql: {}
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            image:
              debug: false
              pullPolicy: IfNotPresent
              registry: docker.io
              repository: bitnami/postgresql
              tag: 11.5.0-debian-9-r60
            initdbScripts:
              init.sql: |-
                CREATE DATABASE "data-store" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
                CREATE DATABASE "definition-store" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
                CREATE DATABASE "user-profile" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
                CREATE DATABASE "draftstore" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
                CREATE DATABASE "payment_api" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
                CREATE DATABASE "evidence" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
                CREATE DATABASE "annotation" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
            livenessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            master:
              affinity: {}
              extraVolumeMounts: []
              extraVolumes: []
              nodeSelector: {}
              podAnnotations: {}
              podLabels: {}
              tolerations: []
            metrics:
              enabled: false
              image:
                pullPolicy: IfNotPresent
                registry: docker.io
                repository: bitnami/postgres-exporter
                tag: 0.5.1-debian-9-r73
              livenessProbe:
                enabled: true
                failureThreshold: 6
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              readinessProbe:
                enabled: true
                failureThreshold: 6
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              securityContext:
                enabled: false
                runAsUser: 1001
              service:
                annotations:
                  prometheus.io/port: "9187"
                  prometheus.io/scrape: "true"
                loadBalancerIP: null
                type: ClusterIP
              serviceMonitor:
                additionalLabels: {}
                enabled: false
            networkPolicy:
              allowExternal: true
              enabled: false
            persistence:
              accessModes:
              - ReadWriteOnce
              annotations: {}
              enabled: true
              mountPath: /bitnami/postgresql
              size: 8Gi
              subPath: ""
            postgresqlDataDir: /bitnami/postgresql/data
            postgresqlDatabase: ccd
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            readinessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            replication:
              applicationName: my_application
              enabled: false
              numSynchronousReplicas: 0
              password: repl_password
              slaveReplicas: 1
              synchronousCommit: "off"
              user: repl_user
            resources:
              requests:
                cpu: 25m
                memory: 256Mi
            securityContext:
              enabled: true
              fsGroup: 1001
              runAsUser: 1001
            service:
              annotations: {}
              port: 5432
              type: ClusterIP
            serviceAccount:
              enabled: false
            slave:
              affinity: {}
              extraVolumeMounts: []
              extraVolumes: []
              nodeSelector: {}
              podAnnotations: {}
              podLabels: {}
              tolerations: []
            updateStrategy:
              type: RollingUpdate
            volumePermissions:
              enabled: true
              image:
                pullPolicy: Always
                registry: docker.io
                repository: bitnami/minideb
                tag: stretch
              securityContext:
                runAsUser: 0
          rpe-service-auth-provider:
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            java:
              aadIdentityName: rpe
              applicationPort: 8489
              cpuLimits: 1500m
              cpuRequests: 250m
              devApplicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
              devcpuLimits: 2500m
              devcpuRequests: 250m
              devmemoryLimits: 1024Mi
              devmemoryRequests: 512Mi
              environment:
                MICROSERVICEKEYS_CCD_ADMIN: AAAAAAAAAAAAAAAA
                MICROSERVICEKEYS_CCD_DATA: AAAAAAAAAAAAAAAA
                MICROSERVICEKEYS_CCD_DEFINITION: AAAAAAAAAAAAAAAA
                MICROSERVICEKEYS_CCD_GW: AAAAAAAAAAAAAAAA
                MICROSERVICEKEYS_CCD_PS: AAAAAAAAAAAAAAAA
                TESTING_SUPPORT_ENABLED: "true"
              functionaltests:
                enabled: false
                image: hmctspublic.azurecr.io/spring-boot/template
              functionaltestscron:
                enabled: false
                image: hmctspublic.azurecr.io/spring-boot/template
                schedule: 30 0/6 * * *
              global:
                ccdAdminWebIngress: ""
                ccdApiGatewayIngress: ""
                ccdCaseManagementWebIngress: ""
                ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                devMode: true
                dmStoreUrl: http://{{ .Release.Name }}-dm-store
                draftStoreUrl: http://{{ .Release.Name }}-draft-store
                emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                enableKeyVaults: false
                functionaltestscron:
                  enabled: true
                idamApiUrl: ""
                idamWebUrl: ""
                paymentsUrl: http://{{ .Release.Name }}-payment-api
                postgresPassword: hmcts
                postgresUsername: hmcts
                postgresqlHostName: '{{ .Release.Name }}-postgresql'
                postgresqlPassword: hmcts
                postgresqlUsername: hmcts
                s2sUrl: http://{{ .Release.Name }}-s2s
                smoketestscron:
                  enabled: true
                subscriptionId: 1c4f0704-a29e-403d-b719-b9
              image: hmctspublic.azurecr.io/rpe/service-auth-provider:latest
              ingressClass: traefik
              ingressHost: ""
              keyVaults: null
              livenessDelay: 180
              livenessFailureThreshold: 3
              livenessPath: /health/liveness
              livenessPeriod: 15
              livenessTimeout: 3
              memoryLimits: 2048Mi
              memoryRequests: 512Mi
              pdb:
                enabled: true
                maxUnavailable: 50%
              postgresql:
                enabled: false
                extraEnv: {}
                global:
                  ccdAdminWebIngress: ""
                  ccdApiGatewayIngress: ""
                  ccdCaseManagementWebIngress: ""
                  ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                  ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                  ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                  devMode: true
                  dmStoreUrl: http://{{ .Release.Name }}-dm-store
                  draftStoreUrl: http://{{ .Release.Name }}-draft-store
                  emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                  enableKeyVaults: false
                  functionaltestscron:
                    enabled: true
                  idamApiUrl: ""
                  idamWebUrl: ""
                  paymentsUrl: http://{{ .Release.Name }}-payment-api
                  postgresPassword: hmcts
                  postgresUsername: hmcts
                  postgresql: {}
                  postgresqlHostName: '{{ .Release.Name }}-postgresql'
                  postgresqlPassword: hmcts
                  postgresqlUsername: hmcts
                  s2sUrl: http://{{ .Release.Name }}-s2s
                  smoketestscron:
                    enabled: true
                  subscriptionId: 1c4f0704-a29e-403d-b719-b9
                image:
                  debug: false
                  pullPolicy: IfNotPresent
                  registry: docker.io
                  repository: bitnami/postgresql
                  tag: 11.5.0-debian-9-r60
                livenessProbe:
                  enabled: true
                  failureThreshold: 6
                  initialDelaySeconds: 30
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                master:
                  affinity: {}
                  extraVolumeMounts: []
                  extraVolumes: []
                  nodeSelector: {}
                  podAnnotations: {}
                  podLabels: {}
                  tolerations: []
                metrics:
                  enabled: false
                  image:
                    pullPolicy: IfNotPresent
                    registry: docker.io
                    repository: bitnami/postgres-exporter
                    tag: 0.5.1-debian-9-r73
                  livenessProbe:
                    enabled: true
                    failureThreshold: 6
                    initialDelaySeconds: 5
                    periodSeconds: 10
                    successThreshold: 1
                    timeoutSeconds: 5
                  readinessProbe:
                    enabled: true
                    failureThreshold: 6
                    initialDelaySeconds: 5
                    periodSeconds: 10
                    successThreshold: 1
                    timeoutSeconds: 5
                  securityContext:
                    enabled: false
                    runAsUser: 1001
                  service:
                    annotations:
                      prometheus.io/port: "9187"
                      prometheus.io/scrape: "true"
                    loadBalancerIP: null
                    type: ClusterIP
                  serviceMonitor:
                    additionalLabels: {}
                    enabled: false
                networkPolicy:
                  allowExternal: true
                  enabled: false
                persistence:
                  accessModes:
                  - ReadWriteOnce
                  annotations: {}
                  enabled: false
                  mountPath: /bitnami/postgresql
                  size: 8Gi
                  subPath: ""
                postgresqlDataDir: /bitnami/postgresql/data
                postgresqlDatabase: javadatabase
                postgresqlPassword: javapassword
                postgresqlUsername: javapostgres
                readinessProbe:
                  enabled: true
                  failureThreshold: 6
                  initialDelaySeconds: 5
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                replication:
                  applicationName: my_application
                  enabled: false
                  numSynchronousReplicas: 0
                  password: repl_password
                  slaveReplicas: 1
                  synchronousCommit: "off"
                  user: repl_user
                resources:
                  requests:
                    cpu: 250m
                    memory: 256Mi
                securityContext:
                  enabled: true
                  fsGroup: 1001
                  runAsUser: 1001
                service:
                  annotations: {}
                  port: 5432
                  type: ClusterIP
                serviceAccount:
                  enabled: false
                slave:
                  affinity: {}
                  extraVolumeMounts: []
                  extraVolumes: []
                  nodeSelector: {}
                  podAnnotations: {}
                  podLabels: {}
                  tolerations: []
                updateStrategy:
                  type: RollingUpdate
                volumePermissions:
                  enabled: true
                  image:
                    pullPolicy: Always
                    registry: docker.io
                    repository: bitnami/minideb
                    tag: stretch
                  securityContext:
                    runAsUser: 0
              prometheus:
                enabled: false
                path: /prometheus
              readinessDelay: 180
              readinessPath: /health
              readinessPeriod: 15
              readinessTimeout: 3
              registerAdditionalDns:
                enabled: false
              releaseNameOverride: '{{ .Release.Name }}-s2s'
              replicas: 1
              smoketests:
                enabled: false
                image: hmctspublic.azurecr.io/spring-boot/template
              smoketestscron:
                enabled: false
                image: hmctspublic.azurecr.io/spring-boot/template
                schedule: 20 0/1 * * *
              testsConfig:
                cpuLimits: 1000m
                cpuRequests: 100m
                memoryLimits: 1024Mi
                memoryRequests: 256Mi
              useInterpodAntiAffinity: false
          s2s:
            enabled: false
          tags:
            idam-pr: true
        ccpay:
          ccd:
            enabled: false
          ccpay-bubble-frontend:
            enabled: false
          ccpay-bulkscanning-api:
            enabled: false
          fees-register-api:
            enabled: false
          payment-api:
            enabled: true
          postgresql:
            enabled: false
          rpe-service-auth-provider:
            enabled: false
        ccpay-bubble-frontend:
          ccpayfrontend:
            idampr:
              enabled: false
          global:
            ccdAdminWebIngress: ""
            ccdApiGatewayIngress: ""
            ccdCaseManagementWebIngress: ""
            ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
            ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
            ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
            devMode: true
            dmStoreUrl: http://{{ .Release.Name }}-dm-store
            draftStoreUrl: http://{{ .Release.Name }}-draft-store
            emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
            idamApiUrl: ""
            idamWebUrl: ""
            paymentsUrl: http://{{ .Release.Name }}-payment-api
            postgresPassword: hmcts
            postgresUsername: hmcts
            postgresqlHostName: '{{ .Release.Name }}-postgresql'
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            s2sUrl: http://{{ .Release.Name }}-s2s
            subscriptionId: 1c4f0704-a29e-403d-b719-b9
          idam-pr:
            api:
              url: https://idam-api.aat.platform.hmcts.net
            cpuLimits: 2500m
            cpuRequests: 25m
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            memoryLimits: 1024Mi
            memoryRequests: 128Mi
            redirect_uris:
              paybubble:
              - '{{ .Values.global.bubbleUrl }}/oauth2/callback'
            web_public:
              url: https://idam-web-public.aat.platform.hmcts.net
          nodejs:
            applicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
            applicationPort: 3000
            cpuLimits: 500m
            cpuRequests: 25m
            environment:
              APPINSIGHTS_INSTRUMENTATIONKEY: null
              CCD_URL: '{{ tpl .Values.global.ccdDataStoreUrl $}}'
              CCPAY_BUBBLE_MICROSERVICE: ccpay_bubble
              CCPAY_BULKSCAN_API_URL: http://{{ .Release.Name }}-bulk-scanning
              FEE_JURISDICTION_URL: http://{{ .Release.Name }}-fee-register/jurisdictions
              FEE_REGISTRATION_URL: http://{{ .Release.Name }}-fee-register/fees-register/fees
              IDAM_API_URL: '{{ .Values.global.idamApiUrl }}'
              IDAM_AUTHENTICATION_WEB_URL: '{{ .Values.global.idamWebUrl }}'
              NODE_ENV: production
              PAYHUB_API_URL: http://{{ .Release.Name }}-payment-api
              REFORM_SERVICE_NAME: ccpay-bubble-frontend
              REFORM_TEAM: ccpay
              S2S_KEY: BBBBBBBBBB
              S2S_URL: http://{{ .Release.Name }}-s2s
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              enableKeyVaults: false
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            image: hmctspublic.azurecr.io/ccpay/bubble-frontend:latest
            imagePullPolicy: IfNotPresent
            ingressClass: traefik
            ingressHost: ""
            livenessDelay: 5
            livenessFailureThreshold: 3
            livenessPath: /health/liveness
            livenessPeriod: 15
            livenessTimeout: 3
            memoryLimits: 512Mi
            memoryRequests: 64Mi
            pdb:
              enabled: true
              maxUnavailable: 50%
            prometheus:
              enabled: false
              path: /metrics
            readinessDelay: 5
            readinessPath: /health
            readinessPeriod: 15
            readinessTimeout: 3
            registerAdditionalDns:
              enabled: false
            releaseNameOverride: '{{ .Release.Name }}-ccpay-bubble'
            replicas: 1
            secrets:
              IDAM_CLIENT_SECRET:
                key: key
                secretRef: paybubble-idam-client-secret
            useInterpodAntiAffinity: false
        ccpay-bulkscanning-api:
          global:
            ccdAdminWebIngress: ""
            ccdApiGatewayIngress: ""
            ccdCaseManagementWebIngress: ""
            ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
            ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
            ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
            devMode: true
            dmStoreUrl: http://{{ .Release.Name }}-dm-store
            draftStoreUrl: http://{{ .Release.Name }}-draft-store
            emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
            idamApiUrl: ""
            idamWebUrl: ""
            paymentsUrl: http://{{ .Release.Name }}-payment-api
            postgresPassword: hmcts
            postgresUsername: hmcts
            postgresqlHostName: '{{ .Release.Name }}-postgresql'
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            s2sUrl: http://{{ .Release.Name }}-s2s
            subscriptionId: 1c4f0704-a29e-403d-b719-b9
          java:
            aadIdentityName: ccpay
            applicationPort: 8080
            cpuLimits: 1500m
            cpuRequests: 250m
            devApplicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
            devcpuLimits: 2500m
            devcpuRequests: 250m
            devmemoryLimits: 1024Mi
            devmemoryRequests: 512Mi
            environment:
              AUTH_IDAM_CLIENT_BASEURL: '{{ .Values.global.idamApiUrl }}'
              AUTH_PROVIDER_SERVICE_CLIENT_BASEURL: '{{ tpl .Values.global.s2sUrl
                $}}'
              POSTGRES_CONNECTION_OPTIONS: ?sslmode=require
              POSTGRES_HOST: ccpay-bulkscanning-api-postgres-db-{{ .Values.global.environment
                }}.postgres.database.azure.com
              POSTGRES_NAME: bspayment
              POSTGRES_PASSWORD: '{{ .Values.global.postgresqlPassword }}'
              POSTGRES_PORT: 5432
              POSTGRES_USERNAME: '{{ .Values.global.postgresqlUsername }}'
              REFORM_SERVICE_NAME: ccpay-bulkscanning
              REFORM_TEAM: ccpay
              SPRING_DATASOURCE_URL: jdbc:postgresql://{{ tpl .Values.global.postgresqlHostName
                $}}:5432/bspayment
              SPRING_LIQUIBASE_ENABLED: false
            functionaltests:
              enabled: false
              image: hmctspublic.azurecr.io/spring-boot/template
            functionaltestscron:
              enabled: false
              image: hmctspublic.azurecr.io/spring-boot/template
              schedule: 30 0/6 * * *
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              enableKeyVaults: false
              functionaltestscron:
                enabled: true
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              smoketestscron:
                enabled: true
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            image: hmctspublic.azurecr.io/ccpay/bulkscanning-api:latest
            ingressClass: traefik
            ingressHost: ""
            keyVaults:
              ccpay:
                resourceGroup: ccpay
                secrets:
                - bulkscanning-api-POSTGRES-PASS
                - AppInsightsInstrumentationKey
            livenessDelay: 30
            livenessFailureThreshold: 3
            livenessPath: /health/liveness
            livenessPeriod: 15
            livenessTimeout: 3
            memoryLimits: 2048Mi
            memoryRequests: 512Mi
            pdb:
              enabled: true
              maxUnavailable: 50%
            postgresql:
              enabled: false
              extraEnv: {}
              global:
                ccdAdminWebIngress: ""
                ccdApiGatewayIngress: ""
                ccdCaseManagementWebIngress: ""
                ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                devMode: true
                dmStoreUrl: http://{{ .Release.Name }}-dm-store
                draftStoreUrl: http://{{ .Release.Name }}-draft-store
                emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                enableKeyVaults: false
                functionaltestscron:
                  enabled: true
                idamApiUrl: ""
                idamWebUrl: ""
                paymentsUrl: http://{{ .Release.Name }}-payment-api
                postgresPassword: hmcts
                postgresUsername: hmcts
                postgresql: {}
                postgresqlHostName: '{{ .Release.Name }}-postgresql'
                postgresqlPassword: hmcts
                postgresqlUsername: hmcts
                s2sUrl: http://{{ .Release.Name }}-s2s
                smoketestscron:
                  enabled: true
                subscriptionId: 1c4f0704-a29e-403d-b719-b9
              image:
                debug: false
                pullPolicy: IfNotPresent
                registry: docker.io
                repository: bitnami/postgresql
                tag: 11.5.0-debian-9-r60
              livenessProbe:
                enabled: true
                failureThreshold: 6
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              master:
                affinity: {}
                extraVolumeMounts: []
                extraVolumes: []
                nodeSelector: {}
                podAnnotations: {}
                podLabels: {}
                tolerations: []
              metrics:
                enabled: false
                image:
                  pullPolicy: IfNotPresent
                  registry: docker.io
                  repository: bitnami/postgres-exporter
                  tag: 0.5.1-debian-9-r73
                livenessProbe:
                  enabled: true
                  failureThreshold: 6
                  initialDelaySeconds: 5
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                readinessProbe:
                  enabled: true
                  failureThreshold: 6
                  initialDelaySeconds: 5
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                securityContext:
                  enabled: false
                  runAsUser: 1001
                service:
                  annotations:
                    prometheus.io/port: "9187"
                    prometheus.io/scrape: "true"
                  loadBalancerIP: null
                  type: ClusterIP
                serviceMonitor:
                  additionalLabels: {}
                  enabled: false
              networkPolicy:
                allowExternal: true
                enabled: false
              persistence:
                accessModes:
                - ReadWriteOnce
                annotations: {}
                enabled: false
                mountPath: /bitnami/postgresql
                size: 8Gi
                subPath: ""
              postgresqlDataDir: /bitnami/postgresql/data
              postgresqlDatabase: javadatabase
              postgresqlPassword: javapassword
              postgresqlUsername: javapostgres
              readinessProbe:
                enabled: true
                failureThreshold: 6
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              replication:
                applicationName: my_application
                enabled: false
                numSynchronousReplicas: 0
                password: repl_password
                slaveReplicas: 1
                synchronousCommit: "off"
                user: repl_user
              resources:
                requests:
                  cpu: 250m
                  memory: 256Mi
              securityContext:
                enabled: true
                fsGroup: 1001
                runAsUser: 1001
              service:
                annotations: {}
                port: 5432
                type: ClusterIP
              serviceAccount:
                enabled: false
              slave:
                affinity: {}
                extraVolumeMounts: []
                extraVolumes: []
                nodeSelector: {}
                podAnnotations: {}
                podLabels: {}
                tolerations: []
              updateStrategy:
                type: RollingUpdate
              volumePermissions:
                enabled: true
                image:
                  pullPolicy: Always
                  registry: docker.io
                  repository: bitnami/minideb
                  tag: stretch
                securityContext:
                  runAsUser: 0
            prometheus:
              enabled: false
              path: /prometheus
            readinessDelay: 30
            readinessPath: /health
            readinessPeriod: 15
            readinessTimeout: 3
            registerAdditionalDns:
              enabled: false
            releaseNameOverride: '{{ .Release.Name }}-bulk-scanning'
            replicas: 1
            smoketests:
              enabled: false
              image: hmctspublic.azurecr.io/spring-boot/template
            smoketestscron:
              enabled: false
              image: hmctspublic.azurecr.io/spring-boot/template
              schedule: 20 0/1 * * *
            testsConfig:
              cpuLimits: 1000m
              cpuRequests: 100m
              memoryLimits: 1024Mi
              memoryRequests: 256Mi
            useInterpodAntiAffinity: false
        fees-register-api:
          global:
            ccdAdminWebIngress: ""
            ccdApiGatewayIngress: ""
            ccdCaseManagementWebIngress: ""
            ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
            ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
            ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
            devMode: true
            dmStoreUrl: http://{{ .Release.Name }}-dm-store
            draftStoreUrl: http://{{ .Release.Name }}-draft-store
            emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
            idamApiUrl: ""
            idamWebUrl: ""
            paymentsUrl: http://{{ .Release.Name }}-payment-api
            postgresPassword: hmcts
            postgresUsername: hmcts
            postgresqlHostName: '{{ .Release.Name }}-postgresql'
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            s2sUrl: http://{{ .Release.Name }}-s2s
            subscriptionId: 1c4f0704-a29e-403d-b719-b9
          java:
            aadIdentityName: ccpay
            applicationPort: 8080
            cpuLimits: 1500m
            cpuRequests: 250m
            devApplicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
            devcpuLimits: 2500m
            devcpuRequests: 250m
            devmemoryLimits: 1024Mi
            devmemoryRequests: 512Mi
            environment:
              ENABLE_FEE_LOADER: true
              IDAM_CLIENT_BASE_URL: '{{ .Values.global.idamApiUrl }}'
              POSTGRES_CONNECTION_OPTIONS: ?sslmode=allow
              POSTGRES_HOST: '{{ tpl .Values.global.postgresqlHostName $}}'
              POSTGRES_NAME: fees-register
              POSTGRES_PASSWORD: '{{ .Values.global.postgresqlPassword}}'
              POSTGRES_PORT: 5432
              POSTGRES_USERNAME: '{{ .Values.global.postgresqlUsername}}'
              REFORM_SERVICE_NAME: fees-register-api
              REFORM_TEAM: cc
              SPRING_LIQUIBASE_ENABLED: true
            functionaltests:
              enabled: false
              image: hmctspublic.azurecr.io/spring-boot/template
            functionaltestscron:
              enabled: false
              image: hmctspublic.azurecr.io/spring-boot/template
              schedule: 30 0/6 * * *
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              enableKeyVaults: false
              functionaltestscron:
                enabled: true
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              smoketestscron:
                enabled: true
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            image: hmctspublic.azurecr.io/fees-register/api:latest
            ingressClass: traefik
            ingressHost: ""
            keyVaults:
              fees-register:
                resourceGroup: ccpay
                secrets:
                - api-POSTGRES-PASS
                - AppInsightsInstrumentationKey
            livenessDelay: 30
            livenessFailureThreshold: 3
            livenessPath: /health/liveness
            livenessPeriod: 15
            livenessTimeout: 3
            memoryLimits: 2048Mi
            memoryRequests: 512Mi
            pdb:
              enabled: true
              maxUnavailable: 50%
            postgresql:
              enabled: false
              extraEnv: {}
              global:
                ccdAdminWebIngress: ""
                ccdApiGatewayIngress: ""
                ccdCaseManagementWebIngress: ""
                ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                devMode: true
                dmStoreUrl: http://{{ .Release.Name }}-dm-store
                draftStoreUrl: http://{{ .Release.Name }}-draft-store
                emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                enableKeyVaults: false
                functionaltestscron:
                  enabled: true
                idamApiUrl: ""
                idamWebUrl: ""
                paymentsUrl: http://{{ .Release.Name }}-payment-api
                postgresPassword: hmcts
                postgresUsername: hmcts
                postgresql: {}
                postgresqlHostName: '{{ .Release.Name }}-postgresql'
                postgresqlPassword: hmcts
                postgresqlUsername: hmcts
                s2sUrl: http://{{ .Release.Name }}-s2s
                smoketestscron:
                  enabled: true
                subscriptionId: 1c4f0704-a29e-403d-b719-b9
              image:
                debug: false
                pullPolicy: IfNotPresent
                registry: docker.io
                repository: bitnami/postgresql
                tag: 11.5.0-debian-9-r60
              livenessProbe:
                enabled: true
                failureThreshold: 6
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              master:
                affinity: {}
                extraVolumeMounts: []
                extraVolumes: []
                nodeSelector: {}
                podAnnotations: {}
                podLabels: {}
                tolerations: []
              metrics:
                enabled: false
                image:
                  pullPolicy: IfNotPresent
                  registry: docker.io
                  repository: bitnami/postgres-exporter
                  tag: 0.5.1-debian-9-r73
                livenessProbe:
                  enabled: true
                  failureThreshold: 6
                  initialDelaySeconds: 5
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                readinessProbe:
                  enabled: true
                  failureThreshold: 6
                  initialDelaySeconds: 5
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                securityContext:
                  enabled: false
                  runAsUser: 1001
                service:
                  annotations:
                    prometheus.io/port: "9187"
                    prometheus.io/scrape: "true"
                  loadBalancerIP: null
                  type: ClusterIP
                serviceMonitor:
                  additionalLabels: {}
                  enabled: false
              networkPolicy:
                allowExternal: true
                enabled: false
              persistence:
                accessModes:
                - ReadWriteOnce
                annotations: {}
                enabled: false
                mountPath: /bitnami/postgresql
                size: 8Gi
                subPath: ""
              postgresqlDataDir: /bitnami/postgresql/data
              postgresqlDatabase: javadatabase
              postgresqlPassword: javapassword
              postgresqlUsername: javapostgres
              readinessProbe:
                enabled: true
                failureThreshold: 6
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              replication:
                applicationName: my_application
                enabled: false
                numSynchronousReplicas: 0
                password: repl_password
                slaveReplicas: 1
                synchronousCommit: "off"
                user: repl_user
              resources:
                requests:
                  cpu: 250m
                  memory: 256Mi
              securityContext:
                enabled: true
                fsGroup: 1001
                runAsUser: 1001
              service:
                annotations: {}
                port: 5432
                type: ClusterIP
              serviceAccount:
                enabled: false
              slave:
                affinity: {}
                extraVolumeMounts: []
                extraVolumes: []
                nodeSelector: {}
                podAnnotations: {}
                podLabels: {}
                tolerations: []
              updateStrategy:
                type: RollingUpdate
              volumePermissions:
                enabled: true
                image:
                  pullPolicy: Always
                  registry: docker.io
                  repository: bitnami/minideb
                  tag: stretch
                securityContext:
                  runAsUser: 0
            prometheus:
              enabled: false
              path: /prometheus
            readinessDelay: 30
            readinessPath: /health
            readinessPeriod: 15
            readinessTimeout: 3
            registerAdditionalDns:
              enabled: false
            releaseNameOverride: '{{ .Release.Name }}-fee-register'
            replicas: 1
            smoketests:
              enabled: false
              image: hmctspublic.azurecr.io/spring-boot/template
            smoketestscron:
              enabled: false
              image: hmctspublic.azurecr.io/spring-boot/template
              schedule: 20 0/1 * * *
            testsConfig:
              cpuLimits: 1000m
              cpuRequests: 100m
              memoryLimits: 1024Mi
              memoryRequests: 256Mi
            useInterpodAntiAffinity: false
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: true
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresqlHostName: '{{ .Release.Name }}-postgresql'
          postgresqlPassword: hmcts
          postgresqlUsername: hmcts
          s2sUrl: http://{{ .Release.Name }}-s2s
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        payment-api:
          global:
            ccdAdminWebIngress: ""
            ccdApiGatewayIngress: ""
            ccdCaseManagementWebIngress: ""
            ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
            ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
            ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
            devMode: true
            dmStoreUrl: http://{{ .Release.Name }}-dm-store
            draftStoreUrl: http://{{ .Release.Name }}-draft-store
            emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
            idamApiUrl: ""
            idamWebUrl: ""
            paymentsUrl: http://{{ .Release.Name }}-payment-api
            postgresPassword: hmcts
            postgresUsername: hmcts
            postgresqlHostName: '{{ .Release.Name }}-postgresql'
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            s2sUrl: http://{{ .Release.Name }}-s2s
            subscriptionId: 1c4f0704-a29e-403d-b719-b9
          java:
            applicationPort: 8080
            cpuLimits: 1500m
            cpuRequests: 250m
            devApplicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
            devcpuLimits: 2500m
            devcpuRequests: 250m
            devmemoryLimits: 1024Mi
            devmemoryRequests: 512Mi
            environment:
              APPINSIGHTS_INSTRUMENTATIONKEY: fake-key
              AUTH_IDAM_CLIENT_BASEURL: '{{ .Values.global.idamApiUrl }}'
              AUTH_PROVIDER_SERVICE_CLIENT_BASEURL: '{{ tpl .Values.global.s2sUrl
                $}}'
              BAR_PAYMENTS_EMAIL_FROM: no-reply@reform.hmcts.net
              BAR_PAYMENTS_EMAIL_MESSAGE: hi
              BAR_PAYMENTS_EMAIL_SUBJECT: Docker Env Bar Payments Reconciliation Report
              BAR_PAYMENTS_EMAIL_TO: krishnakn00@gmail.com
              BAR_PAYMENTS_REPORT_SCHEDULER_ENABLED: "true"
              CARD_PAYMENTS_EMAIL_FROM: no-reply@reform.hmcts.net
              CARD_PAYMENTS_EMAIL_MESSAGE: hi
              CARD_PAYMENTS_EMAIL_SUBJECT: Docker Env Card Payments Reconciliation
                Report
              CARD_PAYMENTS_EMAIL_TO: krishnakn00@gmail.com
              CARD_PAYMENTS_REPORT_SCHEDULER_ENABLED: "true"
              CORE_CASE_DATA_API_URL: '{{ tpl .Values.global.ccdDataStoreUrl $}}'
              FEATURE_PAYMENTS_SEARCH: "true"
              FEATURE_SERVICE_CALLBACK: "true"
              FEES_REGISTER_URL: http://{{ .Release.Name }}-fee-register
              GOV_PAY_OPERATIONAL_SERVICES: ccd_gw
              GOV_PAY_URL: https://publicapi.payments.service.gov.uk/v1/payments
              PAYBUBBLE_HOME_URL: https://ccpay-bubble-frontend-{{ .Values.global.environment
                }}.service.core-compute-{{ .Values.global.environment }}.internal
              PBA_CMC_PAYMENTS_EMAIL_FROM: no-reply@reform.hmcts.net
              PBA_CMC_PAYMENTS_EMAIL_MESSAGE: hi
              PBA_CMC_PAYMENTS_EMAIL_SUBJECT: Docker Env Card Payments Reconciliation
                Report
              PBA_CMC_PAYMENTS_EMAIL_TO: krishnakn00@gmail.com
              PBA_CMC_PAYMENTS_REPORT_SCHEDULER_ENABLED: "true"
              PBA_DIVORCE_PAYMENTS_EMAIL_FROM: no-reply@reform.hmcts.net
              PBA_DIVORCE_PAYMENTS_EMAIL_MESSAGE: hi
              PBA_DIVORCE_PAYMENTS_EMAIL_SUBJECT: Docker Env Card Payments Reconciliation
                Report
              PBA_DIVORCE_PAYMENTS_EMAIL_TO: krishnakn00@gmail.com
              PBA_DIVORCE_PAYMENTS_REPORT_SCHEDULER_ENABLED: "true"
              PBA_FINREM_PAYMENTS_EMAIL_FROM: no-reply@reform.hmcts.net
              PBA_FINREM_PAYMENTS_EMAIL_MESSAGE: hi
              PBA_FINREM_PAYMENTS_EMAIL_SUBJECT: Docker Env Card Payments Reconciliation
                Report
              PBA_FINREM_PAYMENTS_EMAIL_TO: krishnakn00@gmail.com
              PBA_FINREM_PAYMENTS_REPORT_SCHEDULER_ENABLED: "true"
              PBA_PROBATE_PAYMENTS_EMAIL_FROM: no-reply@reform.hmcts.net
              PBA_PROBATE_PAYMENTS_EMAIL_MESSAGE: hi
              PBA_PROBATE_PAYMENTS_EMAIL_SUBJECT: Docker Env Card Payments Reconciliation
                Report
              PBA_PROBATE_PAYMENTS_EMAIL_TO: krishnakn00@gmail.com
              PBA_PROBATE_PAYMENTS_REPORT_SCHEDULER_ENABLED: "true"
              PCI_PAL_CALLBACK_URL: https://core-api-mgmt-demodata.azure-api.net/telephony-api/telephony/callback
              REFORM_ENVIRONMENT: preview
              REFORM_SERVICE_NAME: payment-api
              REFORM_TEAM: cc
              RUN_DB_MIGRATION_ON_STARTUP: "true"
              S2S_URL: '{{ tpl .Values.global.s2sUrl $}}'
              SPRING_DATASOURCE_PASSWORD: '{{ .Values.global.postgresqlPassword}}'
              SPRING_DATASOURCE_URL: jdbc:postgresql://{{ tpl .Values.global.postgresqlHostName
                $}}:5432/payment
              SPRING_DATASOURCE_USERNAME: '{{ .Values.global.postgresqlUsername}}'
              SPRING_LIQUIBASE_ENABLED: true
              SPRING_MAIL_HOST: mta.reform.hmcts.net
              SPRING_MAIL_PORT: "25"
              SPRING_MAIL_PROPERTIES_MAIL_SMTP_SSL_TRUST: '*'
              SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: "true"
              SPRING_PROFILES_ACTIVE: liberataMock,callbackMock,ccdMock
              TRUSTED_S2S_SERVICE_NAMES: cmc,cmc_claim_store,probate_frontend,divorce_frontend,ccd_gw,bar_api,api_gw,finrem_payment_service,ccpay_bubble,jui_webapp,xui_webapp
            functionaltests:
              enabled: false
              image: hmctspublic.azurecr.io/spring-boot/template
            functionaltestscron:
              enabled: false
              image: hmctspublic.azurecr.io/spring-boot/template
              schedule: 30 0/6 * * *
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              enableKeyVaults: false
              functionaltestscron:
                enabled: true
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              smoketestscron:
                enabled: true
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            image: hmctspublic.azurecr.io/payment/api:latest
            ingressClass: traefik
            ingressHost: ""
            keyVaults:
              ccpay:
                resourceGroup: ccpay
                secrets:
                - api-POSTGRES-PASS
                - sb-primary-connection-string
                - pci-pal-account-id-cmc
                - pci-pal-account-id-probate
                - pci-pal-account-id-divorce
                - pci-pal-api-url
                - pci-pal-api-key
                - gov-pay-keys-reference
                - gov-pay-keys-cmc
                - gov-pay-keys-divorce
                - gov-pay-keys-probate
                - liberata-keys-oauth2-client-id
                - liberata-keys-oauth2-client-secret
                - liberata-keys-oauth2-username
                - liberata-keys-oauth2-password
            livenessDelay: 30
            livenessFailureThreshold: 3
            livenessPath: /health/liveness
            livenessPeriod: 15
            livenessTimeout: 3
            memoryLimits: 2048Mi
            memoryRequests: 512Mi
            pdb:
              enabled: true
              maxUnavailable: 50%
            postgresql:
              enabled: false
              extraEnv:
              - name: POSTGRESQL_DATABASE
                value: payment
              global:
                ccdAdminWebIngress: ""
                ccdApiGatewayIngress: ""
                ccdCaseManagementWebIngress: ""
                ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                devMode: true
                dmStoreUrl: http://{{ .Release.Name }}-dm-store
                draftStoreUrl: http://{{ .Release.Name }}-draft-store
                emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                enableKeyVaults: false
                functionaltestscron:
                  enabled: true
                idamApiUrl: ""
                idamWebUrl: ""
                paymentsUrl: http://{{ .Release.Name }}-payment-api
                postgresPassword: hmcts
                postgresUsername: hmcts
                postgresql: {}
                postgresqlHostName: '{{ .Release.Name }}-postgresql'
                postgresqlPassword: hmcts
                postgresqlUsername: hmcts
                s2sUrl: http://{{ .Release.Name }}-s2s
                smoketestscron:
                  enabled: true
                subscriptionId: 1c4f0704-a29e-403d-b719-b9
              image:
                debug: false
                pullPolicy: IfNotPresent
                registry: docker.io
                repository: bitnami/postgresql
                tag: 11.5.0-debian-9-r60
              livenessProbe:
                enabled: true
                failureThreshold: 6
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              master:
                affinity: {}
                extraVolumeMounts: []
                extraVolumes: []
                nodeSelector: {}
                podAnnotations: {}
                podLabels: {}
                tolerations: []
              metrics:
                enabled: false
                image:
                  pullPolicy: IfNotPresent
                  registry: docker.io
                  repository: bitnami/postgres-exporter
                  tag: 0.5.1-debian-9-r73
                livenessProbe:
                  enabled: true
                  failureThreshold: 6
                  initialDelaySeconds: 5
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                readinessProbe:
                  enabled: true
                  failureThreshold: 6
                  initialDelaySeconds: 5
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                securityContext:
                  enabled: false
                  runAsUser: 1001
                service:
                  annotations:
                    prometheus.io/port: "9187"
                    prometheus.io/scrape: "true"
                  loadBalancerIP: null
                  type: ClusterIP
                serviceMonitor:
                  additionalLabels: {}
                  enabled: false
              nameOverride: payment-db
              networkPolicy:
                allowExternal: true
                enabled: false
              persistence:
                accessModes:
                - ReadWriteOnce
                annotations: {}
                enabled: false
                mountPath: /bitnami/postgresql
                size: 8Gi
                subPath: ""
              postgresqlDataDir: /bitnami/postgresql/data
              postgresqlDatabase: payment
              postgresqlPassword: payment
              postgresqlUsername: payment
              readinessProbe:
                enabled: true
                failureThreshold: 6
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              replication:
                applicationName: my_application
                enabled: false
                numSynchronousReplicas: 0
                password: repl_password
                slaveReplicas: 1
                synchronousCommit: "off"
                user: repl_user
              resources:
                requests:
                  cpu: 250m
                  memory: 256Mi
              securityContext:
                enabled: true
                fsGroup: 1001
                runAsUser: 1001
              service:
                annotations: {}
                port: 5432
                type: ClusterIP
              serviceAccount:
                enabled: false
              slave:
                affinity: {}
                extraVolumeMounts: []
                extraVolumes: []
                nodeSelector: {}
                podAnnotations: {}
                podLabels: {}
                tolerations: []
              updateStrategy:
                type: RollingUpdate
              volumePermissions:
                enabled: true
                image:
                  pullPolicy: Always
                  registry: docker.io
                  repository: bitnami/minideb
                  tag: stretch
                securityContext:
                  runAsUser: 0
            prometheus:
              enabled: false
              path: /prometheus
            readinessDelay: 30
            readinessPath: /health
            readinessPeriod: 15
            readinessTimeout: 3
            registerAdditionalDns:
              enabled: false
            releaseNameOverride: '{{ .Release.Name }}-payment-api'
            replicas: 1
            secrets:
              GOV_PAY_KEYS_CMC:
                disabled: true
                key: key
                secretRef: gov-pay-keys-cmc
              GOV_PAY_KEYS_DIVORCE:
                disabled: true
                key: key
                secretRef: gov-pay-keys-divorce
              GOV_PAY_KEYS_PROBATE:
                disabled: true
                key: key
                secretRef: gov-pay-keys-probate
              GOV_PAY_KEYS_REFERENCE:
                disabled: true
                key: key
                secretRef: gov-pay-keys-reference
              LIBERATA_KEYS_OAUTH2_CLIENT_ID:
                disabled: true
                key: key
                secretRef: liberata-keys-oauth2-client-id
              LIBERATA_KEYS_OAUTH2_CLIENT_SECRET:
                disabled: true
                key: key
                secretRef: liberata-keys-oauth2-client-secret
              LIBERATA_KEYS_OAUTH2_PASSWORD:
                disabled: true
                key: key
                secretRef: liberata-keys-oauth2-password
              LIBERATA_KEYS_OAUTH2_USERNAME:
                disabled: true
                key: key
                secretRef: liberata-keys-oauth2-username
              PCI_PAL_ACCOUNT_ID_CMC:
                disabled: true
                key: key
                secretRef: pci-pal-account-id-cmc
              PCI_PAL_ACCOUNT_ID_DIVORCE:
                disabled: true
                key: key
                secretRef: pci-pal-account-id-divorce
              PCI_PAL_ACCOUNT_ID_PROBATE:
                disabled: true
                key: key
                secretRef: pci-pal-account-id-probate
              PCI_PAL_API_KEY:
                disabled: true
                key: key
                secretRef: pci-pal-api-key
              PCI_PAL_API_URL:
                disabled: true
                key: key
                secretRef: pci-pal-api-url
            smoketests:
              enabled: false
              image: hmctspublic.azurecr.io/spring-boot/template
            smoketestscron:
              enabled: false
              image: hmctspublic.azurecr.io/spring-boot/template
              schedule: 20 0/1 * * *
            testsConfig:
              cpuLimits: 1000m
              cpuRequests: 100m
              memoryLimits: 1024Mi
              memoryRequests: 256Mi
            useInterpodAntiAffinity: false
        postgresql:
          extraEnv: {}
          global:
            ccdAdminWebIngress: ""
            ccdApiGatewayIngress: ""
            ccdCaseManagementWebIngress: ""
            ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
            ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
            ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
            devMode: true
            dmStoreUrl: http://{{ .Release.Name }}-dm-store
            draftStoreUrl: http://{{ .Release.Name }}-draft-store
            emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
            idamApiUrl: ""
            idamWebUrl: ""
            paymentsUrl: http://{{ .Release.Name }}-payment-api
            postgresPassword: hmcts
            postgresUsername: hmcts
            postgresql: {}
            postgresqlHostName: '{{ .Release.Name }}-postgresql'
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            s2sUrl: http://{{ .Release.Name }}-s2s
            subscriptionId: 1c4f0704-a29e-403d-b719-b9
          image:
            debug: false
            pullPolicy: IfNotPresent
            registry: docker.io
            repository: bitnami/postgresql
            tag: 11.5.0-debian-9-r60
          initdbScripts:
            init.sql: |-
              CREATE DATABASE "fees-register" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
              CREATE DATABASE "bspayment" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
              CREATE DATABASE "data-store" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
              CREATE DATABASE "definition-store" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
              CREATE DATABASE "user-profile" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
              CREATE DATABASE "draftstore" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
          livenessProbe:
            enabled: true
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          master:
            affinity: {}
            extraVolumeMounts: []
            extraVolumes: []
            nodeSelector: {}
            podAnnotations: {}
            podLabels: {}
            tolerations: []
          metrics:
            enabled: false
            image:
              pullPolicy: IfNotPresent
              registry: docker.io
              repository: bitnami/postgres-exporter
              tag: 0.5.1-debian-9-r73
            livenessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            readinessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            securityContext:
              enabled: false
              runAsUser: 1001
            service:
              annotations:
                prometheus.io/port: "9187"
                prometheus.io/scrape: "true"
              loadBalancerIP: null
              type: ClusterIP
            serviceMonitor:
              additionalLabels: {}
              enabled: false
          networkPolicy:
            allowExternal: true
            enabled: false
          persistence:
            accessModes:
            - ReadWriteOnce
            annotations: {}
            enabled: false
            mountPath: /bitnami/postgresql
            size: 8Gi
            subPath: ""
          postgresqlDataDir: /bitnami/postgresql/data
          postgresqlDatabase: payment
          postgresqlPassword: hmcts
          postgresqlUsername: hmcts
          readinessProbe:
            enabled: true
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          replication:
            applicationName: my_application
            enabled: false
            numSynchronousReplicas: 0
            password: repl_password
            slaveReplicas: 1
            synchronousCommit: "off"
            user: repl_user
          resources:
            requests:
              cpu: 25m
              memory: 256Mi
          securityContext:
            enabled: true
            fsGroup: 1001
            runAsUser: 1001
          service:
            annotations: {}
            port: 5432
            type: ClusterIP
          serviceAccount:
            enabled: false
          slave:
            affinity: {}
            extraVolumeMounts: []
            extraVolumes: []
            nodeSelector: {}
            podAnnotations: {}
            podLabels: {}
            tolerations: []
          updateStrategy:
            type: RollingUpdate
          volumePermissions:
            enabled: true
            image:
              pullPolicy: Always
              registry: docker.io
              repository: bitnami/minideb
              tag: stretch
            securityContext:
              runAsUser: 0
        rpe-service-auth-provider:
          global:
            ccdAdminWebIngress: ""
            ccdApiGatewayIngress: ""
            ccdCaseManagementWebIngress: ""
            ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
            ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
            ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
            devMode: true
            dmStoreUrl: http://{{ .Release.Name }}-dm-store
            draftStoreUrl: http://{{ .Release.Name }}-draft-store
            emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
            idamApiUrl: ""
            idamWebUrl: ""
            paymentsUrl: http://{{ .Release.Name }}-payment-api
            postgresPassword: hmcts
            postgresUsername: hmcts
            postgresqlHostName: '{{ .Release.Name }}-postgresql'
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            s2sUrl: http://{{ .Release.Name }}-s2s
            subscriptionId: 1c4f0704-a29e-403d-b719-b9
          java:
            aadIdentityName: rpe
            applicationPort: 8489
            cpuLimits: 1500m
            cpuRequests: 250m
            devApplicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
            devcpuLimits: 2500m
            devcpuRequests: 250m
            devmemoryLimits: 1024Mi
            devmemoryRequests: 512Mi
            environment:
              MICROSERVICEKEYS_API_GW: AAAAAAAAAAA
              MICROSERVICEKEYS_CCPAY_BUBBLE: BBBBBBBBBB
              TESTING_SUPPORT_ENABLED: "true"
            functionaltests:
              enabled: false
              image: hmctspublic.azurecr.io/spring-boot/template
            functionaltestscron:
              enabled: false
              image: hmctspublic.azurecr.io/spring-boot/template
              schedule: 30 0/6 * * *
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              enableKeyVaults: false
              functionaltestscron:
                enabled: true
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              smoketestscron:
                enabled: true
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            image: hmctspublic.azurecr.io/rpe/service-auth-provider:latest
            ingressClass: traefik
            ingressHost: ""
            keyVaults:
              s2s:
                resourceGroup: rpe-service-auth-provider
                secrets:
                - jwt-key
                - microservicekey-ccd-admin
                - microservicekey-ccd-data
                - microservicekey-ccd-definition
                - microservicekey-ccd-definition-designer
                - microservicekey-ccd-gw
                - microservicekey-ccd-ps
                - microservicekey-cmc
                - microservicekey-cmcLegalFrontend
                - microservicekey-cmcClaimStore
                - microservicekey-cmc-claim-external-api
                - microservicekey-divorce
                - microservicekey-divorce-frontend
                - microservicekey-divorceCcdSubmission
                - microservicekey-divorceCcdValidation
                - microservicekey-divorceDocumentUpload
                - microservicekey-divorceDocumentGenerator
                - microservicekey-draftStoreTests
                - microservicekey-platformJobScheduler
                - microservicekey-reference
                - microservicekey-sscs
                - microservicekey-sscs-bulkscan
                - microservicekey-sscs-tribunals-case
                - microservicekey-probate-frontend
                - microservicekey-probate-backend
                - microservicekey-send-letter-consumer
                - microservicekey-send-letter-tests
                - microservicekey-em-gw
                - microservicekey-finrem-document-generator
                - microservicekey-finrem-notification-service
                - microservicekey-finrem-case-orchestration
                - microservicekey-finrem-payment-service
                - microservicekey-finrem-ccd-data-migrator
                - microservicekey-jui-webapp
                - microservicekey-pui-webapp
                - microservicekey-xui-webapp
                - microservicekey-coh-cor
                - microservicekey-bulk-scan-processor
                - microservicekey-bulk-scan-processor-tests
                - microservicekey-bulk-scan-orchestrator
                - microservicekey-bulk-scan-payment-processor
                - microservicekey-bulk-scan-ccd-sample-app
                - microservicekey-bulk-scan-sample-app-tests
                - microservicekey-bar-api
                - microservicekey-api-gw
                - microservicekey-em-annotation-app
                - microservicekey-em-npa-app
                - microservicekey-cet
                - microservicekey-cet-frontend
                - microservicekey-fpl-case-service
                - microservicekey-iac
                - microservicekey-em-stitching-api
                - microservicekey-em-ccd-orchestrator
                - microservicekey-ccpay-bubble
                - microservicekey-dg-template-management
                - microservicekey-dg-docassembly-api
                - microservicekey-rd-professional-api
                - microservicekey-rd-user-profile-api
                - microservicekey-ethos-repl-service
                - microservicekey-employment-tribunals
                - microservicekey-am-accessmgmt-api
                - microservicekey-ctsc-work-allocation
            livenessDelay: 30
            livenessFailureThreshold: 3
            livenessPath: /health/liveness
            livenessPeriod: 15
            livenessTimeout: 3
            memoryLimits: 2048Mi
            memoryRequests: 512Mi
            pdb:
              enabled: true
              maxUnavailable: 50%
            postgresql:
              enabled: false
              extraEnv: {}
              global:
                ccdAdminWebIngress: ""
                ccdApiGatewayIngress: ""
                ccdCaseManagementWebIngress: ""
                ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
                ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
                ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
                devMode: true
                dmStoreUrl: http://{{ .Release.Name }}-dm-store
                draftStoreUrl: http://{{ .Release.Name }}-draft-store
                emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
                enableKeyVaults: false
                functionaltestscron:
                  enabled: true
                idamApiUrl: ""
                idamWebUrl: ""
                paymentsUrl: http://{{ .Release.Name }}-payment-api
                postgresPassword: hmcts
                postgresUsername: hmcts
                postgresql: {}
                postgresqlHostName: '{{ .Release.Name }}-postgresql'
                postgresqlPassword: hmcts
                postgresqlUsername: hmcts
                s2sUrl: http://{{ .Release.Name }}-s2s
                smoketestscron:
                  enabled: true
                subscriptionId: 1c4f0704-a29e-403d-b719-b9
              image:
                debug: false
                pullPolicy: IfNotPresent
                registry: docker.io
                repository: bitnami/postgresql
                tag: 11.5.0-debian-9-r60
              livenessProbe:
                enabled: true
                failureThreshold: 6
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              master:
                affinity: {}
                extraVolumeMounts: []
                extraVolumes: []
                nodeSelector: {}
                podAnnotations: {}
                podLabels: {}
                tolerations: []
              metrics:
                enabled: false
                image:
                  pullPolicy: IfNotPresent
                  registry: docker.io
                  repository: bitnami/postgres-exporter
                  tag: 0.5.1-debian-9-r73
                livenessProbe:
                  enabled: true
                  failureThreshold: 6
                  initialDelaySeconds: 5
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                readinessProbe:
                  enabled: true
                  failureThreshold: 6
                  initialDelaySeconds: 5
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 5
                securityContext:
                  enabled: false
                  runAsUser: 1001
                service:
                  annotations:
                    prometheus.io/port: "9187"
                    prometheus.io/scrape: "true"
                  loadBalancerIP: null
                  type: ClusterIP
                serviceMonitor:
                  additionalLabels: {}
                  enabled: false
              networkPolicy:
                allowExternal: true
                enabled: false
              persistence:
                accessModes:
                - ReadWriteOnce
                annotations: {}
                enabled: false
                mountPath: /bitnami/postgresql
                size: 8Gi
                subPath: ""
              postgresqlDataDir: /bitnami/postgresql/data
              postgresqlDatabase: javadatabase
              postgresqlPassword: javapassword
              postgresqlUsername: javapostgres
              readinessProbe:
                enabled: true
                failureThreshold: 6
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              replication:
                applicationName: my_application
                enabled: false
                numSynchronousReplicas: 0
                password: repl_password
                slaveReplicas: 1
                synchronousCommit: "off"
                user: repl_user
              resources:
                requests:
                  cpu: 250m
                  memory: 256Mi
              securityContext:
                enabled: true
                fsGroup: 1001
                runAsUser: 1001
              service:
                annotations: {}
                port: 5432
                type: ClusterIP
              serviceAccount:
                enabled: false
              slave:
                affinity: {}
                extraVolumeMounts: []
                extraVolumes: []
                nodeSelector: {}
                podAnnotations: {}
                podLabels: {}
                tolerations: []
              updateStrategy:
                type: RollingUpdate
              volumePermissions:
                enabled: true
                image:
                  pullPolicy: Always
                  registry: docker.io
                  repository: bitnami/minideb
                  tag: stretch
                securityContext:
                  runAsUser: 0
            prometheus:
              enabled: false
              path: /prometheus
            readinessDelay: 30
            readinessPath: /health
            readinessPeriod: 15
            readinessTimeout: 3
            registerAdditionalDns:
              enabled: false
            releaseNameOverride: '{{ .Release.Name }}-s2s'
            replicas: 1
            smoketests:
              enabled: false
              image: hmctspublic.azurecr.io/spring-boot/template
            smoketestscron:
              enabled: false
              image: hmctspublic.azurecr.io/spring-boot/template
              schedule: 20 0/1 * * *
            testsConfig:
              cpuLimits: 1000m
              cpuRequests: 100m
              memoryLimits: 1024Mi
              memoryRequests: 256Mi
            useInterpodAntiAffinity: false
      dm-store:
        blobstorage:
          enabled: false
          global:
            ccdAdminWebIngress: ""
            ccdApiGatewayIngress: ""
            ccdCaseManagementWebIngress: ""
            ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
            ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
            ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
            devMode: true
            dmStoreUrl: http://{{ .Release.Name }}-dm-store
            draftStoreUrl: http://{{ .Release.Name }}-draft-store
            emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
            idamApiUrl: ""
            idamWebUrl: ""
            paymentsUrl: http://{{ .Release.Name }}-payment-api
            postgresPassword: hmcts
            postgresUsername: hmcts
            postgresqlHostName: '{{ .Release.Name }}-postgresql'
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            s2sUrl: http://{{ .Release.Name }}-s2s
            subscriptionId: 1c4f0704-a29e-403d-b719-b9
          location: uksouth
          resourceGroup: dm-store-aks
          setup:
            containers:
            - dm-docstore
          teamName: CCD
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: true
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresqlHostName: '{{ .Release.Name }}-postgresql'
          postgresqlPassword: hmcts
          postgresqlUsername: hmcts
          s2sUrl: http://{{ .Release.Name }}-s2s
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        java:
          aadIdentityName: dm-store
          applicationPort: "4603"
          cpuLimits: 1500m
          cpuRequests: 250m
          devApplicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
          devcpuLimits: 2500m
          devcpuRequests: 250m
          devmemoryLimits: 1024Mi
          devmemoryRequests: 512Mi
          environment:
            BLOBSTORE_MIGRATE_CCD_PUBLIC_KEY: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDiQ//gc/G53d9dLCtf123fIYo49gUySuJuxOcw2GtieWTMSy+O7RNtsAIjVf3mCOdDNuN69tZNPEWMdaW8n11s9MwYFahtxDecyn0KIP9MvPsfSMSbxhp/f7kfbdB/H/S5eYea66JTyeJS6uNd76RdHttx0mLO30ZkRcXB25c2SIXhRYsdoeKS5GXHDdNejkQM0S/Ev94x2UunApmYHjWN1XcDhsEsAeF4WHnvYh2XiMn9vHY44AqvbWLlAmCgzaXpz8Xhl0fO7jDKSeReDyuM3UTMaiFFaxuvliGol7aIXq/aVe/miiD2SLxHZ6RxAPW80bhXrzJMTLTCqhCEhzfv
              someone@somewhere.sometime
            BLOBSTORE_MIGRATE_CCD_PUBLIC_KEY_REQUIRED: "false"
            BLOBSTORE_MIGRATE_CCD_SECRET: y2hahvdZ9evcTVq2
            DM_MULTIPART_WHITELIST: image/jpeg,application/pdf,image/tiff,image/png,image/bmp,text/plain,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/vnd.openxmlformats-officedocument.wordprocessingml.template,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/vnd.openxmlformats-officedocument.spreadsheetml.template,application/vnd.ms-powerpoint,application/vnd.openxmlformats-officedocument.presentationml.presentation,application/vnd.openxmlformats-officedocument.presentationml.template,application/vnd.openxmlformats-officedocument.presentationml.slideshow,application/rtf,text/csv
            DM_MULTIPART_WHITELIST_EXT: .jpg,.jpeg,.bmp,.tif,.tiff,.png,.pdf,.txt,.doc,.dot,.docx,.dotx,.xls,.xlt,.xla,.xlsx,.xltx,.xlsb,.ppt,.pot,.pps,.ppa,.pptx,.potx,.ppsx,.png,.pdf,.rtf,.csv
            ENABLE_AZURE_STORAGE_CONTAINER: "true"
            ENABLE_DB_MIGRATE: "true"
            ENABLE_DELETE: "true"
            ENABLE_DOCUMENT_AND_METADATA_UPLOAD: "false"
            ENABLE_FOLDER_API: "true"
            ENABLE_IDAM_HEALTH_CHECK: "false"
            ENABLE_METADATA_SEARCH: "true"
            ENABLE_THUMBNAIL: "true"
            ENABLE_TTL: "false"
            IDAM_S2S_BASE_URI: '{{ tpl .Values.global.s2sUrl $}}'
            IDAM_USER_BASE_URI: '{{ tpl .Values.global.idamApiUrl $}}'
            JSON_CONSOLE_PRETTY_PRINT: "false"
            LOG_LEVEL_DM: INFO
            LOG_LEVEL_SPRING_WEB: INFO
            LOG_OUTPUT: single
            MAX_ACTIVE_DB_CONNECTIONS: "50"
            MAX_FILE_SIZE: 100MB
            PACKAGES_NAME: dm-store
            PACKAGES_PROJECT: evidence
            POSTGRES_STORAGE_ENABLED: "false"
            REFORM_SERVICE_NAME: dm-store
            REFORM_SERVICE_TYPE: java
            REFORM_TEAM: evidence
            ROOT_LOGGING_LEVEL: INFO
            SHOW_SQL: "false"
            SPRING_DATASOURCE_PASSWORD: '{{ tpl .Values.global.postgresPassword $}}'
            SPRING_DATASOURCE_URL: jdbc:postgresql://{{ .Release.Name }}-postgresql:5432/evidence?ssl=disable
            SPRING_DATASOURCE_USERNAME: '{{ tpl .Values.global.postgresUsername $}}'
            STORAGE_CONTAINER_DOCUMENT_CONTAINER_NAME: dm-store
            STORAGEACCOUNT_PRIMARY_CONNECTION_STRING: DefaultEndpointsProtocol=https;AccountName=$(STORAGE_ACCOUNT_NAME);AccountKey=$(STORAGE_ACCOUNT_KEY);EndpointSuffix=core.windows.net
          functionaltests:
            enabled: false
            image: hmctspublic.azurecr.io/spring-boot/template
          functionaltestscron:
            enabled: false
            image: hmctspublic.azurecr.io/spring-boot/template
            schedule: 30 0/6 * * *
          global:
            ccdAdminWebIngress: ""
            ccdApiGatewayIngress: ""
            ccdCaseManagementWebIngress: ""
            ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
            ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
            ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
            devMode: true
            dmStoreUrl: http://{{ .Release.Name }}-dm-store
            draftStoreUrl: http://{{ .Release.Name }}-draft-store
            emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
            enableKeyVaults: false
            functionaltestscron:
              enabled: true
            idamApiUrl: ""
            idamWebUrl: ""
            paymentsUrl: http://{{ .Release.Name }}-payment-api
            postgresPassword: hmcts
            postgresUsername: hmcts
            postgresqlHostName: '{{ .Release.Name }}-postgresql'
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            s2sUrl: http://{{ .Release.Name }}-s2s
            smoketestscron:
              enabled: true
            subscriptionId: 1c4f0704-a29e-403d-b719-b9
          image: hmctspublic.azurecr.io/dm/store:latest
          ingressClass: traefik
          keyVaults:
            dm:
              resourceGroup: dm-shared
              secrets:
              - AppInsightsInstrumentationKey
              - dm-store-storage-account-primary-connection-string
              - dm-store-storage-account-secondary-connection-string
              - store-POSTGRES-PASS
          livenessDelay: 180
          livenessFailureThreshold: 3
          livenessPath: /health/liveness
          livenessPeriod: 15
          livenessTimeout: 3
          memoryLimits: 2048Mi
          memoryRequests: 512Mi
          pdb:
            enabled: true
            maxUnavailable: 50%
          postgresql:
            enabled: false
            extraEnv: {}
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              enableKeyVaults: false
              functionaltestscron:
                enabled: true
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresql: {}
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              smoketestscron:
                enabled: true
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            image:
              debug: false
              pullPolicy: IfNotPresent
              registry: docker.io
              repository: bitnami/postgresql
              tag: 11.5.0-debian-9-r60
            livenessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            master:
              affinity: {}
              extraVolumeMounts: []
              extraVolumes: []
              nodeSelector: {}
              podAnnotations: {}
              podLabels: {}
              tolerations: []
            metrics:
              enabled: false
              image:
                pullPolicy: IfNotPresent
                registry: docker.io
                repository: bitnami/postgres-exporter
                tag: 0.5.1-debian-9-r73
              livenessProbe:
                enabled: true
                failureThreshold: 6
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              readinessProbe:
                enabled: true
                failureThreshold: 6
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              securityContext:
                enabled: false
                runAsUser: 1001
              service:
                annotations:
                  prometheus.io/port: "9187"
                  prometheus.io/scrape: "true"
                loadBalancerIP: null
                type: ClusterIP
              serviceMonitor:
                additionalLabels: {}
                enabled: false
            nameOverride: dm-store-db
            networkPolicy:
              allowExternal: true
              enabled: false
            persistence:
              accessModes:
              - ReadWriteOnce
              annotations: {}
              enabled: false
              mountPath: /bitnami/postgresql
              size: 8Gi
              subPath: ""
            postgresqlDataDir: /bitnami/postgresql/data
            postgresqlDatabase: javadatabase
            postgresqlPassword: evidence
            postgresqlUsername: evidence
            readinessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            replication:
              applicationName: my_application
              enabled: false
              numSynchronousReplicas: 0
              password: repl_password
              slaveReplicas: 1
              synchronousCommit: "off"
              user: repl_user
            resources:
              requests:
                cpu: 250m
                memory: 256Mi
            securityContext:
              enabled: true
              fsGroup: 1001
              runAsUser: 1001
            service:
              annotations: {}
              port: 5432
              type: ClusterIP
            serviceAccount:
              enabled: false
            slave:
              affinity: {}
              extraVolumeMounts: []
              extraVolumes: []
              nodeSelector: {}
              podAnnotations: {}
              podLabels: {}
              tolerations: []
            updateStrategy:
              type: RollingUpdate
            volumePermissions:
              enabled: true
              image:
                pullPolicy: Always
                registry: docker.io
                repository: bitnami/minideb
                tag: stretch
              securityContext:
                runAsUser: 0
          prometheus:
            enabled: false
            path: /prometheus
          readinessDelay: 180
          readinessPath: /health
          readinessPeriod: 15
          readinessTimeout: 3
          registerAdditionalDns:
            enabled: false
          releaseNameOverride: '{{ .Release.Name }}-dm-store'
          replicas: 1
          secrets:
            STORAGE_ACCOUNT_KEY:
              key: accessKey
              secretRef: storage-secret-{{ .Release.Name }}-blobstorage
            STORAGE_ACCOUNT_NAME:
              key: storageAccountName
              secretRef: storage-secret-{{ .Release.Name }}-blobstorage
          smoketests:
            enabled: false
            image: hmctspublic.azurecr.io/spring-boot/template
          smoketestscron:
            enabled: false
            image: hmctspublic.azurecr.io/spring-boot/template
            schedule: 20 0/1 * * *
          testsConfig:
            cpuLimits: 1000m
            cpuRequests: 100m
            memoryLimits: 1024Mi
            memoryRequests: 256Mi
          useInterpodAntiAffinity: false
      draft-store-service:
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: true
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresqlHostName: '{{ .Release.Name }}-postgresql'
          postgresqlPassword: hmcts
          postgresqlUsername: hmcts
          s2sUrl: http://{{ .Release.Name }}-s2s
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        java:
          aadIdentityName: rpe
          applicationPort: 8800
          cpuLimits: 1500m
          cpuRequests: 250m
          devApplicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
          devcpuLimits: 2500m
          devcpuRequests: 250m
          devmemoryLimits: 1024Mi
          devmemoryRequests: 512Mi
          environment:
            DRAFT_STORE_DB_CONN_OPTIONS: ""
            DRAFT_STORE_DB_HOST: '{{ .Release.Name }}-postgresql'
            DRAFT_STORE_DB_NAME: draftstore
            DRAFT_STORE_DB_PASSWORD: '{{ tpl .Values.global.postgresPassword $}}'
            DRAFT_STORE_DB_PORT: "5432"
            DRAFT_STORE_DB_USER_NAME: '{{ tpl .Values.global.postgresUsername $}}'
            IDAM_URL: '{{ tpl .Values.global.idamApiUrl $}}'
            LOGBACK_REQUIRE_ALERT_LEVEL: "false"
            LOGBACK_REQUIRE_ERROR_CODE: "false"
            RUN_DB_MIGRATION_ON_STARTUP: "true"
            S2S_URL: '{{ tpl .Values.global.s2sUrl $}}'
            SPRING_CLOUD_PROPERTIESVOLUME_ENABLED: false
          functionaltests:
            enabled: false
            image: hmctspublic.azurecr.io/spring-boot/template
          functionaltestscron:
            enabled: false
            image: hmctspublic.azurecr.io/spring-boot/template
            schedule: 30 0/6 * * *
          global:
            ccdAdminWebIngress: ""
            ccdApiGatewayIngress: ""
            ccdCaseManagementWebIngress: ""
            ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
            ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
            ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
            devMode: true
            dmStoreUrl: http://{{ .Release.Name }}-dm-store
            draftStoreUrl: http://{{ .Release.Name }}-draft-store
            emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
            enableKeyVaults: false
            functionaltestscron:
              enabled: true
            idamApiUrl: ""
            idamWebUrl: ""
            paymentsUrl: http://{{ .Release.Name }}-payment-api
            postgresPassword: hmcts
            postgresUsername: hmcts
            postgresqlHostName: '{{ .Release.Name }}-postgresql'
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            s2sUrl: http://{{ .Release.Name }}-s2s
            smoketestscron:
              enabled: true
            subscriptionId: 1c4f0704-a29e-403d-b719-b9
          image: hmctspublic.azurecr.io/draft-store/service:latest
          ingressClass: traefik
          ingressHost: ""
          keyVaults: null
          livenessDelay: 240
          livenessFailureThreshold: 3
          livenessPath: /health/liveness
          livenessPeriod: 15
          livenessTimeout: 3
          memoryLimits: 2048Mi
          memoryRequests: 512Mi
          pdb:
            enabled: true
            maxUnavailable: 50%
          postgresql:
            enabled: false
            extraEnv: {}
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              enableKeyVaults: false
              functionaltestscron:
                enabled: true
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresql: {}
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              smoketestscron:
                enabled: true
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            image:
              debug: false
              pullPolicy: IfNotPresent
              registry: docker.io
              repository: bitnami/postgresql
              tag: 11.5.0-debian-9-r60
            livenessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            master:
              affinity: {}
              extraVolumeMounts: []
              extraVolumes: []
              nodeSelector: {}
              podAnnotations: {}
              podLabels: {}
              tolerations: []
            metrics:
              enabled: false
              image:
                pullPolicy: IfNotPresent
                registry: docker.io
                repository: bitnami/postgres-exporter
                tag: 0.5.1-debian-9-r73
              livenessProbe:
                enabled: true
                failureThreshold: 6
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              readinessProbe:
                enabled: true
                failureThreshold: 6
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              securityContext:
                enabled: false
                runAsUser: 1001
              service:
                annotations:
                  prometheus.io/port: "9187"
                  prometheus.io/scrape: "true"
                loadBalancerIP: null
                type: ClusterIP
              serviceMonitor:
                additionalLabels: {}
                enabled: false
            networkPolicy:
              allowExternal: true
              enabled: false
            persistence:
              accessModes:
              - ReadWriteOnce
              annotations: {}
              enabled: false
              mountPath: /bitnami/postgresql
              size: 8Gi
              subPath: ""
            postgresqlDataDir: /bitnami/postgresql/data
            postgresqlDatabase: javadatabase
            postgresqlPassword: javapassword
            postgresqlUsername: javapostgres
            readinessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            replication:
              applicationName: my_application
              enabled: false
              numSynchronousReplicas: 0
              password: repl_password
              slaveReplicas: 1
              synchronousCommit: "off"
              user: repl_user
            resources:
              requests:
                cpu: 250m
                memory: 256Mi
            securityContext:
              enabled: true
              fsGroup: 1001
              runAsUser: 1001
            service:
              annotations: {}
              port: 5432
              type: ClusterIP
            serviceAccount:
              enabled: false
            slave:
              affinity: {}
              extraVolumeMounts: []
              extraVolumes: []
              nodeSelector: {}
              podAnnotations: {}
              podLabels: {}
              tolerations: []
            updateStrategy:
              type: RollingUpdate
            volumePermissions:
              enabled: true
              image:
                pullPolicy: Always
                registry: docker.io
                repository: bitnami/minideb
                tag: stretch
              securityContext:
                runAsUser: 0
          prometheus:
            enabled: false
            path: /prometheus
          readinessDelay: 240
          readinessPath: /health
          readinessPeriod: 15
          readinessTimeout: 3
          registerAdditionalDns:
            enabled: false
          releaseNameOverride: '{{ .Release.Name }}-draft-store'
          replicas: 1
          smoketests:
            enabled: false
            image: hmctspublic.azurecr.io/spring-boot/template
          smoketestscron:
            enabled: false
            image: hmctspublic.azurecr.io/spring-boot/template
            schedule: 20 0/1 * * *
          testsConfig:
            cpuLimits: 1000m
            cpuRequests: 100m
            memoryLimits: 1024Mi
            memoryRequests: 256Mi
          useInterpodAntiAffinity: false
      em-anno:
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: true
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresqlHostName: '{{ .Release.Name }}-postgresql'
          postgresqlPassword: hmcts
          postgresqlUsername: hmcts
          s2sUrl: http://{{ .Release.Name }}-s2s
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        java:
          aadIdentityName: em
          applicationPort: 8080
          cpuLimits: 1500m
          cpuRequests: 250m
          devApplicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
          devcpuLimits: 2500m
          devcpuRequests: 25m
          devmemoryLimits: 1024Mi
          devmemoryRequests: 512Mi
          environment:
            DM_STORE_APP_URL: '{{ tpl .Values.global.dmStoreUrl $}}'
            ENABLE_IDAM_HEALTH_CHECK: false
            ENABLE_LIQUIBASE: "true"
            ENABLE_S2S_HEALTH_CHECK: false
            ENDPOINTS_HEALTH_SENSITIVE: false
            ENDPOINTS_INFO_SENSITIVE: false
            IDAM_API_BASE_URI: '{{ tpl .Values.global.idamApiUrl $}}'
            IDAM_S2S_AUTH_URL: http://rpe-service-auth-provider-{{ .Values.global.environment
              }}.service.core-compute-{{ .Values.global.environment }}.internal
            JSON_CONSOLE_PRETTY_PRINT: false
            LOG_LEVEL_DM: INFO
            LOG_LEVEL_SPRING_WEB: INFO
            LOG_OUTPUT: single
            REFORM_SERVICE_NAME: rpa-em-annotation-api
            REFORM_TEAM: rpa-em-annotation-api
            ROOT_LOGGING_LEVEL: INFO
            RUN_DB_MIGRATION_ON_STARTUP: false
            S2S_BASE_URI: '{{ tpl .Values.global.s2sUrl $}}'
            SERVER_PORT: 8080
            SHOW_SQL: false
            SPRING_DATASOURCE_PASSWORD: '{{ tpl .Values.global.postgresPassword $}}'
            SPRING_DATASOURCE_URL: jdbc:postgresql://{{ .Release.Name }}-postgresql:5432/annotation?ssl=disable
            SPRING_DATASOURCE_USERNAME: '{{ tpl .Values.global.postgresUsername $}}'
          functionaltests:
            backoffLimit: 2
            enabled: false
            kind: Job
          functionaltestscron:
            backoffLimit: 2
            enabled: false
            kind: CronJob
          global:
            ccdAdminWebIngress: ""
            ccdApiGatewayIngress: ""
            ccdCaseManagementWebIngress: ""
            ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
            ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
            ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
            devMode: true
            dmStoreUrl: http://{{ .Release.Name }}-dm-store
            draftStoreUrl: http://{{ .Release.Name }}-draft-store
            emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
            enableKeyVaults: false
            idamApiUrl: ""
            idamWebUrl: ""
            paymentsUrl: http://{{ .Release.Name }}-payment-api
            postgresPassword: hmcts
            postgresUsername: hmcts
            postgresqlHostName: '{{ .Release.Name }}-postgresql'
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            s2sUrl: http://{{ .Release.Name }}-s2s
            subscriptionId: 1c4f0704-a29e-403d-b719-b9
          image: hmctspublic.azurecr.io/em/anno:latest
          job:
            backoffLimit: 6
            cpuLimits: 2500m
            cpuRequests: 25m
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              enableKeyVaults: false
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            kind: Job
            memoryLimits: 1024Mi
            memoryRequests: 512Mi
            restartPolicy: OnFailure
          keyVaults:
            em-anno:
              secrets:
              - microservicekey-em-annotation-app
              - AppInsightsInstrumentationKey
              - anno-POSTGRES-PASS
          livenessDelay: 180
          livenessFailureThreshold: 3
          livenessPath: /health/liveness
          livenessPeriod: 15
          livenessTimeout: 3
          memoryLimits: 2048Mi
          memoryRequests: 512Mi
          pdb:
            enabled: true
            maxUnavailable: 50%
          postgresql:
            enabled: false
            extraEnv: {}
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              enableKeyVaults: false
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresql: {}
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            image:
              debug: false
              pullPolicy: IfNotPresent
              registry: docker.io
              repository: bitnami/postgresql
              tag: 11.5.0-debian-9-r60
            livenessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            master:
              affinity: {}
              extraVolumeMounts: []
              extraVolumes: []
              nodeSelector: {}
              podAnnotations: {}
              podLabels: {}
              tolerations: []
            metrics:
              enabled: false
              image:
                pullPolicy: IfNotPresent
                registry: docker.io
                repository: bitnami/postgres-exporter
                tag: 0.5.1-debian-9-r73
              livenessProbe:
                enabled: true
                failureThreshold: 6
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              readinessProbe:
                enabled: true
                failureThreshold: 6
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              securityContext:
                enabled: false
                runAsUser: 1001
              service:
                annotations:
                  prometheus.io/port: "9187"
                  prometheus.io/scrape: "true"
                loadBalancerIP: null
                type: ClusterIP
              serviceMonitor:
                additionalLabels: {}
                enabled: false
            nameOverride: em-anno-db
            networkPolicy:
              allowExternal: true
              enabled: false
            persistence:
              accessModes:
              - ReadWriteOnce
              annotations: {}
              enabled: false
              mountPath: /bitnami/postgresql
              size: 8Gi
              subPath: ""
            postgresqlDataDir: /bitnami/postgresql/data
            postgresqlDatabase: javadatabase
            postgresqlPassword: emannotationapp
            postgresqlUsername: emannotationapp
            readinessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            replication:
              applicationName: my_application
              enabled: false
              numSynchronousReplicas: 0
              password: repl_password
              slaveReplicas: 1
              synchronousCommit: "off"
              user: repl_user
            resources:
              requests:
                cpu: 250m
                memory: 256Mi
            securityContext:
              enabled: true
              fsGroup: 1001
              runAsUser: 1001
            service:
              annotations: {}
              port: 5432
              type: ClusterIP
            serviceAccount:
              enabled: false
            slave:
              affinity: {}
              extraVolumeMounts: []
              extraVolumes: []
              nodeSelector: {}
              podAnnotations: {}
              podLabels: {}
              tolerations: []
            updateStrategy:
              type: RollingUpdate
            volumePermissions:
              enabled: true
              image:
                pullPolicy: Always
                registry: docker.io
                repository: bitnami/minideb
                tag: stretch
              securityContext:
                runAsUser: 0
          prometheus:
            enabled: false
            path: /prometheus
          readinessDelay: 180
          readinessPath: /health
          readinessPeriod: 15
          readinessTimeout: 3
          registerAdditionalDns:
            enabled: false
          releaseNameOverride: '{{ .Release.Name }}-em-annotation'
          replicas: 1
          smoketests:
            backoffLimit: 2
            enabled: false
            kind: Job
          smoketestscron:
            backoffLimit: 2
            enabled: false
            kind: CronJob
          useInterpodAntiAffinity: false
      global:
        ccdAdminWebIngress: ""
        ccdApiGatewayIngress: ""
        ccdCaseManagementWebIngress: ""
        ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
        ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
        ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
        devMode: true
        dmStoreUrl: http://{{ .Release.Name }}-dm-store
        draftStoreUrl: http://{{ .Release.Name }}-draft-store
        emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
        idamApiUrl: ""
        idamWebUrl: ""
        paymentsUrl: http://{{ .Release.Name }}-payment-api
        postgresPassword: hmcts
        postgresUsername: hmcts
        postgresqlHostName: '{{ .Release.Name }}-postgresql'
        postgresqlPassword: hmcts
        postgresqlUsername: hmcts
        s2sUrl: http://{{ .Release.Name }}-s2s
        subscriptionId: 1c4f0704-a29e-403d-b719-b9
      postgresql:
        extraEnv: {}
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: true
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresql: {}
          postgresqlHostName: '{{ .Release.Name }}-postgresql'
          postgresqlPassword: hmcts
          postgresqlUsername: hmcts
          s2sUrl: http://{{ .Release.Name }}-s2s
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        image:
          debug: false
          pullPolicy: IfNotPresent
          registry: docker.io
          repository: bitnami/postgresql
          tag: 11.5.0-debian-9-r60
        initdbScripts:
          init.sql: |-
            CREATE DATABASE "data-store" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
            CREATE DATABASE "definition-store" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
            CREATE DATABASE "user-profile" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
            CREATE DATABASE "draftstore" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
            CREATE DATABASE "payment" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
            CREATE DATABASE "evidence" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
            CREATE DATABASE "annotation" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
        livenessProbe:
          enabled: true
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        master:
          affinity: {}
          extraVolumeMounts: []
          extraVolumes: []
          nodeSelector: {}
          podAnnotations: {}
          podLabels: {}
          tolerations: []
        metrics:
          enabled: false
          image:
            pullPolicy: IfNotPresent
            registry: docker.io
            repository: bitnami/postgres-exporter
            tag: 0.5.1-debian-9-r73
          livenessProbe:
            enabled: true
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            enabled: true
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          securityContext:
            enabled: false
            runAsUser: 1001
          service:
            annotations:
              prometheus.io/port: "9187"
              prometheus.io/scrape: "true"
            loadBalancerIP: null
            type: ClusterIP
          serviceMonitor:
            additionalLabels: {}
            enabled: false
        networkPolicy:
          allowExternal: true
          enabled: false
        persistence:
          accessModes:
          - ReadWriteOnce
          annotations: {}
          enabled: true
          mountPath: /bitnami/postgresql
          size: 8Gi
          subPath: ""
        postgresqlDataDir: /bitnami/postgresql/data
        postgresqlDatabase: ccd
        postgresqlPassword: hmcts
        postgresqlUsername: hmcts
        readinessProbe:
          enabled: true
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        replication:
          applicationName: my_application
          enabled: false
          numSynchronousReplicas: 0
          password: repl_password
          slaveReplicas: 1
          synchronousCommit: "off"
          user: repl_user
        resources:
          requests:
            cpu: 25m
            memory: 256Mi
        securityContext:
          enabled: true
          fsGroup: 1001
          runAsUser: 1001
        service:
          annotations: {}
          port: 5432
          type: ClusterIP
        serviceAccount:
          enabled: false
        slave:
          affinity: {}
          extraVolumeMounts: []
          extraVolumes: []
          nodeSelector: {}
          podAnnotations: {}
          podLabels: {}
          tolerations: []
        updateStrategy:
          type: RollingUpdate
        volumePermissions:
          enabled: true
          image:
            pullPolicy: Always
            registry: docker.io
            repository: bitnami/minideb
            tag: stretch
          securityContext:
            runAsUser: 0
      rpe-service-auth-provider:
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: true
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresqlHostName: '{{ .Release.Name }}-postgresql'
          postgresqlPassword: hmcts
          postgresqlUsername: hmcts
          s2sUrl: http://{{ .Release.Name }}-s2s
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        java:
          aadIdentityName: rpe
          applicationPort: 8489
          cpuLimits: 1500m
          cpuRequests: 250m
          devApplicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
          devcpuLimits: 2500m
          devcpuRequests: 250m
          devmemoryLimits: 1024Mi
          devmemoryRequests: 512Mi
          environment:
            MICROSERVICEKEYS_CCD_ADMIN: AAAAAAAAAAAAAAAA
            MICROSERVICEKEYS_CCD_DATA: AAAAAAAAAAAAAAAA
            MICROSERVICEKEYS_CCD_DEFINITION: AAAAAAAAAAAAAAAA
            MICROSERVICEKEYS_CCD_GW: AAAAAAAAAAAAAAAA
            MICROSERVICEKEYS_CCD_PS: AAAAAAAAAAAAAAAA
            TESTING_SUPPORT_ENABLED: "true"
          functionaltests:
            enabled: false
            image: hmctspublic.azurecr.io/spring-boot/template
          functionaltestscron:
            enabled: false
            image: hmctspublic.azurecr.io/spring-boot/template
            schedule: 30 0/6 * * *
          global:
            ccdAdminWebIngress: ""
            ccdApiGatewayIngress: ""
            ccdCaseManagementWebIngress: ""
            ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
            ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
            ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
            devMode: true
            dmStoreUrl: http://{{ .Release.Name }}-dm-store
            draftStoreUrl: http://{{ .Release.Name }}-draft-store
            emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
            enableKeyVaults: false
            functionaltestscron:
              enabled: true
            idamApiUrl: ""
            idamWebUrl: ""
            paymentsUrl: http://{{ .Release.Name }}-payment-api
            postgresPassword: hmcts
            postgresUsername: hmcts
            postgresqlHostName: '{{ .Release.Name }}-postgresql'
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            s2sUrl: http://{{ .Release.Name }}-s2s
            smoketestscron:
              enabled: true
            subscriptionId: 1c4f0704-a29e-403d-b719-b9
          image: hmctspublic.azurecr.io/rpe/service-auth-provider:latest
          ingressClass: traefik
          ingressHost: ""
          keyVaults: null
          livenessDelay: 180
          livenessFailureThreshold: 3
          livenessPath: /health/liveness
          livenessPeriod: 15
          livenessTimeout: 3
          memoryLimits: 2048Mi
          memoryRequests: 512Mi
          pdb:
            enabled: true
            maxUnavailable: 50%
          postgresql:
            enabled: false
            extraEnv: {}
            global:
              ccdAdminWebIngress: ""
              ccdApiGatewayIngress: ""
              ccdCaseManagementWebIngress: ""
              ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
              ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
              ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
              devMode: true
              dmStoreUrl: http://{{ .Release.Name }}-dm-store
              draftStoreUrl: http://{{ .Release.Name }}-draft-store
              emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
              enableKeyVaults: false
              functionaltestscron:
                enabled: true
              idamApiUrl: ""
              idamWebUrl: ""
              paymentsUrl: http://{{ .Release.Name }}-payment-api
              postgresPassword: hmcts
              postgresUsername: hmcts
              postgresql: {}
              postgresqlHostName: '{{ .Release.Name }}-postgresql'
              postgresqlPassword: hmcts
              postgresqlUsername: hmcts
              s2sUrl: http://{{ .Release.Name }}-s2s
              smoketestscron:
                enabled: true
              subscriptionId: 1c4f0704-a29e-403d-b719-b9
            image:
              debug: false
              pullPolicy: IfNotPresent
              registry: docker.io
              repository: bitnami/postgresql
              tag: 11.5.0-debian-9-r60
            livenessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            master:
              affinity: {}
              extraVolumeMounts: []
              extraVolumes: []
              nodeSelector: {}
              podAnnotations: {}
              podLabels: {}
              tolerations: []
            metrics:
              enabled: false
              image:
                pullPolicy: IfNotPresent
                registry: docker.io
                repository: bitnami/postgres-exporter
                tag: 0.5.1-debian-9-r73
              livenessProbe:
                enabled: true
                failureThreshold: 6
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              readinessProbe:
                enabled: true
                failureThreshold: 6
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              securityContext:
                enabled: false
                runAsUser: 1001
              service:
                annotations:
                  prometheus.io/port: "9187"
                  prometheus.io/scrape: "true"
                loadBalancerIP: null
                type: ClusterIP
              serviceMonitor:
                additionalLabels: {}
                enabled: false
            networkPolicy:
              allowExternal: true
              enabled: false
            persistence:
              accessModes:
              - ReadWriteOnce
              annotations: {}
              enabled: false
              mountPath: /bitnami/postgresql
              size: 8Gi
              subPath: ""
            postgresqlDataDir: /bitnami/postgresql/data
            postgresqlDatabase: javadatabase
            postgresqlPassword: javapassword
            postgresqlUsername: javapostgres
            readinessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            replication:
              applicationName: my_application
              enabled: false
              numSynchronousReplicas: 0
              password: repl_password
              slaveReplicas: 1
              synchronousCommit: "off"
              user: repl_user
            resources:
              requests:
                cpu: 250m
                memory: 256Mi
            securityContext:
              enabled: true
              fsGroup: 1001
              runAsUser: 1001
            service:
              annotations: {}
              port: 5432
              type: ClusterIP
            serviceAccount:
              enabled: false
            slave:
              affinity: {}
              extraVolumeMounts: []
              extraVolumes: []
              nodeSelector: {}
              podAnnotations: {}
              podLabels: {}
              tolerations: []
            updateStrategy:
              type: RollingUpdate
            volumePermissions:
              enabled: true
              image:
                pullPolicy: Always
                registry: docker.io
                repository: bitnami/minideb
                tag: stretch
              securityContext:
                runAsUser: 0
          prometheus:
            enabled: false
            path: /prometheus
          readinessDelay: 180
          readinessPath: /health
          readinessPeriod: 15
          readinessTimeout: 3
          registerAdditionalDns:
            enabled: false
          releaseNameOverride: '{{ .Release.Name }}-s2s'
          replicas: 1
          smoketests:
            enabled: false
            image: hmctspublic.azurecr.io/spring-boot/template
          smoketestscron:
            enabled: false
            image: hmctspublic.azurecr.io/spring-boot/template
            schedule: 20 0/1 * * *
          testsConfig:
            cpuLimits: 1000m
            cpuRequests: 100m
            memoryLimits: 1024Mi
            memoryRequests: 256Mi
          useInterpodAntiAffinity: false
      tags:
        idam-pr: true
    ccpay:
      ccd:
        enabled: false
      ccpay-bubble-frontend:
        enabled: false
      ccpay-bulkscanning-api:
        enabled: false
      fees-register-api:
        enabled: false
      payment-api:
        enabled: true
      postgresql:
        enabled: false
      rpe-service-auth-provider:
        enabled: false
    ccpay-bubble-frontend:
      ccpayfrontend:
        idampr:
          enabled: false
      global:
        ccdAdminWebIngress: ""
        ccdApiGatewayIngress: ""
        ccdCaseManagementWebIngress: ""
        ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
        ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
        ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
        devMode: true
        dmStoreUrl: http://{{ .Release.Name }}-dm-store
        draftStoreUrl: http://{{ .Release.Name }}-draft-store
        emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
        idamApiUrl: ""
        idamWebUrl: ""
        paymentsUrl: http://{{ .Release.Name }}-payment-api
        postgresPassword: hmcts
        postgresUsername: hmcts
        postgresqlHostName: '{{ .Release.Name }}-postgresql'
        postgresqlPassword: hmcts
        postgresqlUsername: hmcts
        s2sUrl: http://{{ .Release.Name }}-s2s
        subscriptionId: 1c4f0704-a29e-403d-b719-b9
      idam-pr:
        api:
          url: https://idam-api.aat.platform.hmcts.net
        cpuLimits: 2500m
        cpuRequests: 25m
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: true
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresqlHostName: '{{ .Release.Name }}-postgresql'
          postgresqlPassword: hmcts
          postgresqlUsername: hmcts
          s2sUrl: http://{{ .Release.Name }}-s2s
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        memoryLimits: 1024Mi
        memoryRequests: 128Mi
        redirect_uris:
          paybubble:
          - '{{ .Values.global.bubbleUrl }}/oauth2/callback'
        web_public:
          url: https://idam-web-public.aat.platform.hmcts.net
      nodejs:
        applicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
        applicationPort: 3000
        cpuLimits: 500m
        cpuRequests: 25m
        environment:
          APPINSIGHTS_INSTRUMENTATIONKEY: null
          CCD_URL: '{{ tpl .Values.global.ccdDataStoreUrl $}}'
          CCPAY_BUBBLE_MICROSERVICE: ccpay_bubble
          CCPAY_BULKSCAN_API_URL: http://{{ .Release.Name }}-bulk-scanning
          FEE_JURISDICTION_URL: http://{{ .Release.Name }}-fee-register/jurisdictions
          FEE_REGISTRATION_URL: http://{{ .Release.Name }}-fee-register/fees-register/fees
          IDAM_API_URL: '{{ .Values.global.idamApiUrl }}'
          IDAM_AUTHENTICATION_WEB_URL: '{{ .Values.global.idamWebUrl }}'
          NODE_ENV: production
          PAYHUB_API_URL: http://{{ .Release.Name }}-payment-api
          REFORM_SERVICE_NAME: ccpay-bubble-frontend
          REFORM_TEAM: ccpay
          S2S_KEY: BBBBBBBBBB
          S2S_URL: http://{{ .Release.Name }}-s2s
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: true
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          enableKeyVaults: false
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresqlHostName: '{{ .Release.Name }}-postgresql'
          postgresqlPassword: hmcts
          postgresqlUsername: hmcts
          s2sUrl: http://{{ .Release.Name }}-s2s
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        image: hmctspublic.azurecr.io/ccpay/bubble-frontend:latest
        imagePullPolicy: IfNotPresent
        ingressClass: traefik
        ingressHost: ""
        livenessDelay: 5
        livenessFailureThreshold: 3
        livenessPath: /health/liveness
        livenessPeriod: 15
        livenessTimeout: 3
        memoryLimits: 512Mi
        memoryRequests: 64Mi
        pdb:
          enabled: true
          maxUnavailable: 50%
        prometheus:
          enabled: false
          path: /metrics
        readinessDelay: 5
        readinessPath: /health
        readinessPeriod: 15
        readinessTimeout: 3
        registerAdditionalDns:
          enabled: false
        releaseNameOverride: '{{ .Release.Name }}-ccpay-bubble'
        replicas: 1
        secrets:
          IDAM_CLIENT_SECRET:
            key: key
            secretRef: paybubble-idam-client-secret
        useInterpodAntiAffinity: false
    ccpay-bulkscanning-api:
      global:
        ccdAdminWebIngress: ""
        ccdApiGatewayIngress: ""
        ccdCaseManagementWebIngress: ""
        ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
        ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
        ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
        devMode: true
        dmStoreUrl: http://{{ .Release.Name }}-dm-store
        draftStoreUrl: http://{{ .Release.Name }}-draft-store
        emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
        idamApiUrl: ""
        idamWebUrl: ""
        paymentsUrl: http://{{ .Release.Name }}-payment-api
        postgresPassword: hmcts
        postgresUsername: hmcts
        postgresqlHostName: '{{ .Release.Name }}-postgresql'
        postgresqlPassword: hmcts
        postgresqlUsername: hmcts
        s2sUrl: http://{{ .Release.Name }}-s2s
        subscriptionId: 1c4f0704-a29e-403d-b719-b9
      java:
        aadIdentityName: ccpay
        applicationPort: 8080
        cpuLimits: 1500m
        cpuRequests: 250m
        devApplicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
        devcpuLimits: 2500m
        devcpuRequests: 250m
        devmemoryLimits: 1024Mi
        devmemoryRequests: 512Mi
        environment:
          AUTH_IDAM_CLIENT_BASEURL: '{{ .Values.global.idamApiUrl }}'
          AUTH_PROVIDER_SERVICE_CLIENT_BASEURL: '{{ tpl .Values.global.s2sUrl $}}'
          POSTGRES_CONNECTION_OPTIONS: ?sslmode=require
          POSTGRES_HOST: ccpay-bulkscanning-api-postgres-db-{{ .Values.global.environment
            }}.postgres.database.azure.com
          POSTGRES_NAME: bspayment
          POSTGRES_PASSWORD: '{{ .Values.global.postgresqlPassword }}'
          POSTGRES_PORT: 5432
          POSTGRES_USERNAME: '{{ .Values.global.postgresqlUsername }}'
          REFORM_SERVICE_NAME: ccpay-bulkscanning
          REFORM_TEAM: ccpay
          SPRING_DATASOURCE_URL: jdbc:postgresql://{{ tpl .Values.global.postgresqlHostName
            $}}:5432/bspayment
          SPRING_LIQUIBASE_ENABLED: true
        functionaltests:
          enabled: false
          image: hmctspublic.azurecr.io/spring-boot/template
        functionaltestscron:
          enabled: false
          image: hmctspublic.azurecr.io/spring-boot/template
          schedule: 30 0/6 * * *
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: true
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          enableKeyVaults: false
          functionaltestscron:
            enabled: true
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresqlHostName: '{{ .Release.Name }}-postgresql'
          postgresqlPassword: hmcts
          postgresqlUsername: hmcts
          s2sUrl: http://{{ .Release.Name }}-s2s
          smoketestscron:
            enabled: true
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        image: hmctspublic.azurecr.io/ccpay/bulkscanning-api:latest
        ingressClass: traefik
        ingressHost: ""
        keyVaults:
          ccpay:
            resourceGroup: ccpay
            secrets:
            - bulkscanning-api-POSTGRES-PASS
            - AppInsightsInstrumentationKey
        livenessDelay: 30
        livenessFailureThreshold: 3
        livenessPath: /health/liveness
        livenessPeriod: 15
        livenessTimeout: 3
        memoryLimits: 2048Mi
        memoryRequests: 512Mi
        pdb:
          enabled: true
          maxUnavailable: 50%
        postgresql:
          enabled: false
          extraEnv: {}
          global:
            ccdAdminWebIngress: ""
            ccdApiGatewayIngress: ""
            ccdCaseManagementWebIngress: ""
            ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
            ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
            ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
            devMode: true
            dmStoreUrl: http://{{ .Release.Name }}-dm-store
            draftStoreUrl: http://{{ .Release.Name }}-draft-store
            emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
            enableKeyVaults: false
            functionaltestscron:
              enabled: true
            idamApiUrl: ""
            idamWebUrl: ""
            paymentsUrl: http://{{ .Release.Name }}-payment-api
            postgresPassword: hmcts
            postgresUsername: hmcts
            postgresql: {}
            postgresqlHostName: '{{ .Release.Name }}-postgresql'
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            s2sUrl: http://{{ .Release.Name }}-s2s
            smoketestscron:
              enabled: true
            subscriptionId: 1c4f0704-a29e-403d-b719-b9
          image:
            debug: false
            pullPolicy: IfNotPresent
            registry: docker.io
            repository: bitnami/postgresql
            tag: 11.5.0-debian-9-r60
          livenessProbe:
            enabled: true
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          master:
            affinity: {}
            extraVolumeMounts: []
            extraVolumes: []
            nodeSelector: {}
            podAnnotations: {}
            podLabels: {}
            tolerations: []
          metrics:
            enabled: false
            image:
              pullPolicy: IfNotPresent
              registry: docker.io
              repository: bitnami/postgres-exporter
              tag: 0.5.1-debian-9-r73
            livenessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            readinessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            securityContext:
              enabled: false
              runAsUser: 1001
            service:
              annotations:
                prometheus.io/port: "9187"
                prometheus.io/scrape: "true"
              loadBalancerIP: null
              type: ClusterIP
            serviceMonitor:
              additionalLabels: {}
              enabled: false
          networkPolicy:
            allowExternal: true
            enabled: false
          persistence:
            accessModes:
            - ReadWriteOnce
            annotations: {}
            enabled: false
            mountPath: /bitnami/postgresql
            size: 8Gi
            subPath: ""
          postgresqlDataDir: /bitnami/postgresql/data
          postgresqlDatabase: javadatabase
          postgresqlPassword: javapassword
          postgresqlUsername: javapostgres
          readinessProbe:
            enabled: true
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          replication:
            applicationName: my_application
            enabled: false
            numSynchronousReplicas: 0
            password: repl_password
            slaveReplicas: 1
            synchronousCommit: "off"
            user: repl_user
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            enabled: true
            fsGroup: 1001
            runAsUser: 1001
          service:
            annotations: {}
            port: 5432
            type: ClusterIP
          serviceAccount:
            enabled: false
          slave:
            affinity: {}
            extraVolumeMounts: []
            extraVolumes: []
            nodeSelector: {}
            podAnnotations: {}
            podLabels: {}
            tolerations: []
          updateStrategy:
            type: RollingUpdate
          volumePermissions:
            enabled: true
            image:
              pullPolicy: Always
              registry: docker.io
              repository: bitnami/minideb
              tag: stretch
            securityContext:
              runAsUser: 0
        prometheus:
          enabled: false
          path: /prometheus
        readinessDelay: 30
        readinessPath: /health
        readinessPeriod: 15
        readinessTimeout: 3
        registerAdditionalDns:
          enabled: false
        releaseNameOverride: '{{ .Release.Name }}-bulk-scanning'
        replicas: 1
        smoketests:
          enabled: false
          image: hmctspublic.azurecr.io/spring-boot/template
        smoketestscron:
          enabled: false
          image: hmctspublic.azurecr.io/spring-boot/template
          schedule: 20 0/1 * * *
        testsConfig:
          cpuLimits: 1000m
          cpuRequests: 100m
          memoryLimits: 1024Mi
          memoryRequests: 256Mi
        useInterpodAntiAffinity: false
    fees-register-api:
      global:
        ccdAdminWebIngress: ""
        ccdApiGatewayIngress: ""
        ccdCaseManagementWebIngress: ""
        ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
        ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
        ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
        devMode: true
        dmStoreUrl: http://{{ .Release.Name }}-dm-store
        draftStoreUrl: http://{{ .Release.Name }}-draft-store
        emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
        idamApiUrl: ""
        idamWebUrl: ""
        paymentsUrl: http://{{ .Release.Name }}-payment-api
        postgresPassword: hmcts
        postgresUsername: hmcts
        postgresqlHostName: '{{ .Release.Name }}-postgresql'
        postgresqlPassword: hmcts
        postgresqlUsername: hmcts
        s2sUrl: http://{{ .Release.Name }}-s2s
        subscriptionId: 1c4f0704-a29e-403d-b719-b9
      java:
        aadIdentityName: ccpay
        applicationPort: 8080
        cpuLimits: 1500m
        cpuRequests: 250m
        devApplicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
        devcpuLimits: 2500m
        devcpuRequests: 250m
        devmemoryLimits: 1024Mi
        devmemoryRequests: 512Mi
        environment:
          ENABLE_FEE_LOADER: true
          IDAM_CLIENT_BASE_URL: '{{ .Values.global.idamApiUrl }}'
          POSTGRES_CONNECTION_OPTIONS: ?sslmode=allow
          POSTGRES_HOST: '{{ tpl .Values.global.postgresqlHostName $}}'
          POSTGRES_NAME: fees-register
          POSTGRES_PASSWORD: '{{ .Values.global.postgresqlPassword}}'
          POSTGRES_PORT: 5432
          POSTGRES_USERNAME: '{{ .Values.global.postgresqlUsername}}'
          REFORM_SERVICE_NAME: fees-register-api
          REFORM_TEAM: cc
          SPRING_LIQUIBASE_ENABLED: true
        functionaltests:
          enabled: false
          image: hmctspublic.azurecr.io/spring-boot/template
        functionaltestscron:
          enabled: false
          image: hmctspublic.azurecr.io/spring-boot/template
          schedule: 30 0/6 * * *
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: true
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          enableKeyVaults: false
          functionaltestscron:
            enabled: true
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresqlHostName: '{{ .Release.Name }}-postgresql'
          postgresqlPassword: hmcts
          postgresqlUsername: hmcts
          s2sUrl: http://{{ .Release.Name }}-s2s
          smoketestscron:
            enabled: true
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        image: hmctspublic.azurecr.io/fees-register/api:latest
        ingressClass: traefik
        ingressHost: ""
        keyVaults:
          fees-register:
            resourceGroup: ccpay
            secrets:
            - api-POSTGRES-PASS
            - AppInsightsInstrumentationKey
        livenessDelay: 30
        livenessFailureThreshold: 3
        livenessPath: /health/liveness
        livenessPeriod: 15
        livenessTimeout: 3
        memoryLimits: 2048Mi
        memoryRequests: 512Mi
        pdb:
          enabled: true
          maxUnavailable: 50%
        postgresql:
          enabled: false
          extraEnv: {}
          global:
            ccdAdminWebIngress: ""
            ccdApiGatewayIngress: ""
            ccdCaseManagementWebIngress: ""
            ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
            ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
            ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
            devMode: true
            dmStoreUrl: http://{{ .Release.Name }}-dm-store
            draftStoreUrl: http://{{ .Release.Name }}-draft-store
            emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
            enableKeyVaults: false
            functionaltestscron:
              enabled: true
            idamApiUrl: ""
            idamWebUrl: ""
            paymentsUrl: http://{{ .Release.Name }}-payment-api
            postgresPassword: hmcts
            postgresUsername: hmcts
            postgresql: {}
            postgresqlHostName: '{{ .Release.Name }}-postgresql'
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            s2sUrl: http://{{ .Release.Name }}-s2s
            smoketestscron:
              enabled: true
            subscriptionId: 1c4f0704-a29e-403d-b719-b9
          image:
            debug: false
            pullPolicy: IfNotPresent
            registry: docker.io
            repository: bitnami/postgresql
            tag: 11.5.0-debian-9-r60
          livenessProbe:
            enabled: true
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          master:
            affinity: {}
            extraVolumeMounts: []
            extraVolumes: []
            nodeSelector: {}
            podAnnotations: {}
            podLabels: {}
            tolerations: []
          metrics:
            enabled: false
            image:
              pullPolicy: IfNotPresent
              registry: docker.io
              repository: bitnami/postgres-exporter
              tag: 0.5.1-debian-9-r73
            livenessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            readinessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            securityContext:
              enabled: false
              runAsUser: 1001
            service:
              annotations:
                prometheus.io/port: "9187"
                prometheus.io/scrape: "true"
              loadBalancerIP: null
              type: ClusterIP
            serviceMonitor:
              additionalLabels: {}
              enabled: false
          networkPolicy:
            allowExternal: true
            enabled: false
          persistence:
            accessModes:
            - ReadWriteOnce
            annotations: {}
            enabled: false
            mountPath: /bitnami/postgresql
            size: 8Gi
            subPath: ""
          postgresqlDataDir: /bitnami/postgresql/data
          postgresqlDatabase: javadatabase
          postgresqlPassword: javapassword
          postgresqlUsername: javapostgres
          readinessProbe:
            enabled: true
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          replication:
            applicationName: my_application
            enabled: false
            numSynchronousReplicas: 0
            password: repl_password
            slaveReplicas: 1
            synchronousCommit: "off"
            user: repl_user
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            enabled: true
            fsGroup: 1001
            runAsUser: 1001
          service:
            annotations: {}
            port: 5432
            type: ClusterIP
          serviceAccount:
            enabled: false
          slave:
            affinity: {}
            extraVolumeMounts: []
            extraVolumes: []
            nodeSelector: {}
            podAnnotations: {}
            podLabels: {}
            tolerations: []
          updateStrategy:
            type: RollingUpdate
          volumePermissions:
            enabled: true
            image:
              pullPolicy: Always
              registry: docker.io
              repository: bitnami/minideb
              tag: stretch
            securityContext:
              runAsUser: 0
        prometheus:
          enabled: false
          path: /prometheus
        readinessDelay: 30
        readinessPath: /health
        readinessPeriod: 15
        readinessTimeout: 3
        registerAdditionalDns:
          enabled: false
        releaseNameOverride: '{{ .Release.Name }}-fee-register'
        replicas: 1
        smoketests:
          enabled: false
          image: hmctspublic.azurecr.io/spring-boot/template
        smoketestscron:
          enabled: false
          image: hmctspublic.azurecr.io/spring-boot/template
          schedule: 20 0/1 * * *
        testsConfig:
          cpuLimits: 1000m
          cpuRequests: 100m
          memoryLimits: 1024Mi
          memoryRequests: 256Mi
        useInterpodAntiAffinity: false
    global:
      ccdAdminWebIngress: ""
      ccdApiGatewayIngress: ""
      ccdCaseManagementWebIngress: ""
      ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
      ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
      ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
      devMode: true
      dmStoreUrl: http://{{ .Release.Name }}-dm-store
      draftStoreUrl: http://{{ .Release.Name }}-draft-store
      emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
      idamApiUrl: ""
      idamWebUrl: ""
      paymentsUrl: http://{{ .Release.Name }}-payment-api
      postgresPassword: hmcts
      postgresUsername: hmcts
      postgresqlHostName: '{{ .Release.Name }}-postgresql'
      postgresqlPassword: hmcts
      postgresqlUsername: hmcts
      s2sUrl: http://{{ .Release.Name }}-s2s
      subscriptionId: 1c4f0704-a29e-403d-b719-b9
    payment-api:
      global:
        ccdAdminWebIngress: ""
        ccdApiGatewayIngress: ""
        ccdCaseManagementWebIngress: ""
        ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
        ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
        ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
        devMode: true
        dmStoreUrl: http://{{ .Release.Name }}-dm-store
        draftStoreUrl: http://{{ .Release.Name }}-draft-store
        emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
        idamApiUrl: ""
        idamWebUrl: ""
        paymentsUrl: http://{{ .Release.Name }}-payment-api
        postgresPassword: hmcts
        postgresUsername: hmcts
        postgresqlHostName: '{{ .Release.Name }}-postgresql'
        postgresqlPassword: hmcts
        postgresqlUsername: hmcts
        s2sUrl: http://{{ .Release.Name }}-s2s
        subscriptionId: 1c4f0704-a29e-403d-b719-b9
      java:
        aadIdentityName: ccpay
        applicationPort: 8080
        cpuLimits: 1500m
        cpuRequests: 250m
        devApplicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
        devcpuLimits: 2500m
        devcpuRequests: 250m
        devmemoryLimits: 1024Mi
        devmemoryRequests: 512Mi
        environment:
          AUTH_IDAM_CLIENT_BASEURL: '{{ .Values.global.idamApiUrl }}'
          AUTH_PROVIDER_SERVICE_CLIENT_BASEURL: '{{ tpl .Values.global.s2sUrl $}}'
          BAR_PAYMENTS_EMAIL_FROM: no-reply@reform.hmcts.net
          BAR_PAYMENTS_EMAIL_MESSAGE: hi
          BAR_PAYMENTS_EMAIL_SUBJECT: Docker Env Bar Payments Reconciliation Report
          BAR_PAYMENTS_EMAIL_TO: krishnakn00@gmail.com
          BAR_PAYMENTS_REPORT_SCHEDULER_ENABLED: "true"
          CARD_PAYMENTS_EMAIL_FROM: no-reply@reform.hmcts.net
          CARD_PAYMENTS_EMAIL_MESSAGE: hi
          CARD_PAYMENTS_EMAIL_SUBJECT: Docker Env Card Payments Reconciliation Report
          CARD_PAYMENTS_EMAIL_TO: krishnakn00@gmail.com
          CARD_PAYMENTS_REPORT_SCHEDULER_ENABLED: "true"
          CORE_CASE_DATA_API_URL: '{{ tpl .Values.global.ccdDataStoreUrl $}}'
          FEATURE_PAYMENTS_SEARCH: "true"
          FEATURE_SERVICE_CALLBACK: "true"
          FEES_REGISTER_URL: http://{{ .Release.Name }}-fee-register
          GOV_PAY_OPERATIONAL_SERVICES: ccd_gw
          GOV_PAY_URL: https://publicapi.payments.service.gov.uk/v1/payments
          PAYBUBBLE_HOME_URL: https://ccpay-bubble-frontend-{{ .Values.global.environment
            }}.service.core-compute-{{ .Values.global.environment }}.internal
          PBA_CMC_PAYMENTS_EMAIL_FROM: no-reply@reform.hmcts.net
          PBA_CMC_PAYMENTS_EMAIL_MESSAGE: hi
          PBA_CMC_PAYMENTS_EMAIL_SUBJECT: Docker Env Card Payments Reconciliation
            Report
          PBA_CMC_PAYMENTS_EMAIL_TO: krishnakn00@gmail.com
          PBA_CMC_PAYMENTS_REPORT_SCHEDULER_ENABLED: "true"
          PBA_DIVORCE_PAYMENTS_EMAIL_FROM: no-reply@reform.hmcts.net
          PBA_DIVORCE_PAYMENTS_EMAIL_MESSAGE: hi
          PBA_DIVORCE_PAYMENTS_EMAIL_SUBJECT: Docker Env Card Payments Reconciliation
            Report
          PBA_DIVORCE_PAYMENTS_EMAIL_TO: krishnakn00@gmail.com
          PBA_DIVORCE_PAYMENTS_REPORT_SCHEDULER_ENABLED: "true"
          PBA_FINREM_PAYMENTS_EMAIL_FROM: no-reply@reform.hmcts.net
          PBA_FINREM_PAYMENTS_EMAIL_MESSAGE: hi
          PBA_FINREM_PAYMENTS_EMAIL_SUBJECT: Docker Env Card Payments Reconciliation
            Report
          PBA_FINREM_PAYMENTS_EMAIL_TO: krishnakn00@gmail.com
          PBA_FINREM_PAYMENTS_REPORT_SCHEDULER_ENABLED: "true"
          PBA_PROBATE_PAYMENTS_EMAIL_FROM: no-reply@reform.hmcts.net
          PBA_PROBATE_PAYMENTS_EMAIL_MESSAGE: hi
          PBA_PROBATE_PAYMENTS_EMAIL_SUBJECT: Docker Env Card Payments Reconciliation
            Report
          PBA_PROBATE_PAYMENTS_EMAIL_TO: krishnakn00@gmail.com
          PBA_PROBATE_PAYMENTS_REPORT_SCHEDULER_ENABLED: "true"
          PCI_PAL_CALLBACK_URL: https://core-api-mgmt-demodata.azure-api.net/telephony-api/telephony/callback
          POSTGRES_CONNECTION_OPTIONS: ?sslmode=require
          POSTGRES_HOST: payment-postgres-db-{{ .Values.global.environment }}.postgres.database.azure.com
          POSTGRES_NAME: payment
          POSTGRES_PORT: 5432
          POSTGRES_USERNAME: payment@payment-postgres-db-{{ .Values.global.environment
            }}
          REFORM_SERVICE_NAME: payment-api
          REFORM_TEAM: cc
          RUN_DB_MIGRATION_ON_STARTUP: "true"
          S2S_URL: '{{ tpl .Values.global.s2sUrl $}}'
          SPRING_DATASOURCE_PASSWORD: '{{ .Values.global.postgresqlPassword}}'
          SPRING_DATASOURCE_URL: jdbc:postgresql://{{ tpl .Values.global.postgresqlHostName
            $}}:5432/payment
          SPRING_DATASOURCE_USERNAME: '{{ .Values.global.postgresqlUsername}}'
          SPRING_LIQUIBASE_ENABLED: true
          SPRING_MAIL_HOST: mta.reform.hmcts.net
          SPRING_MAIL_PORT: "25"
          SPRING_MAIL_PROPERTIES_MAIL_SMTP_SSL_TRUST: '*'
          SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: "true"
          SPRING_PROFILES_ACTIVE: liberataMock,callbackMock,ccdMock
          TRUSTED_S2S_SERVICE_NAMES: cmc,cmc_claim_store,probate_frontend,divorce_frontend,ccd_gw,bar_api,api_gw,finrem_payment_service,ccpay_bubble,jui_webapp,xui_webapp
        functionaltests:
          enabled: false
          image: hmctspublic.azurecr.io/spring-boot/template
        functionaltestscron:
          enabled: false
          image: hmctspublic.azurecr.io/spring-boot/template
          schedule: 30 0/6 * * *
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: true
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          enableKeyVaults: false
          functionaltestscron:
            enabled: true
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresqlHostName: '{{ .Release.Name }}-postgresql'
          postgresqlPassword: hmcts
          postgresqlUsername: hmcts
          s2sUrl: http://{{ .Release.Name }}-s2s
          smoketestscron:
            enabled: true
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        image: hmctspublic.azurecr.io/payment/api:latest
        ingressClass: traefik
        ingressHost: ""
        keyVaults:
          ccpay:
            resourceGroup: ccpay
            secrets:
            - api-POSTGRES-PASS
            - sb-primary-connection-string
            - pci-pal-account-id-cmc
            - pci-pal-account-id-probate
            - pci-pal-account-id-divorce
            - pci-pal-api-url
            - pci-pal-api-key
            - gov-pay-keys-reference
            - gov-pay-keys-cmc
            - gov-pay-keys-cmc-claim-store
            - gov-pay-keys-divorce
            - gov-pay-keys-probate
            - liberata-keys-oauth2-client-id
            - liberata-keys-oauth2-client-secret
            - liberata-keys-oauth2-username
            - liberata-keys-oauth2-password
            - AppInsightsInstrumentationKey
        livenessDelay: 30
        livenessFailureThreshold: 3
        livenessPath: /health/liveness
        livenessPeriod: 15
        livenessTimeout: 3
        memoryLimits: 2048Mi
        memoryRequests: 512Mi
        pdb:
          enabled: true
          maxUnavailable: 50%
        postgresql:
          enabled: false
          extraEnv: {}
          global:
            ccdAdminWebIngress: ""
            ccdApiGatewayIngress: ""
            ccdCaseManagementWebIngress: ""
            ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
            ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
            ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
            devMode: true
            dmStoreUrl: http://{{ .Release.Name }}-dm-store
            draftStoreUrl: http://{{ .Release.Name }}-draft-store
            emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
            enableKeyVaults: false
            functionaltestscron:
              enabled: true
            idamApiUrl: ""
            idamWebUrl: ""
            paymentsUrl: http://{{ .Release.Name }}-payment-api
            postgresPassword: hmcts
            postgresUsername: hmcts
            postgresql: {}
            postgresqlHostName: '{{ .Release.Name }}-postgresql'
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            s2sUrl: http://{{ .Release.Name }}-s2s
            smoketestscron:
              enabled: true
            subscriptionId: 1c4f0704-a29e-403d-b719-b9
          image:
            debug: false
            pullPolicy: IfNotPresent
            registry: docker.io
            repository: bitnami/postgresql
            tag: 11.5.0-debian-9-r60
          livenessProbe:
            enabled: true
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          master:
            affinity: {}
            extraVolumeMounts: []
            extraVolumes: []
            nodeSelector: {}
            podAnnotations: {}
            podLabels: {}
            tolerations: []
          metrics:
            enabled: false
            image:
              pullPolicy: IfNotPresent
              registry: docker.io
              repository: bitnami/postgres-exporter
              tag: 0.5.1-debian-9-r73
            livenessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            readinessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            securityContext:
              enabled: false
              runAsUser: 1001
            service:
              annotations:
                prometheus.io/port: "9187"
                prometheus.io/scrape: "true"
              loadBalancerIP: null
              type: ClusterIP
            serviceMonitor:
              additionalLabels: {}
              enabled: false
          networkPolicy:
            allowExternal: true
            enabled: false
          persistence:
            accessModes:
            - ReadWriteOnce
            annotations: {}
            enabled: false
            mountPath: /bitnami/postgresql
            size: 8Gi
            subPath: ""
          postgresqlDataDir: /bitnami/postgresql/data
          postgresqlDatabase: javadatabase
          postgresqlPassword: javapassword
          postgresqlUsername: javapostgres
          readinessProbe:
            enabled: true
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          replication:
            applicationName: my_application
            enabled: false
            numSynchronousReplicas: 0
            password: repl_password
            slaveReplicas: 1
            synchronousCommit: "off"
            user: repl_user
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            enabled: true
            fsGroup: 1001
            runAsUser: 1001
          service:
            annotations: {}
            port: 5432
            type: ClusterIP
          serviceAccount:
            enabled: false
          slave:
            affinity: {}
            extraVolumeMounts: []
            extraVolumes: []
            nodeSelector: {}
            podAnnotations: {}
            podLabels: {}
            tolerations: []
          updateStrategy:
            type: RollingUpdate
          volumePermissions:
            enabled: true
            image:
              pullPolicy: Always
              registry: docker.io
              repository: bitnami/minideb
              tag: stretch
            securityContext:
              runAsUser: 0
        prometheus:
          enabled: false
          path: /prometheus
        readinessDelay: 30
        readinessPath: /health
        readinessPeriod: 15
        readinessTimeout: 3
        registerAdditionalDns:
          enabled: false
        releaseNameOverride: '{{ .Release.Name }}-payment-api'
        replicas: 1
        secrets:
          GOV_PAY_KEYS_CMC:
            disabled: true
            key: key
            secretRef: gov-pay-keys-cmc
          GOV_PAY_KEYS_DIVORCE:
            disabled: true
            key: key
            secretRef: gov-pay-keys-divorce
          GOV_PAY_KEYS_PROBATE:
            disabled: true
            key: key
            secretRef: gov-pay-keys-probate
          GOV_PAY_KEYS_REFERENCE:
            disabled: true
            key: key
            secretRef: gov-pay-keys-reference
          LIBERATA_KEYS_OAUTH2_CLIENT_ID:
            disabled: true
            key: key
            secretRef: liberata-keys-oauth2-client-id
          LIBERATA_KEYS_OAUTH2_CLIENT_SECRET:
            disabled: true
            key: key
            secretRef: liberata-keys-oauth2-client-secret
          LIBERATA_KEYS_OAUTH2_PASSWORD:
            disabled: true
            key: key
            secretRef: liberata-keys-oauth2-password
          LIBERATA_KEYS_OAUTH2_USERNAME:
            disabled: true
            key: key
            secretRef: liberata-keys-oauth2-username
          PCI_PAL_ACCOUNT_ID_CMC:
            disabled: true
            key: key
            secretRef: pci-pal-account-id-cmc
          PCI_PAL_ACCOUNT_ID_DIVORCE:
            disabled: true
            key: key
            secretRef: pci-pal-account-id-divorce
          PCI_PAL_ACCOUNT_ID_PROBATE:
            disabled: true
            key: key
            secretRef: pci-pal-account-id-probate
          PCI_PAL_API_KEY:
            disabled: true
            key: key
            secretRef: pci-pal-api-key
          PCI_PAL_API_URL:
            disabled: true
            key: key
            secretRef: pci-pal-api-url
        smoketests:
          enabled: false
          image: hmctspublic.azurecr.io/spring-boot/template
        smoketestscron:
          enabled: false
          image: hmctspublic.azurecr.io/spring-boot/template
          schedule: 20 0/1 * * *
        testsConfig:
          cpuLimits: 1000m
          cpuRequests: 100m
          memoryLimits: 1024Mi
          memoryRequests: 256Mi
        useInterpodAntiAffinity: false
    postgresql:
      extraEnv: {}
      global:
        ccdAdminWebIngress: ""
        ccdApiGatewayIngress: ""
        ccdCaseManagementWebIngress: ""
        ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
        ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
        ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
        devMode: true
        dmStoreUrl: http://{{ .Release.Name }}-dm-store
        draftStoreUrl: http://{{ .Release.Name }}-draft-store
        emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
        idamApiUrl: ""
        idamWebUrl: ""
        paymentsUrl: http://{{ .Release.Name }}-payment-api
        postgresPassword: hmcts
        postgresUsername: hmcts
        postgresql: {}
        postgresqlHostName: '{{ .Release.Name }}-postgresql'
        postgresqlPassword: hmcts
        postgresqlUsername: hmcts
        s2sUrl: http://{{ .Release.Name }}-s2s
        subscriptionId: 1c4f0704-a29e-403d-b719-b9
      image:
        debug: false
        pullPolicy: IfNotPresent
        registry: docker.io
        repository: bitnami/postgresql
        tag: 11.5.0-debian-9-r60
      initdbScripts:
        init.sql: |-
          CREATE DATABASE "fees-register" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
          CREATE DATABASE "bspayment" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
          CREATE DATABASE "data-store" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
          CREATE DATABASE "definition-store" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
          CREATE DATABASE "user-profile" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
          CREATE DATABASE "draftstore" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      master:
        affinity: {}
        extraVolumeMounts: []
        extraVolumes: []
        nodeSelector: {}
        podAnnotations: {}
        podLabels: {}
        tolerations: []
      metrics:
        enabled: false
        image:
          pullPolicy: IfNotPresent
          registry: docker.io
          repository: bitnami/postgres-exporter
          tag: 0.5.1-debian-9-r73
        livenessProbe:
          enabled: true
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          enabled: true
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        securityContext:
          enabled: false
          runAsUser: 1001
        service:
          annotations:
            prometheus.io/port: "9187"
            prometheus.io/scrape: "true"
          loadBalancerIP: null
          type: ClusterIP
        serviceMonitor:
          additionalLabels: {}
          enabled: false
      networkPolicy:
        allowExternal: true
        enabled: false
      persistence:
        accessModes:
        - ReadWriteOnce
        annotations: {}
        enabled: false
        mountPath: /bitnami/postgresql
        size: 8Gi
        subPath: ""
      postgresqlDataDir: /bitnami/postgresql/data
      postgresqlDatabase: payment
      postgresqlPassword: hmcts
      postgresqlUsername: hmcts
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      replication:
        applicationName: my_application
        enabled: false
        numSynchronousReplicas: 0
        password: repl_password
        slaveReplicas: 1
        synchronousCommit: "off"
        user: repl_user
      resources:
        requests:
          cpu: 25m
          memory: 256Mi
      securityContext:
        enabled: true
        fsGroup: 1001
        runAsUser: 1001
      service:
        annotations: {}
        port: 5432
        type: ClusterIP
      serviceAccount:
        enabled: false
      slave:
        affinity: {}
        extraVolumeMounts: []
        extraVolumes: []
        nodeSelector: {}
        podAnnotations: {}
        podLabels: {}
        tolerations: []
      updateStrategy:
        type: RollingUpdate
      volumePermissions:
        enabled: true
        image:
          pullPolicy: Always
          registry: docker.io
          repository: bitnami/minideb
          tag: stretch
        securityContext:
          runAsUser: 0
    rpe-service-auth-provider:
      global:
        ccdAdminWebIngress: ""
        ccdApiGatewayIngress: ""
        ccdCaseManagementWebIngress: ""
        ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
        ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
        ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
        devMode: true
        dmStoreUrl: http://{{ .Release.Name }}-dm-store
        draftStoreUrl: http://{{ .Release.Name }}-draft-store
        emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
        idamApiUrl: ""
        idamWebUrl: ""
        paymentsUrl: http://{{ .Release.Name }}-payment-api
        postgresPassword: hmcts
        postgresUsername: hmcts
        postgresqlHostName: '{{ .Release.Name }}-postgresql'
        postgresqlPassword: hmcts
        postgresqlUsername: hmcts
        s2sUrl: http://{{ .Release.Name }}-s2s
        subscriptionId: 1c4f0704-a29e-403d-b719-b9
      java:
        aadIdentityName: rpe
        applicationPort: 8489
        cpuLimits: 1500m
        cpuRequests: 250m
        devApplicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
        devcpuLimits: 2500m
        devcpuRequests: 250m
        devmemoryLimits: 1024Mi
        devmemoryRequests: 512Mi
        environment:
          MICROSERVICEKEYS_API_GW: AAAAAAAAAAA
          MICROSERVICEKEYS_CCPAY_BUBBLE: BBBBBBBBBB
          TESTING_SUPPORT_ENABLED: "true"
        functionaltests:
          enabled: false
          image: hmctspublic.azurecr.io/spring-boot/template
        functionaltestscron:
          enabled: false
          image: hmctspublic.azurecr.io/spring-boot/template
          schedule: 30 0/6 * * *
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: true
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          enableKeyVaults: false
          functionaltestscron:
            enabled: true
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresqlHostName: '{{ .Release.Name }}-postgresql'
          postgresqlPassword: hmcts
          postgresqlUsername: hmcts
          s2sUrl: http://{{ .Release.Name }}-s2s
          smoketestscron:
            enabled: true
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        image: hmctspublic.azurecr.io/rpe/service-auth-provider:latest
        ingressClass: traefik
        ingressHost: ""
        keyVaults:
          s2s:
            resourceGroup: rpe-service-auth-provider
            secrets:
            - jwt-key
            - microservicekey-ccd-admin
            - microservicekey-ccd-data
            - microservicekey-ccd-definition
            - microservicekey-ccd-definition-designer
            - microservicekey-ccd-gw
            - microservicekey-ccd-ps
            - microservicekey-cmc
            - microservicekey-cmcLegalFrontend
            - microservicekey-cmcClaimStore
            - microservicekey-cmc-claim-external-api
            - microservicekey-divorce
            - microservicekey-divorce-frontend
            - microservicekey-divorceCcdSubmission
            - microservicekey-divorceCcdValidation
            - microservicekey-divorceDocumentUpload
            - microservicekey-divorceDocumentGenerator
            - microservicekey-draftStoreTests
            - microservicekey-platformJobScheduler
            - microservicekey-reference
            - microservicekey-sscs
            - microservicekey-sscs-bulkscan
            - microservicekey-sscs-tribunals-case
            - microservicekey-probate-frontend
            - microservicekey-probate-backend
            - microservicekey-send-letter-consumer
            - microservicekey-send-letter-tests
            - microservicekey-em-gw
            - microservicekey-finrem-document-generator
            - microservicekey-finrem-notification-service
            - microservicekey-finrem-case-orchestration
            - microservicekey-finrem-payment-service
            - microservicekey-finrem-ccd-data-migrator
            - microservicekey-jui-webapp
            - microservicekey-pui-webapp
            - microservicekey-xui-webapp
            - microservicekey-coh-cor
            - microservicekey-bulk-scan-processor
            - microservicekey-bulk-scan-processor-tests
            - microservicekey-bulk-scan-orchestrator
            - microservicekey-bulk-scan-payment-processor
            - microservicekey-bulk-scan-ccd-sample-app
            - microservicekey-bulk-scan-sample-app-tests
            - microservicekey-bar-api
            - microservicekey-api-gw
            - microservicekey-em-annotation-app
            - microservicekey-em-npa-app
            - microservicekey-cet
            - microservicekey-cet-frontend
            - microservicekey-fpl-case-service
            - microservicekey-iac
            - microservicekey-em-stitching-api
            - microservicekey-em-ccd-orchestrator
            - microservicekey-ccpay-bubble
            - microservicekey-dg-template-management
            - microservicekey-dg-docassembly-api
            - microservicekey-rd-professional-api
            - microservicekey-rd-user-profile-api
            - microservicekey-ethos-repl-service
            - microservicekey-employment-tribunals
            - microservicekey-am-accessmgmt-api
            - microservicekey-ctsc-work-allocation
        livenessDelay: 30
        livenessFailureThreshold: 3
        livenessPath: /health/liveness
        livenessPeriod: 15
        livenessTimeout: 3
        memoryLimits: 2048Mi
        memoryRequests: 512Mi
        pdb:
          enabled: true
          maxUnavailable: 50%
        postgresql:
          enabled: false
          extraEnv: {}
          global:
            ccdAdminWebIngress: ""
            ccdApiGatewayIngress: ""
            ccdCaseManagementWebIngress: ""
            ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
            ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
            ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
            devMode: true
            dmStoreUrl: http://{{ .Release.Name }}-dm-store
            draftStoreUrl: http://{{ .Release.Name }}-draft-store
            emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
            enableKeyVaults: false
            functionaltestscron:
              enabled: true
            idamApiUrl: ""
            idamWebUrl: ""
            paymentsUrl: http://{{ .Release.Name }}-payment-api
            postgresPassword: hmcts
            postgresUsername: hmcts
            postgresql: {}
            postgresqlHostName: '{{ .Release.Name }}-postgresql'
            postgresqlPassword: hmcts
            postgresqlUsername: hmcts
            s2sUrl: http://{{ .Release.Name }}-s2s
            smoketestscron:
              enabled: true
            subscriptionId: 1c4f0704-a29e-403d-b719-b9
          image:
            debug: false
            pullPolicy: IfNotPresent
            registry: docker.io
            repository: bitnami/postgresql
            tag: 11.5.0-debian-9-r60
          livenessProbe:
            enabled: true
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          master:
            affinity: {}
            extraVolumeMounts: []
            extraVolumes: []
            nodeSelector: {}
            podAnnotations: {}
            podLabels: {}
            tolerations: []
          metrics:
            enabled: false
            image:
              pullPolicy: IfNotPresent
              registry: docker.io
              repository: bitnami/postgres-exporter
              tag: 0.5.1-debian-9-r73
            livenessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            readinessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            securityContext:
              enabled: false
              runAsUser: 1001
            service:
              annotations:
                prometheus.io/port: "9187"
                prometheus.io/scrape: "true"
              loadBalancerIP: null
              type: ClusterIP
            serviceMonitor:
              additionalLabels: {}
              enabled: false
          networkPolicy:
            allowExternal: true
            enabled: false
          persistence:
            accessModes:
            - ReadWriteOnce
            annotations: {}
            enabled: false
            mountPath: /bitnami/postgresql
            size: 8Gi
            subPath: ""
          postgresqlDataDir: /bitnami/postgresql/data
          postgresqlDatabase: javadatabase
          postgresqlPassword: javapassword
          postgresqlUsername: javapostgres
          readinessProbe:
            enabled: true
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          replication:
            applicationName: my_application
            enabled: false
            numSynchronousReplicas: 0
            password: repl_password
            slaveReplicas: 1
            synchronousCommit: "off"
            user: repl_user
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            enabled: true
            fsGroup: 1001
            runAsUser: 1001
          service:
            annotations: {}
            port: 5432
            type: ClusterIP
          serviceAccount:
            enabled: false
          slave:
            affinity: {}
            extraVolumeMounts: []
            extraVolumes: []
            nodeSelector: {}
            podAnnotations: {}
            podLabels: {}
            tolerations: []
          updateStrategy:
            type: RollingUpdate
          volumePermissions:
            enabled: true
            image:
              pullPolicy: Always
              registry: docker.io
              repository: bitnami/minideb
              tag: stretch
            securityContext:
              runAsUser: 0
        prometheus:
          enabled: false
          path: /prometheus
        readinessDelay: 30
        readinessPath: /health
        readinessPeriod: 15
        readinessTimeout: 3
        registerAdditionalDns:
          enabled: false
        releaseNameOverride: '{{ .Release.Name }}-s2s'
        replicas: 1
        smoketests:
          enabled: false
          image: hmctspublic.azurecr.io/spring-boot/template
        smoketestscron:
          enabled: false
          image: hmctspublic.azurecr.io/spring-boot/template
          schedule: 20 0/1 * * *
        testsConfig:
          cpuLimits: 1000m
          cpuRequests: 100m
          memoryLimits: 1024Mi
          memoryRequests: 256Mi
        useInterpodAntiAffinity: false
  dm-store:
    blobstorage:
      enabled: false
      global:
        ccdAdminWebIngress: ""
        ccdApiGatewayIngress: ""
        ccdCaseManagementWebIngress: ""
        ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
        ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
        ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
        dmStoreUrl: http://{{ .Release.Name }}-dm-store
        draftStoreUrl: http://{{ .Release.Name }}-draft-store
        emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
        idamApiUrl: ""
        idamWebUrl: ""
        paymentsUrl: http://{{ .Release.Name }}-payment-api
        postgresPassword: hmcts
        postgresUsername: hmcts
        s2sUrl: http://{{ .Release.Name }}-s2s
        subscriptionId: 1c4f0704-a29e-403d-b719-b9
      location: uksouth
      resourceGroup: dm-store-aks
      setup:
        containers:
        - dm-docstore
      teamName: CCD
    global:
      ccdAdminWebIngress: ""
      ccdApiGatewayIngress: ""
      ccdCaseManagementWebIngress: ""
      ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
      ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
      ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
      dmStoreUrl: http://{{ .Release.Name }}-dm-store
      draftStoreUrl: http://{{ .Release.Name }}-draft-store
      emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
      idamApiUrl: ""
      idamWebUrl: ""
      paymentsUrl: http://{{ .Release.Name }}-payment-api
      postgresPassword: hmcts
      postgresUsername: hmcts
      s2sUrl: http://{{ .Release.Name }}-s2s
      subscriptionId: 1c4f0704-a29e-403d-b719-b9
    java:
      aadIdentityName: dm-store
      applicationPort: "4603"
      cpuLimits: 1500m
      cpuRequests: 250m
      devApplicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
      devcpuLimits: 2500m
      devcpuRequests: 250m
      devmemoryLimits: 1024Mi
      devmemoryRequests: 512Mi
      environment:
        BLOBSTORE_MIGRATE_CCD_PUBLIC_KEY: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDiQ//gc/G53d9dLCtf123fIYo49gUySuJuxOcw2GtieWTMSy+O7RNtsAIjVf3mCOdDNuN69tZNPEWMdaW8n11s9MwYFahtxDecyn0KIP9MvPsfSMSbxhp/f7kfbdB/H/S5eYea66JTyeJS6uNd76RdHttx0mLO30ZkRcXB25c2SIXhRYsdoeKS5GXHDdNejkQM0S/Ev94x2UunApmYHjWN1XcDhsEsAeF4WHnvYh2XiMn9vHY44AqvbWLlAmCgzaXpz8Xhl0fO7jDKSeReDyuM3UTMaiFFaxuvliGol7aIXq/aVe/miiD2SLxHZ6RxAPW80bhXrzJMTLTCqhCEhzfv
          someone@somewhere.sometime
        BLOBSTORE_MIGRATE_CCD_PUBLIC_KEY_REQUIRED: "false"
        BLOBSTORE_MIGRATE_CCD_SECRET: y2hahvdZ9evcTVq2
        ENABLE_AZURE_STORAGE_CONTAINER: "true"
        ENABLE_DB_MIGRATE: "true"
        ENABLE_DELETE: "true"
        ENABLE_DOCUMENT_AND_METADATA_UPLOAD: "false"
        ENABLE_FOLDER_API: "true"
        ENABLE_IDAM_HEALTH_CHECK: "false"
        ENABLE_METADATA_SEARCH: "true"
        ENABLE_THUMBNAIL: "true"
        ENABLE_TTL: "false"
        IDAM_S2S_BASE_URI: '{{ tpl .Values.global.s2sUrl $}}'
        IDAM_USER_BASE_URI: '{{ tpl .Values.global.idamApiUrl $}}'
        MAX_FILE_SIZE: 100MB
        POSTGRES_STORAGE_ENABLED: "false"
        SPRING_DATASOURCE_PASSWORD: '{{ tpl .Values.global.postgresPassword $}}'
        SPRING_DATASOURCE_URL: jdbc:postgresql://{{ .Release.Name }}-postgresql:5432/evidence?ssl=disable
        SPRING_DATASOURCE_USERNAME: '{{ tpl .Values.global.postgresUsername $}}'
        STORAGE_CONTAINER_DOCUMENT_CONTAINER_NAME: dm-store
        STORAGEACCOUNT_PRIMARY_CONNECTION_STRING: DefaultEndpointsProtocol=https;AccountName=$(STORAGE_ACCOUNT_NAME);AccountKey=$(STORAGE_ACCOUNT_KEY);EndpointSuffix=core.windows.net
      functionaltests:
        enabled: false
        image: hmctspublic.azurecr.io/spring-boot/template
      functionaltestscron:
        enabled: false
        image: hmctspublic.azurecr.io/spring-boot/template
        schedule: 30 0/6 * * *
      global:
        ccdAdminWebIngress: ""
        ccdApiGatewayIngress: ""
        ccdCaseManagementWebIngress: ""
        ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
        ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
        ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
        devMode: false
        dmStoreUrl: http://{{ .Release.Name }}-dm-store
        draftStoreUrl: http://{{ .Release.Name }}-draft-store
        emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
        enableKeyVaults: false
        functionaltestscron:
          enabled: true
        idamApiUrl: ""
        idamWebUrl: ""
        paymentsUrl: http://{{ .Release.Name }}-payment-api
        postgresPassword: hmcts
        postgresUsername: hmcts
        s2sUrl: http://{{ .Release.Name }}-s2s
        smoketestscron:
          enabled: true
        subscriptionId: 1c4f0704-a29e-403d-b719-b9
      image: hmctspublic.azurecr.io/dm/store:latest
      ingressClass: traefik
      keyVaults:
        dm:
          resourceGroup: dm-shared
          secrets:
          - AppInsightsInstrumentationKey
          - dm-store-storage-account-primary-connection-string
          - dm-store-storage-account-secondary-connection-string
          - store-POSTGRES-PASS
      livenessDelay: 180
      livenessFailureThreshold: 10
      livenessPath: /health/liveness
      livenessPeriod: 15
      livenessTimeout: 5
      memoryLimits: 2048Mi
      memoryRequests: 512Mi
      pdb:
        enabled: true
        maxUnavailable: 50%
      postgresql:
        enabled: false
        extraEnv: {}
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: false
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          enableKeyVaults: false
          functionaltestscron:
            enabled: true
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresql: {}
          s2sUrl: http://{{ .Release.Name }}-s2s
          smoketestscron:
            enabled: true
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        image:
          debug: false
          pullPolicy: IfNotPresent
          registry: docker.io
          repository: bitnami/postgresql
          tag: 11.5.0-debian-9-r60
        livenessProbe:
          enabled: true
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        master:
          affinity: {}
          extraVolumeMounts: []
          extraVolumes: []
          nodeSelector: {}
          podAnnotations: {}
          podLabels: {}
          tolerations: []
        metrics:
          enabled: false
          image:
            pullPolicy: IfNotPresent
            registry: docker.io
            repository: bitnami/postgres-exporter
            tag: 0.5.1-debian-9-r73
          livenessProbe:
            enabled: true
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            enabled: true
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          securityContext:
            enabled: false
            runAsUser: 1001
          service:
            annotations:
              prometheus.io/port: "9187"
              prometheus.io/scrape: "true"
            loadBalancerIP: null
            type: ClusterIP
          serviceMonitor:
            additionalLabels: {}
            enabled: false
        nameOverride: dm-store-db
        networkPolicy:
          allowExternal: true
          enabled: false
        persistence:
          accessModes:
          - ReadWriteOnce
          annotations: {}
          enabled: false
          mountPath: /bitnami/postgresql
          size: 8Gi
          subPath: ""
        postgresqlDataDir: /bitnami/postgresql/data
        postgresqlDatabase: javadatabase
        postgresqlPassword: evidence
        postgresqlUsername: evidence
        readinessProbe:
          enabled: true
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        replication:
          applicationName: my_application
          enabled: false
          numSynchronousReplicas: 0
          password: repl_password
          slaveReplicas: 1
          synchronousCommit: "off"
          user: repl_user
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
        securityContext:
          enabled: true
          fsGroup: 1001
          runAsUser: 1001
        service:
          annotations: {}
          port: 5432
          type: ClusterIP
        serviceAccount:
          enabled: false
        slave:
          affinity: {}
          extraVolumeMounts: []
          extraVolumes: []
          nodeSelector: {}
          podAnnotations: {}
          podLabels: {}
          tolerations: []
        updateStrategy:
          type: RollingUpdate
        volumePermissions:
          enabled: true
          image:
            pullPolicy: Always
            registry: docker.io
            repository: bitnami/minideb
            tag: stretch
          securityContext:
            runAsUser: 0
      prometheus:
        enabled: false
        path: /prometheus
      readinessDelay: 180
      readinessFailureThreshold: 10
      readinessPath: /health
      readinessPeriod: 15
      readinessTimeout: 5
      registerAdditionalDns:
        enabled: false
      releaseNameOverride: '{{ .Release.Name }}-dm-store'
      replicas: 1
      secrets:
        STORAGE_ACCOUNT_KEY:
          key: accessKey
          secretRef: storage-secret-{{ .Release.Name }}-blobstorage
        STORAGE_ACCOUNT_NAME:
          key: storageAccountName
          secretRef: storage-secret-{{ .Release.Name }}-blobstorage
      smoketests:
        enabled: false
        image: hmctspublic.azurecr.io/spring-boot/template
      smoketestscron:
        enabled: false
        image: hmctspublic.azurecr.io/spring-boot/template
        schedule: 20 0/1 * * *
      testsConfig:
        cpuLimits: 1000m
        cpuRequests: 100m
        memoryLimits: 1024Mi
        memoryRequests: 256Mi
      useInterpodAntiAffinity: false
  draft-store-service:
    global:
      ccdAdminWebIngress: ""
      ccdApiGatewayIngress: ""
      ccdCaseManagementWebIngress: ""
      ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
      ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
      ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
      dmStoreUrl: http://{{ .Release.Name }}-dm-store
      draftStoreUrl: http://{{ .Release.Name }}-draft-store
      emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
      idamApiUrl: ""
      idamWebUrl: ""
      paymentsUrl: http://{{ .Release.Name }}-payment-api
      postgresPassword: hmcts
      postgresUsername: hmcts
      s2sUrl: http://{{ .Release.Name }}-s2s
      subscriptionId: 1c4f0704-a29e-403d-b719-b9
    java:
      aadIdentityName: rpe
      applicationPort: 8800
      cpuLimits: 1500m
      cpuRequests: 250m
      devApplicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
      devcpuLimits: 2500m
      devcpuRequests: 250m
      devmemoryLimits: 1024Mi
      devmemoryRequests: 512Mi
      environment:
        DRAFT_STORE_DB_CONN_OPTIONS: ""
        DRAFT_STORE_DB_HOST: '{{ .Release.Name }}-postgresql'
        DRAFT_STORE_DB_NAME: draftstore
        DRAFT_STORE_DB_PASSWORD: '{{ tpl .Values.global.postgresPassword $}}'
        DRAFT_STORE_DB_PORT: "5432"
        DRAFT_STORE_DB_USER_NAME: '{{ tpl .Values.global.postgresUsername $}}'
        IDAM_URL: '{{ tpl .Values.global.idamApiUrl $}}'
        LOGBACK_REQUIRE_ALERT_LEVEL: "false"
        LOGBACK_REQUIRE_ERROR_CODE: "false"
        RUN_DB_MIGRATION_ON_STARTUP: "true"
        S2S_URL: '{{ tpl .Values.global.s2sUrl $}}'
        SPRING_CLOUD_PROPERTIESVOLUME_ENABLED: false
      functionaltests:
        enabled: false
        image: hmctspublic.azurecr.io/spring-boot/template
      functionaltestscron:
        enabled: false
        image: hmctspublic.azurecr.io/spring-boot/template
        schedule: 30 0/6 * * *
      global:
        ccdAdminWebIngress: ""
        ccdApiGatewayIngress: ""
        ccdCaseManagementWebIngress: ""
        ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
        ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
        ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
        devMode: false
        dmStoreUrl: http://{{ .Release.Name }}-dm-store
        draftStoreUrl: http://{{ .Release.Name }}-draft-store
        emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
        enableKeyVaults: false
        functionaltestscron:
          enabled: true
        idamApiUrl: ""
        idamWebUrl: ""
        paymentsUrl: http://{{ .Release.Name }}-payment-api
        postgresPassword: hmcts
        postgresUsername: hmcts
        s2sUrl: http://{{ .Release.Name }}-s2s
        smoketestscron:
          enabled: true
        subscriptionId: 1c4f0704-a29e-403d-b719-b9
      image: hmctspublic.azurecr.io/draft-store/service:latest
      ingressClass: traefik
      ingressHost: ""
      keyVaults: null
      livenessDelay: 240
      livenessFailureThreshold: 3
      livenessPath: /health/liveness
      livenessPeriod: 15
      livenessTimeout: 3
      memoryLimits: 2048Mi
      memoryRequests: 512Mi
      pdb:
        enabled: true
        maxUnavailable: 50%
      postgresql:
        enabled: false
        extraEnv: {}
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: false
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          enableKeyVaults: false
          functionaltestscron:
            enabled: true
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresql: {}
          s2sUrl: http://{{ .Release.Name }}-s2s
          smoketestscron:
            enabled: true
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        image:
          debug: false
          pullPolicy: IfNotPresent
          registry: docker.io
          repository: bitnami/postgresql
          tag: 11.5.0-debian-9-r60
        livenessProbe:
          enabled: true
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        master:
          affinity: {}
          extraVolumeMounts: []
          extraVolumes: []
          nodeSelector: {}
          podAnnotations: {}
          podLabels: {}
          tolerations: []
        metrics:
          enabled: false
          image:
            pullPolicy: IfNotPresent
            registry: docker.io
            repository: bitnami/postgres-exporter
            tag: 0.5.1-debian-9-r73
          livenessProbe:
            enabled: true
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            enabled: true
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          securityContext:
            enabled: false
            runAsUser: 1001
          service:
            annotations:
              prometheus.io/port: "9187"
              prometheus.io/scrape: "true"
            loadBalancerIP: null
            type: ClusterIP
          serviceMonitor:
            additionalLabels: {}
            enabled: false
        networkPolicy:
          allowExternal: true
          enabled: false
        persistence:
          accessModes:
          - ReadWriteOnce
          annotations: {}
          enabled: false
          mountPath: /bitnami/postgresql
          size: 8Gi
          subPath: ""
        postgresqlDataDir: /bitnami/postgresql/data
        postgresqlDatabase: javadatabase
        postgresqlPassword: javapassword
        postgresqlUsername: javapostgres
        readinessProbe:
          enabled: true
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        replication:
          applicationName: my_application
          enabled: false
          numSynchronousReplicas: 0
          password: repl_password
          slaveReplicas: 1
          synchronousCommit: "off"
          user: repl_user
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
        securityContext:
          enabled: true
          fsGroup: 1001
          runAsUser: 1001
        service:
          annotations: {}
          port: 5432
          type: ClusterIP
        serviceAccount:
          enabled: false
        slave:
          affinity: {}
          extraVolumeMounts: []
          extraVolumes: []
          nodeSelector: {}
          podAnnotations: {}
          podLabels: {}
          tolerations: []
        updateStrategy:
          type: RollingUpdate
        volumePermissions:
          enabled: true
          image:
            pullPolicy: Always
            registry: docker.io
            repository: bitnami/minideb
            tag: stretch
          securityContext:
            runAsUser: 0
      prometheus:
        enabled: false
        path: /prometheus
      readinessDelay: 240
      readinessPath: /health
      readinessPeriod: 15
      readinessTimeout: 3
      registerAdditionalDns:
        enabled: false
      releaseNameOverride: '{{ .Release.Name }}-draft-store'
      replicas: 1
      smoketests:
        enabled: false
        image: hmctspublic.azurecr.io/spring-boot/template
      smoketestscron:
        enabled: false
        image: hmctspublic.azurecr.io/spring-boot/template
        schedule: 20 0/1 * * *
      testsConfig:
        cpuLimits: 1000m
        cpuRequests: 100m
        memoryLimits: 1024Mi
        memoryRequests: 256Mi
      useInterpodAntiAffinity: false
  em-anno:
    global:
      ccdAdminWebIngress: ""
      ccdApiGatewayIngress: ""
      ccdCaseManagementWebIngress: ""
      ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
      ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
      ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
      dmStoreUrl: http://{{ .Release.Name }}-dm-store
      draftStoreUrl: http://{{ .Release.Name }}-draft-store
      emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
      idamApiUrl: ""
      idamWebUrl: ""
      paymentsUrl: http://{{ .Release.Name }}-payment-api
      postgresPassword: hmcts
      postgresUsername: hmcts
      s2sUrl: http://{{ .Release.Name }}-s2s
      subscriptionId: 1c4f0704-a29e-403d-b719-b9
    java:
      aadIdentityName: em
      applicationPort: 8080
      cpuLimits: 1500m
      cpuRequests: 250m
      devApplicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
      devcpuLimits: 2500m
      devcpuRequests: 25m
      devmemoryLimits: 1024Mi
      devmemoryRequests: 512Mi
      environment:
        DM_STORE_APP_URL: '{{ tpl .Values.global.dmStoreUrl $}}'
        ENABLE_IDAM_HEALTH_CHECK: false
        ENABLE_LIQUIBASE: "true"
        ENABLE_S2S_HEALTH_CHECK: false
        ENDPOINTS_HEALTH_SENSITIVE: false
        ENDPOINTS_INFO_SENSITIVE: false
        IDAM_API_BASE_URI: '{{ tpl .Values.global.idamApiUrl $}}'
        IDAM_S2S_AUTH_URL: http://rpe-service-auth-provider-{{ .Values.global.environment
          }}.service.core-compute-{{ .Values.global.environment }}.internal
        JSON_CONSOLE_PRETTY_PRINT: false
        LOG_LEVEL_DM: INFO
        LOG_LEVEL_SPRING_WEB: INFO
        LOG_OUTPUT: single
        REFORM_SERVICE_NAME: rpa-em-annotation-api
        REFORM_TEAM: rpa-em-annotation-api
        ROOT_LOGGING_LEVEL: INFO
        RUN_DB_MIGRATION_ON_STARTUP: false
        S2S_BASE_URI: '{{ tpl .Values.global.s2sUrl $}}'
        SERVER_PORT: 8080
        SHOW_SQL: false
        SPRING_DATASOURCE_PASSWORD: '{{ tpl .Values.global.postgresPassword $}}'
        SPRING_DATASOURCE_URL: jdbc:postgresql://{{ .Release.Name }}-postgresql:5432/annotation?ssl=disable
        SPRING_DATASOURCE_USERNAME: '{{ tpl .Values.global.postgresUsername $}}'
      functionaltests:
        backoffLimit: 2
        enabled: false
        kind: Job
      functionaltestscron:
        backoffLimit: 2
        enabled: false
        kind: CronJob
      global:
        ccdAdminWebIngress: ""
        ccdApiGatewayIngress: ""
        ccdCaseManagementWebIngress: ""
        ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
        ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
        ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
        devMode: false
        dmStoreUrl: http://{{ .Release.Name }}-dm-store
        draftStoreUrl: http://{{ .Release.Name }}-draft-store
        emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
        enableKeyVaults: false
        idamApiUrl: ""
        idamWebUrl: ""
        paymentsUrl: http://{{ .Release.Name }}-payment-api
        postgresPassword: hmcts
        postgresUsername: hmcts
        s2sUrl: http://{{ .Release.Name }}-s2s
        subscriptionId: 1c4f0704-a29e-403d-b719-b9
      image: hmctspublic.azurecr.io/em/anno:latest
      job:
        backoffLimit: 6
        cpuLimits: 2500m
        cpuRequests: 25m
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: false
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          enableKeyVaults: false
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          s2sUrl: http://{{ .Release.Name }}-s2s
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        kind: Job
        memoryLimits: 1024Mi
        memoryRequests: 512Mi
        restartPolicy: OnFailure
      keyVaults:
        em-anno:
          secrets:
          - microservicekey-em-annotation-app
          - AppInsightsInstrumentationKey
          - anno-POSTGRES-PASS
      livenessDelay: 180
      livenessFailureThreshold: 3
      livenessPath: /health/liveness
      livenessPeriod: 15
      livenessTimeout: 3
      memoryLimits: 2048Mi
      memoryRequests: 512Mi
      pdb:
        enabled: true
        maxUnavailable: 50%
      postgresql:
        enabled: false
        extraEnv: {}
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: false
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          enableKeyVaults: false
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresql: {}
          s2sUrl: http://{{ .Release.Name }}-s2s
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        image:
          debug: false
          pullPolicy: IfNotPresent
          registry: docker.io
          repository: bitnami/postgresql
          tag: 11.5.0-debian-9-r60
        livenessProbe:
          enabled: true
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        master:
          affinity: {}
          extraVolumeMounts: []
          extraVolumes: []
          nodeSelector: {}
          podAnnotations: {}
          podLabels: {}
          tolerations: []
        metrics:
          enabled: false
          image:
            pullPolicy: IfNotPresent
            registry: docker.io
            repository: bitnami/postgres-exporter
            tag: 0.5.1-debian-9-r73
          livenessProbe:
            enabled: true
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            enabled: true
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          securityContext:
            enabled: false
            runAsUser: 1001
          service:
            annotations:
              prometheus.io/port: "9187"
              prometheus.io/scrape: "true"
            loadBalancerIP: null
            type: ClusterIP
          serviceMonitor:
            additionalLabels: {}
            enabled: false
        nameOverride: em-anno-db
        networkPolicy:
          allowExternal: true
          enabled: false
        persistence:
          accessModes:
          - ReadWriteOnce
          annotations: {}
          enabled: false
          mountPath: /bitnami/postgresql
          size: 8Gi
          subPath: ""
        postgresqlDataDir: /bitnami/postgresql/data
        postgresqlDatabase: javadatabase
        postgresqlPassword: emannotationapp
        postgresqlUsername: emannotationapp
        readinessProbe:
          enabled: true
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        replication:
          applicationName: my_application
          enabled: false
          numSynchronousReplicas: 0
          password: repl_password
          slaveReplicas: 1
          synchronousCommit: "off"
          user: repl_user
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
        securityContext:
          enabled: true
          fsGroup: 1001
          runAsUser: 1001
        service:
          annotations: {}
          port: 5432
          type: ClusterIP
        serviceAccount:
          enabled: false
        slave:
          affinity: {}
          extraVolumeMounts: []
          extraVolumes: []
          nodeSelector: {}
          podAnnotations: {}
          podLabels: {}
          tolerations: []
        updateStrategy:
          type: RollingUpdate
        volumePermissions:
          enabled: true
          image:
            pullPolicy: Always
            registry: docker.io
            repository: bitnami/minideb
            tag: stretch
          securityContext:
            runAsUser: 0
      prometheus:
        enabled: false
        path: /prometheus
      readinessDelay: 180
      readinessPath: /health
      readinessPeriod: 15
      readinessTimeout: 3
      registerAdditionalDns:
        enabled: false
      releaseNameOverride: '{{ .Release.Name }}-em-annotation'
      replicas: 1
      smoketests:
        backoffLimit: 2
        enabled: false
        kind: Job
      smoketestscron:
        backoffLimit: 2
        enabled: false
        kind: CronJob
      useInterpodAntiAffinity: false
  global:
    ccdAdminWebIngress: ""
    ccdApiGatewayIngress: ""
    ccdCaseManagementWebIngress: ""
    ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
    ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
    ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
    dmStoreUrl: http://{{ .Release.Name }}-dm-store
    draftStoreUrl: http://{{ .Release.Name }}-draft-store
    emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
    idamApiUrl: ""
    idamWebUrl: ""
    paymentsUrl: http://{{ .Release.Name }}-payment-api
    postgresPassword: hmcts
    postgresUsername: hmcts
    s2sUrl: http://{{ .Release.Name }}-s2s
    subscriptionId: 1c4f0704-a29e-403d-b719-b9
  postgresql:
    extraEnv: {}
    global:
      ccdAdminWebIngress: ""
      ccdApiGatewayIngress: ""
      ccdCaseManagementWebIngress: ""
      ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
      ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
      ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
      dmStoreUrl: http://{{ .Release.Name }}-dm-store
      draftStoreUrl: http://{{ .Release.Name }}-draft-store
      emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
      idamApiUrl: ""
      idamWebUrl: ""
      paymentsUrl: http://{{ .Release.Name }}-payment-api
      postgresPassword: hmcts
      postgresUsername: hmcts
      postgresql: {}
      s2sUrl: http://{{ .Release.Name }}-s2s
      subscriptionId: 1c4f0704-a29e-403d-b719-b9
    image:
      debug: false
      pullPolicy: IfNotPresent
      registry: docker.io
      repository: bitnami/postgresql
      tag: 11.5.0-debian-9-r60
    initdbScripts:
      init.sql: |-
        CREATE DATABASE "data-store" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
        CREATE DATABASE "definition-store" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
        CREATE DATABASE "user-profile" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
        CREATE DATABASE "draftstore" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
        CREATE DATABASE "payment" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
        CREATE DATABASE "evidence" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
        CREATE DATABASE "annotation" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    master:
      affinity: {}
      extraVolumeMounts: []
      extraVolumes: []
      nodeSelector: {}
      podAnnotations: {}
      podLabels: {}
      tolerations: []
    metrics:
      enabled: false
      image:
        pullPolicy: IfNotPresent
        registry: docker.io
        repository: bitnami/postgres-exporter
        tag: 0.5.1-debian-9-r73
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      securityContext:
        enabled: false
        runAsUser: 1001
      service:
        annotations:
          prometheus.io/port: "9187"
          prometheus.io/scrape: "true"
        loadBalancerIP: null
        type: ClusterIP
      serviceMonitor:
        additionalLabels: {}
        enabled: false
    networkPolicy:
      allowExternal: true
      enabled: false
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      mountPath: /bitnami/postgresql
      size: 8Gi
      subPath: ""
    postgresqlDataDir: /bitnami/postgresql/data
    postgresqlDatabase: ccd
    postgresqlPassword: hmcts
    postgresqlUsername: hmcts
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replication:
      applicationName: my_application
      enabled: false
      numSynchronousReplicas: 0
      password: repl_password
      slaveReplicas: 1
      synchronousCommit: "off"
      user: repl_user
    resources:
      requests:
        cpu: 25m
        memory: 256Mi
    securityContext:
      enabled: true
      fsGroup: 1001
      runAsUser: 1001
    service:
      annotations: {}
      port: 5432
      type: ClusterIP
    serviceAccount:
      enabled: false
    slave:
      affinity: {}
      extraVolumeMounts: []
      extraVolumes: []
      nodeSelector: {}
      podAnnotations: {}
      podLabels: {}
      tolerations: []
    updateStrategy:
      type: RollingUpdate
    volumePermissions:
      enabled: true
      image:
        pullPolicy: Always
        registry: docker.io
        repository: bitnami/minideb
        tag: stretch
      securityContext:
        runAsUser: 0
  rpe-service-auth-provider:
    global:
      ccdAdminWebIngress: ""
      ccdApiGatewayIngress: ""
      ccdCaseManagementWebIngress: ""
      ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
      ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
      ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
      dmStoreUrl: http://{{ .Release.Name }}-dm-store
      draftStoreUrl: http://{{ .Release.Name }}-draft-store
      emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
      idamApiUrl: ""
      idamWebUrl: ""
      paymentsUrl: http://{{ .Release.Name }}-payment-api
      postgresPassword: hmcts
      postgresUsername: hmcts
      s2sUrl: http://{{ .Release.Name }}-s2s
      subscriptionId: 1c4f0704-a29e-403d-b719-b9
    java:
      aadIdentityName: rpe
      applicationPort: 8489
      cpuLimits: 1500m
      cpuRequests: 250m
      devApplicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
      devcpuLimits: 2500m
      devcpuRequests: 250m
      devmemoryLimits: 1024Mi
      devmemoryRequests: 512Mi
      environment:
        MICROSERVICEKEYS_CCD_ADMIN: AAAAAAAAAAAAAAAA
        MICROSERVICEKEYS_CCD_DATA: AAAAAAAAAAAAAAAA
        MICROSERVICEKEYS_CCD_DEFINITION: AAAAAAAAAAAAAAAA
        MICROSERVICEKEYS_CCD_GW: AAAAAAAAAAAAAAAA
        MICROSERVICEKEYS_CCD_PS: AAAAAAAAAAAAAAAA
        TESTING_SUPPORT_ENABLED: "true"
      functionaltests:
        enabled: false
        image: hmctspublic.azurecr.io/spring-boot/template
      functionaltestscron:
        enabled: false
        image: hmctspublic.azurecr.io/spring-boot/template
        schedule: 30 0/6 * * *
      global:
        ccdAdminWebIngress: ""
        ccdApiGatewayIngress: ""
        ccdCaseManagementWebIngress: ""
        ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
        ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
        ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
        devMode: false
        dmStoreUrl: http://{{ .Release.Name }}-dm-store
        draftStoreUrl: http://{{ .Release.Name }}-draft-store
        emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
        enableKeyVaults: false
        functionaltestscron:
          enabled: true
        idamApiUrl: ""
        idamWebUrl: ""
        paymentsUrl: http://{{ .Release.Name }}-payment-api
        postgresPassword: hmcts
        postgresUsername: hmcts
        s2sUrl: http://{{ .Release.Name }}-s2s
        smoketestscron:
          enabled: true
        subscriptionId: 1c4f0704-a29e-403d-b719-b9
      image: hmctspublic.azurecr.io/rpe/service-auth-provider:latest
      ingressClass: traefik
      ingressHost: ""
      keyVaults: null
      livenessDelay: 180
      livenessFailureThreshold: 3
      livenessPath: /health/liveness
      livenessPeriod: 15
      livenessTimeout: 3
      memoryLimits: 2048Mi
      memoryRequests: 512Mi
      pdb:
        enabled: true
        maxUnavailable: 50%
      postgresql:
        enabled: false
        extraEnv: {}
        global:
          ccdAdminWebIngress: ""
          ccdApiGatewayIngress: ""
          ccdCaseManagementWebIngress: ""
          ccdDataStoreUrl: http://{{ .Release.Name }}-ccd-data-store-api
          ccdDefinitionStoreUrl: http://{{ .Release.Name }}-ccd-definition-store
          ccdUserProfileUrl: http://{{ .Release.Name }}-ccd-user-profile-api
          devMode: false
          dmStoreUrl: http://{{ .Release.Name }}-dm-store
          draftStoreUrl: http://{{ .Release.Name }}-draft-store
          emAnnotationUrl: http://{{ .Release.Name }}-em-annotation
          enableKeyVaults: false
          functionaltestscron:
            enabled: true
          idamApiUrl: ""
          idamWebUrl: ""
          paymentsUrl: http://{{ .Release.Name }}-payment-api
          postgresPassword: hmcts
          postgresUsername: hmcts
          postgresql: {}
          s2sUrl: http://{{ .Release.Name }}-s2s
          smoketestscron:
            enabled: true
          subscriptionId: 1c4f0704-a29e-403d-b719-b9
        image:
          debug: false
          pullPolicy: IfNotPresent
          registry: docker.io
          repository: bitnami/postgresql
          tag: 11.5.0-debian-9-r60
        livenessProbe:
          enabled: true
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        master:
          affinity: {}
          extraVolumeMounts: []
          extraVolumes: []
          nodeSelector: {}
          podAnnotations: {}
          podLabels: {}
          tolerations: []
        metrics:
          enabled: false
          image:
            pullPolicy: IfNotPresent
            registry: docker.io
            repository: bitnami/postgres-exporter
            tag: 0.5.1-debian-9-r73
          livenessProbe:
            enabled: true
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            enabled: true
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          securityContext:
            enabled: false
            runAsUser: 1001
          service:
            annotations:
              prometheus.io/port: "9187"
              prometheus.io/scrape: "true"
            loadBalancerIP: null
            type: ClusterIP
          serviceMonitor:
            additionalLabels: {}
            enabled: false
        networkPolicy:
          allowExternal: true
          enabled: false
        persistence:
          accessModes:
          - ReadWriteOnce
          annotations: {}
          enabled: false
          mountPath: /bitnami/postgresql
          size: 8Gi
          subPath: ""
        postgresqlDataDir: /bitnami/postgresql/data
        postgresqlDatabase: javadatabase
        postgresqlPassword: javapassword
        postgresqlUsername: javapostgres
        readinessProbe:
          enabled: true
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        replication:
          applicationName: my_application
          enabled: false
          numSynchronousReplicas: 0
          password: repl_password
          slaveReplicas: 1
          synchronousCommit: "off"
          user: repl_user
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
        securityContext:
          enabled: true
          fsGroup: 1001
          runAsUser: 1001
        service:
          annotations: {}
          port: 5432
          type: ClusterIP
        serviceAccount:
          enabled: false
        slave:
          affinity: {}
          extraVolumeMounts: []
          extraVolumes: []
          nodeSelector: {}
          podAnnotations: {}
          podLabels: {}
          tolerations: []
        updateStrategy:
          type: RollingUpdate
        volumePermissions:
          enabled: true
          image:
            pullPolicy: Always
            registry: docker.io
            repository: bitnami/minideb
            tag: stretch
          securityContext:
            runAsUser: 0
      prometheus:
        enabled: false
        path: /prometheus
      readinessDelay: 180
      readinessPath: /health
      readinessPeriod: 15
      readinessTimeout: 3
      registerAdditionalDns:
        enabled: false
      releaseNameOverride: '{{ .Release.Name }}-s2s'
      replicas: 1
      smoketests:
        enabled: false
        image: hmctspublic.azurecr.io/spring-boot/template
      smoketestscron:
        enabled: false
        image: hmctspublic.azurecr.io/spring-boot/template
        schedule: 20 0/1 * * *
      testsConfig:
        cpuLimits: 1000m
        cpuRequests: 100m
        memoryLimits: 1024Mi
        memoryRequests: 256Mi
      useInterpodAntiAffinity: false
  tags:
    idam-pr: true
claimStoreCCD:
  ccd:
    adminWeb:
      enabled: true
      environment:
        NODE_TLS_REJECT_UNAUTHORIZED: 0
      idamClientSecret:
        value: ${ADMIN_WEB_IDAM_SECRET}
      s2sKey: ${ADMIN_S2S_KEY}
    apiGatewayWeb:
      enabled: true
      idamClientSecret:
        value: ${API_GATEWAY_IDAM_SECRET}
      s2sKey: ${API_GATEWAY_S2S_KEY}
    managementWeb:
      enabled: true
      environment:
        NODE_TLS_REJECT_UNAUTHORIZED: 0
    postgresql:
      enabled: false
  enabled: true
global:
  subscriptionId: 1c4f0704-a29e-403d-b719-b9
java:
  applicationPort: 4400
  cpuLimits: 1500m
  cpuRequests: 250m
  devApplicationInsightsInstrumentKey: 00000000-0000-0000-0000-000000000000
  devcpuLimits: 2500m
  devcpuRequests: 250m
  devmemoryLimits: 1024Mi
  devmemoryRequests: 512Mi
  environment:
    CLAIM_STAYED_SCHEDULE: ""
    CLAIM_STORE_DB_HOST: cmc-claim-store-pr-1390-postgres
    CLAIM_STORE_DB_NAME: claimstore
    CLAIM_STORE_DB_PASSWORD: hmcts
    CLAIM_STORE_DB_PORT: 5432
    CLAIM_STORE_DB_USERNAME: hmcts
    CLAIM_STORE_TEST_SUPPORT_ENABLED: true
    CMC_DB_HOST: cmc-claim-store-pr-1390-postgres
    CMC_DB_NAME: cmc
    CMC_DB_PASSWORD: hmcts
    CMC_DB_PORT: 5432
    CMC_DB_USERNAME: hmcts
    CORE_CASE_DATA_API_URL: http://cmc-claim-store-pr-1390-data-store-api
    DOC_ASSEMBLY_URL: false
    DOCUMENT_MANAGEMENT_URL: http://dm-store-aat.service.core-compute-aat.internal
    DOCUMENT_MANAGEMENT_USERROLES: caseworker-cmc,citizen
    FEATURE_TOGGLES_SAVE_CLAIM_STATE_ENABLED: true
    FEES_URL: http://fees-register-api-aat.service.core-compute-aat.internal
    FRONTEND_BASE_URL: https://cmc-citizen-frontend-aat.service.core-compute-aat.internal
    IDAM_API_URL: https://idam-api.aat.platform.hmcts.net
    IDAM_S2S_AUTH_URL: http://rpe-service-auth-provider-aat.service.core-compute-aat.internal
    LOG_LEVEL: DEBUG
    MILO_CSV_SCHEDULE: '-'
    MILO_CSV_SENDER: noreply@reform.hmcts.net
    PAY_URL: http://payment-api-aat.service.core-compute-aat.internal
    PDF_SERVICE_URL: http://cmc-pdf-service-aat.service.core-compute-aat.internal
    REFORM_ENVIRONMENT: preview
    REFORM_SERVICE_NAME: claim-store
    REFORM_TEAM: cmc
    RESPOND_TO_CLAIM_URL: https://cmc-citizen-frontend-aat.service.core-compute-aat.internal/first-contact/start
    RPA_NOTIFICATIONS_COUNTYCOURTJUDGEMENTRECIPIENT: civilmoneyclaims+rpa-county-court-judgement@gmail.com
    RPA_NOTIFICATIONS_MORETIMEREQUESTEDRECIPIENT: civilmoneyclaims+rpa-more-time-requested@gmail.com
    RPA_NOTIFICATIONS_PAIDINFULLRECIPIENT: civilmoneyclaims+rpa-paid-in-full@gmail.com
    RPA_NOTIFICATIONS_RESPONSERECIPIENT: civilmoneyclaims+rpa-defence-response@gmail.com
    RPA_NOTIFICATIONS_SEALEDCLAIMRECIPIENT: civilmoneyclaims+rpa-claim-issued@gmail.com
    RPA_NOTIFICATIONS_SENDER: noreply@reform.hmcts.net
    SEND_LETTER_URL: http://rpe-send-letter-service-aat.service.core-compute-aat.internal
    SPRING_MAIL_HOST: mta.reform.hmcts.net
    SPRING_MAIL_PORT: 25
    SPRING_MAIL_PROPERTIES_MAIL_SMTP_SSL_TRUST: mta.reform.hmcts.net
    SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: true
    SPRING_MAIL_TEST_CONNECTION: false
    STAFF_NOTIFICATIONS_RECIPIENT: civilmoneyclaims+staff-int-tests@gmail.com
    STAFF_NOTIFICATIONS_SENDER: noreply@reform.hmcts.net
  functionaltests:
    cpuLimits: 500m
    cpuRequests: 100m
    enabled: false
    image: hmctspublic.azurecr.io/spring-boot/template
    memoryLimits: 1024Mi
    memoryRequests: 256Mi
  functionaltestscron:
    backoffLimit: 2
    cpuLimits: 2500m
    cpuRequests: 25m
    enabled: false
    global:
      devMode: false
      enableKeyVaults: false
      subscriptionId: 1c4f0704-a29e-403d-b719-b9
    kind: CronJob
    memoryLimits: 1024Mi
    memoryRequests: 512Mi
    restartPolicy: OnFailure
  global:
    devMode: false
    enableKeyVaults: false
    subscriptionId: 1c4f0704-a29e-403d-b719-b9
  image: hmctspublic.azurecr.io/cmc/claim-store:latest
  ingressHost: cmc-claim-store-pr-1390.service.core-compute-preview.internal
  keyVaults:
    cmc:
      resourceGroup: cmc
      secrets:
      - AppInsightsInstrumentationKey
      - citizen-oauth-client-secret
      - claim-store-s2s-secret
      - anonymous-caseworker-username
      - anonymous-caseworker-password
      - system-update-username
      - system-update-password
      - notify-api-key
      - milo-recipient
  livenessDelay: 30
  livenessFailureThreshold: 3
  livenessPath: /health/liveness
  livenessPeriod: 15
  livenessTimeout: 3
  memoryLimits: 2048Mi
  memoryRequests: 512Mi
  pdb:
    enabled: true
    maxUnavailable: 50%
  postgresql:
    enabled: false
    extraEnv: {}
    global:
      devMode: false
      enableKeyVaults: false
      postgresql: {}
      subscriptionId: 1c4f0704-a29e-403d-b719-b9
    image:
      debug: false
      pullPolicy: IfNotPresent
      registry: docker.io
      repository: bitnami/postgresql
      tag: 11.5.0-debian-9-r60
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    master:
      affinity: {}
      extraVolumeMounts: []
      extraVolumes: []
      nodeSelector: {}
      podAnnotations: {}
      podLabels: {}
      tolerations: []
    metrics:
      enabled: false
      image:
        pullPolicy: IfNotPresent
        registry: docker.io
        repository: bitnami/postgres-exporter
        tag: 0.5.1-debian-9-r73
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      securityContext:
        enabled: false
        runAsUser: 1001
      service:
        annotations:
          prometheus.io/port: "9187"
          prometheus.io/scrape: "true"
        loadBalancerIP: null
        type: ClusterIP
      serviceMonitor:
        additionalLabels: {}
        enabled: false
    networkPolicy:
      allowExternal: true
      enabled: false
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: false
      mountPath: /bitnami/postgresql
      size: 8Gi
      subPath: ""
    postgresqlDataDir: /bitnami/postgresql/data
    postgresqlDatabase: javadatabase
    postgresqlPassword: javapassword
    postgresqlUsername: javapostgres
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replication:
      applicationName: my_application
      enabled: false
      numSynchronousReplicas: 0
      password: repl_password
      slaveReplicas: 1
      synchronousCommit: "off"
      user: repl_user
    resources:
      requests:
        cpu: 250m
        memory: 256Mi
    securityContext:
      enabled: true
      fsGroup: 1001
      runAsUser: 1001
    service:
      annotations: {}
      port: 5432
      type: ClusterIP
    serviceAccount:
      enabled: false
    slave:
      affinity: {}
      extraVolumeMounts: []
      extraVolumes: []
      nodeSelector: {}
      podAnnotations: {}
      podLabels: {}
      tolerations: []
    updateStrategy:
      type: RollingUpdate
    volumePermissions:
      enabled: true
      image:
        pullPolicy: Always
        registry: docker.io
        repository: bitnami/minideb
        tag: stretch
      securityContext:
        runAsUser: 0
  prometheus:
    enabled: false
    path: /prometheus
  readinessDelay: 30
  readinessPath: /health
  readinessPeriod: 15
  readinessTimeout: 3
  registerAdditionalDns:
    enabled: false
  replicas: 1
  smoketests:
    cpuLimits: 500m
    cpuRequests: 100m
    enabled: false
    image: hmctspublic.azurecr.io/spring-boot/template
    memoryLimits: 1024Mi
    memoryRequests: 256Mi
  smoketestscron:
    backoffLimit: 2
    cpuLimits: 2500m
    cpuRequests: 25m
    enabled: false
    global:
      devMode: false
      enableKeyVaults: false
      subscriptionId: 1c4f0704-a29e-403d-b719-b9
    kind: CronJob
    memoryLimits: 1024Mi
    memoryRequests: 512Mi
    restartPolicy: OnFailure
  useInterpodAntiAffinity: false
postgresql:
  affinity: {}
  extraEnv: {}
  global:
    subscriptionId: 1c4f0704-a29e-403d-b719-b9
  image:
    debug: false
    pullPolicy: Always
    registry: docker.io
    repository: bitnami/postgresql
    tag: 11.3.0
  initdbScripts:
    init.sql: |-
      CREATE DATABASE claimstore WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
      CREATE DATABASE cmc WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
      CREATE DATABASE features WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
      CREATE DATABASE "data-store" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
      CREATE DATABASE "definition-store" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  metrics:
    enabled: false
    image:
      pullPolicy: IfNotPresent
      registry: docker.io
      repository: wrouesnel/postgres_exporter
      tag: v0.4.6
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    service:
      annotations:
        prometheus.io/port: "9187"
        prometheus.io/scrape: "true"
      loadBalancerIP: null
      type: ClusterIP
  nameOverride: postgres
  networkPolicy:
    allowExternal: true
    enabled: false
  nodeSelector: {}
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: false
    size: 8Gi
  postgresqlDatabase: user-profile
  postgresqlPassword: hmcts
  postgresqlUsername: hmcts
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replication:
    enabled: false
    password: repl_password
    slaveReplicas: 1
    user: repl_user
  resources:
    requests:
      cpu: 25m
      memory: 256Mi
  securityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001
  service:
    annotations: {}
    port: 5432
    type: ClusterIP
  tolerations: []
  volumePermissions:
    image:
      pullPolicy: Always
      registry: docker.io
      repository: bitnami/minideb
      tag: latest
    securityContext:
      runAsUser: 0
tags:
  ccd-idam-pr: true
  cmc-citizen-frontend-pod: true
  cmc-claim-store-postgresql-pod: true

HOOKS:
---
# Source: cmc-claim-store/charts/ccd/charts/ccd-definition-importer/templates/definition-importer.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: cmc-claim-store-pr-1390-definition-importer
  labels:    
    app.kubernetes.io/name: cmc-claim-store-pr-1390-definition-importer
    helm.sh/chart: ccd-definition-importer-1.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: cmc-claim-store-pr-1390-definition-importer
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "5"
    helm.sh/hook-delete-policy: before-hook-creation  # Move to hook-succeeded after first charts are done 
spec:
  template:
    metadata:
      name: cmc-claim-store-pr-1390-definition-importer
      labels:        
        app.kubernetes.io/name: cmc-claim-store-pr-1390-definition-importer
        helm.sh/chart: ccd-definition-importer-1.1.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: cmc-claim-store-pr-1390-definition-importer
    spec:
      containers:
        - name: cmc-claim-store-pr-1390-definition-importer
          image: hmctspublic.azurecr.io/ccd/definition-importer:latest
          imagePullPolicy: IfNotPresent
          env:          
          - name: CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: importer-creds
                key: idam-client-secret
          - name: IMPORTER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: importer-creds
                key: password
          - name: IMPORTER_USERNAME
            valueFrom:
              secretKeyRef:
                name: importer-creds
                key: username
          - name: CCD_DEF_URLS
            value: ""
          - name: CCD_DEF_FILENAME
            value: ""
          - name: WAIT_HOSTS
            value: ""
          - name: WAIT_HOSTS_TIMEOUT
            value: "300"
          - name: CREATE_IMPORTER_USER
            value: "false"
          - name: IDAM_URI
            value: 
          - name: REDIRECT_URI  
            value: https:///oauth2redirect
          - name: CLIENT_ID
            value: ccd_admin
          - name: USER_ROLES
            value: caseworker-cmc
          - name: MICROSERVICE_BASE_URL
            value: http://
          - name: AUTH_PROVIDER_BASE_URL
            value: http://cmc-claim-store-pr-1390-s2s
          - name: MICROSERVICE
            value: ccd_gw
          - name: CCD_STORE_BASE_URL
            value: http://cmc-claim-store-pr-1390-ccd-definition-store
          - name: VERBOSE
            value: "true"
          resources:
            requests:
              memory: 512Mi
              cpu: 250m
            limits:
              memory: 2048Mi
              cpu: 1500m
      restartPolicy: Never
---
# Source: cmc-claim-store/charts/java/templates/tests/test-service.yaml
apiVersion: v1
kind: Pod
metadata:
  name: cmc-claim-store-pr-1390-java-test
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
  - name: cmc-claim-store-pr-1390-java-test
    image: busybox
    env:
      - name: SERVICE_NAME
        value: cmc-claim-store-pr-1390-java
    command: ["sh", "-c", "httpstatuscode=$(wget -S http://$SERVICE_NAME/health 2>&1 | grep HTTP/ | awk 'END{print $2}') && [ \"$httpstatuscode\" = \"200\" ]"]
  restartPolicy: Never
---
# Source: cmc-claim-store/charts/ccd/charts/ccd-admin-web/charts/idam-pr/templates/add-redirect-uri.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: cmc-claim-store-pr-1390-ccd-admin-web-idam-pr-add
  labels:
    app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-admin-web-idam-pr-add
    helm.sh/chart: "idam-pr-2.2.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "cmc-claim-store-pr-1390"
  annotations:
    helm.sh/hook: post-install
    helm.sh/hook-weight: "-5"
    helm.sh/hook-delete-policy: "before-hook-creation"
spec:
  template:
    metadata:
      name: cmc-claim-store-pr-1390-ccd-admin-web-idam-pr-add
      labels:
        app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-admin-web-idam-pr-add
    spec:
      volumes:
        - name: container-init
          configMap:
            name: cmc-claim-store-pr-1390-ccd-admin-web-idam-pr-bin-add
            defaultMode: 0755
      containers:
        - name: cmc-claim-store-pr-1390-ccd-admin-web-idam-pr-add
          image: hmcts/curl
          volumeMounts:
            - name: container-init
              mountPath: /container.init
          command: [ "/bin/sh" ]
          args:
            - /container.init/idam-pr-add
          resources:
            requests:
              memory: 512Mi
              cpu: 25m
            limits:
              memory: 1024Mi
              cpu: 2500m
      restartPolicy: Never
---
# Source: cmc-claim-store/charts/ccd/charts/ccd-definition-store-api/charts/java/templates/tests/test-service.yaml
apiVersion: v1
kind: Pod
metadata:
  name: cmc-claim-store-pr-1390-ccd-definition-store-test
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
  - name: cmc-claim-store-pr-1390-ccd-definition-store-test
    image: busybox
    env:
      - name: SERVICE_NAME
        value: cmc-claim-store-pr-1390-ccd-definition-store
    command: ["sh", "-c", "httpstatuscode=$(wget -S http://$SERVICE_NAME/health 2>&1 | grep HTTP/ | awk 'END{print $2}') && [ \"$httpstatuscode\" = \"200\" ]"]
  restartPolicy: Never
---
# Source: cmc-claim-store/charts/ccd/charts/ccd-user-profile-importer/templates/user-profile-importer.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: cmc-claim-store-pr-1390-user-profile-importer
  labels:    
    app.kubernetes.io/name: cmc-claim-store-pr-1390-user-profile-importer
    helm.sh/chart: ccd-user-profile-importer-1.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: cmc-claim-store-pr-1390-user-profile-importer
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "5"
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  template:
    metadata:
      name: cmc-claim-store-pr-1390-user-profile-importer
      labels:        
        app.kubernetes.io/name: cmc-claim-store-pr-1390-user-profile-importer
        helm.sh/chart: ccd-user-profile-importer-1.1.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: cmc-claim-store-pr-1390-user-profile-importer
    spec:
      restartPolicy: Never
      containers:
        - name: cmc-claim-store-pr-1390-user-profile-importer
          image: hmctspublic.azurecr.io/ccd/user-profile-importer:latest 
          imagePullPolicy: IfNotPresent
          env:
          - name: CCD_USER_PROFILE_URL
            value: http://cmc-claim-store-pr-1390-ccd-user-profile-api
          - name: AUTH_PROVIDER_BASE_URL
            value: http://cmc-claim-store-pr-1390-s2s
          - name: MICROSERVICE
            value: ccd_definition
          - name: CCD_USERS
            value: ""
          - name: WAIT_HOSTS
            value: ""
          - name: WAIT_HOSTS_TIMEOUT
            value: "300"
          - name: VERBOSE
            value: 
          resources:
            requests:
              memory: 512Mi
              cpu: 250m
            limits:
              memory: 2048Mi
              cpu: 1500m
---
# Source: cmc-claim-store/charts/ccd/charts/rpe-service-auth-provider/charts/java/templates/tests/test-service.yaml
apiVersion: v1
kind: Pod
metadata:
  name: cmc-claim-store-pr-1390-s2s-test
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
  - name: cmc-claim-store-pr-1390-s2s-test
    image: busybox
    env:
      - name: SERVICE_NAME
        value: cmc-claim-store-pr-1390-s2s
    command: ["sh", "-c", "httpstatuscode=$(wget -S http://$SERVICE_NAME/health 2>&1 | grep HTTP/ | awk 'END{print $2}') && [ \"$httpstatuscode\" = \"200\" ]"]
  restartPolicy: Never
---
# Source: cmc-claim-store/charts/ccd/charts/ccd-admin-web/charts/idam-pr/templates/bin-configmap-delete.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cmc-claim-store-pr-1390-ccd-admin-web-idam-pr-bin-delete
  labels:
    type: configuration
    app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-admin-web-idam-pr-bin-delete
    helm.sh/chart: "idam-pr-2.2.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "cmc-claim-store-pr-1390"
  annotations:
    helm.sh/hook: pre-delete
    helm.sh/hook-weight: "-5"
    helm.sh/hook-delete-policy: "before-hook-creation"
data:
  idam-pr-delete: |
    #!/usr/bin/env sh
    set -e
    
    for redirect_uri in https:///oauth2redirect
    do
    echo "Removing redirect URI for service CCD Admin: ${redirect_uri} using "
    
    curl -X PATCH \
      /testing-support/services/CCD%20Admin \
      -H 'Accept: application/json' \
      -H 'Content-Type: application/json' \
      -d '[ {
    	"operation": "remove",
    	"field": "redirect_uri",
    	"value": "'${redirect_uri}'"
    }
    ]'
    done
    
    for redirect_uri in http://localhost/oauth2/receiver
    do
    echo "Removing redirect URI for service test-public-service: ${redirect_uri} using "
    
    curl -X PATCH \
      /testing-support/services/test-public-service \
      -H 'Accept: application/json' \
      -H 'Content-Type: application/json' \
      -d '[ {
    	"operation": "remove",
    	"field": "redirect_uri",
    	"value": "'${redirect_uri}'"
    }
    ]'
    done
---
# Source: cmc-claim-store/charts/ccd/charts/ccd-admin-web/charts/idam-pr/templates/tests/test-service.yaml
apiVersion: v1
kind: Pod
metadata:
  name: cmc-claim-store-pr-1390-ccd-admin-web-idam-pr-bin-test-service
  annotations:
    helm.sh/hook: test-success
spec:
  volumes:
    - name: container-init
      configMap:
        name: cmc-claim-store-pr-1390-ccd-admin-web-idam-pr-bin-test
        defaultMode: 0755
  containers:
  - name: cmc-claim-store-pr-1390-ccd-admin-web-idam-pr-bin-test
    image: hmcts/curl
    volumeMounts:
      - name: container-init
        mountPath: /container.init
    command: [ "/bin/sh" ]
    args:
      - /container.init/idam-pr-test
  restartPolicy: Never
---
# Source: cmc-claim-store/charts/ccd/charts/ccd-data-store-api/charts/java/templates/tests/test-service.yaml
apiVersion: v1
kind: Pod
metadata:
  name: cmc-claim-store-pr-1390-ccd-data-store-api-test
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
  - name: cmc-claim-store-pr-1390-ccd-data-store-api-test
    image: busybox
    env:
      - name: SERVICE_NAME
        value: cmc-claim-store-pr-1390-ccd-data-store-api
    command: ["sh", "-c", "httpstatuscode=$(wget -S http://$SERVICE_NAME/health 2>&1 | grep HTTP/ | awk 'END{print $2}') && [ \"$httpstatuscode\" = \"200\" ]"]
  restartPolicy: Never
---
# Source: cmc-claim-store/charts/ccd/charts/ccd-user-profile-api/charts/java/templates/tests/test-service.yaml
apiVersion: v1
kind: Pod
metadata:
  name: cmc-claim-store-pr-1390-ccd-user-profile-api-test
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
  - name: cmc-claim-store-pr-1390-ccd-user-profile-api-test
    image: busybox
    env:
      - name: SERVICE_NAME
        value: cmc-claim-store-pr-1390-ccd-user-profile-api
    command: ["sh", "-c", "httpstatuscode=$(wget -S http://$SERVICE_NAME/health 2>&1 | grep HTTP/ | awk 'END{print $2}') && [ \"$httpstatuscode\" = \"200\" ]"]
  restartPolicy: Never
---
# Source: cmc-claim-store/charts/ccd/charts/ccd-admin-web/charts/idam-pr/templates/delete-redirect-uri.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: cmc-claim-store-pr-1390-ccd-admin-web-idam-pr-del
  labels:
    app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-admin-web-idam-pr-del
    helm.sh/chart: "idam-pr-2.2.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "cmc-claim-store-pr-1390"
  annotations:
    helm.sh/hook: post-delete
    helm.sh/hook-weight: "-5"
    helm.sh/hook-delete-policy: "before-hook-creation"
spec:
  template:
    metadata:
      name: cmc-claim-store-pr-1390-ccd-admin-web-idam-pr-del
      labels:
        app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-admin-web-idam-pr-del
    spec:
      volumes:
        - name: container-init
          configMap:
            name: cmc-claim-store-pr-1390-ccd-admin-web-idam-pr-bin-delete
            defaultMode: 0755
      containers:
        - name: cmc-claim-store-pr-1390-ccd-admin-web-idam-pr-del
          image: hmcts/curl
          volumeMounts:
            - name: container-init
              mountPath: /container.init
          command: [ "/bin/sh" ]
          args:
            - /container.init/idam-pr-delete
          resources:
            requests:
              memory: 512Mi
              cpu: 25m
            limits:
              memory: 1024Mi
              cpu: 2500m
      restartPolicy: Never
---
# Source: cmc-claim-store/charts/ccd/charts/ccd-admin-web/charts/nodejs/templates/tests/test-service.yaml
apiVersion: v1
kind: Pod
metadata:
  name: cmc-claim-store-pr-1390-ccd-admin-web-test-service
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
  - name: cmc-claim-store-pr-1390-ccd-admin-web-test-service
    image: busybox
    env:
      - name: SERVICE_NAME
        value: cmc-claim-store-pr-1390-ccd-admin-web
    command: ["sh", "-c"]
    args:
      - echo 'Testing readiness';
        readinessStatusCode=$(wget -S http://$SERVICE_NAME/health 2>&1 | grep HTTP/ | awk 'END{print $2}');
        test "$readinessStatusCode" = "200"; echo $?;
        echo 'Testing liveness';
        livenessStatusCode=$(wget -S http://$SERVICE_NAME/health/liveness 2>&1 | grep HTTP/ | awk 'END{print $2}');
        test "$livenessStatusCode" = "200"; echo $?;
  restartPolicy: Never
MANIFEST:
---
# Source: cmc-claim-store/charts/ccd/charts/ccd-admin-web/charts/nodejs/templates/pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name:  cmc-claim-store-pr-1390-ccd-admin-web
  labels:    
    app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-admin-web
    helm.sh/chart: nodejs-1.8.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: cmc-claim-store-pr-1390-ccd-admin-web
spec:
  maxUnavailable: 50%
  selector:
    matchLabels:
      app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-admin-web
---
# Source: cmc-claim-store/charts/ccd/charts/ccd-data-store-api/charts/java/templates/pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name:  cmc-claim-store-pr-1390-ccd-data-store-api
  labels:    
    app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-data-store-api
    helm.sh/chart: java-2.15.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: cmc-claim-store-pr-1390-ccd-data-store-api
    aadpodidbinding: ccd
spec:
  maxUnavailable: 50%
  selector:
    matchLabels:
      app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-data-store-api
---
# Source: cmc-claim-store/charts/ccd/charts/ccd-definition-store-api/charts/java/templates/pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name:  cmc-claim-store-pr-1390-ccd-definition-store
  labels:    
    app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-definition-store
    helm.sh/chart: java-2.15.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: cmc-claim-store-pr-1390-ccd-definition-store
    aadpodidbinding: ccd
spec:
  maxUnavailable: 50%
  selector:
    matchLabels:
      app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-definition-store
---
# Source: cmc-claim-store/charts/ccd/charts/ccd-user-profile-api/charts/java/templates/pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name:  cmc-claim-store-pr-1390-ccd-user-profile-api
  labels:    
    app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-user-profile-api
    helm.sh/chart: java-2.15.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: cmc-claim-store-pr-1390-ccd-user-profile-api
    aadpodidbinding: ccd
spec:
  maxUnavailable: 50%
  selector:
    matchLabels:
      app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-user-profile-api
---
# Source: cmc-claim-store/charts/ccd/charts/rpe-service-auth-provider/charts/java/templates/pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name:  cmc-claim-store-pr-1390-s2s
  labels:    
    app.kubernetes.io/name: cmc-claim-store-pr-1390-s2s
    helm.sh/chart: java-2.15.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: cmc-claim-store-pr-1390-s2s
    aadpodidbinding: rpe
spec:
  maxUnavailable: 50%
  selector:
    matchLabels:
      app.kubernetes.io/name: cmc-claim-store-pr-1390-s2s
---
# Source: cmc-claim-store/charts/java/templates/pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name:  cmc-claim-store-pr-1390-java
  labels:    
    app.kubernetes.io/name: cmc-claim-store-pr-1390-java
    helm.sh/chart: java-2.13.3
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: cmc-claim-store-pr-1390-java
spec:
  maxUnavailable: 50%
  selector:
    matchLabels:
      app.kubernetes.io/name: cmc-claim-store-pr-1390-java
---
# Source: cmc-claim-store/charts/ccd/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cmc-claim-store-pr-1390-postgresql
  labels:
    app: postgresql
    chart: postgresql-6.3.15
    release: "cmc-claim-store-pr-1390"
    heritage: "Helm"
type: Opaque
data:
  postgresql-password: "aG1jdHM="
---
# Source: cmc-claim-store/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cmc-claim-store-pr-1390-postgres
  labels:
    app: postgres
    chart: postgresql-2.6.6
    release: "cmc-claim-store-pr-1390"
    heritage: "Helm"
type: Opaque
data:
  
  postgresql-password: "aG1jdHM="
---
# Source: cmc-claim-store/charts/ccd/charts/ccd-admin-web/charts/idam-pr/templates/bin-configmap-add.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cmc-claim-store-pr-1390-ccd-admin-web-idam-pr-bin-add
  labels:
    type: configuration
    app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-admin-web-idam-pr-bin-add
    helm.sh/chart: "idam-pr-2.2.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "cmc-claim-store-pr-1390"
data:
  idam-pr-add: |
    #!/usr/bin/env sh
    set -e
    
    for redirect_uri in https:///oauth2redirect
    do
    echo "Registering new redirect URI for service CCD Admin: ${redirect_uri} using "
    
    curl -X PATCH \
      /testing-support/services/CCD%20Admin \
      -H 'Accept: application/json' \
      -H 'Content-Type: application/json' \
      -d '[ {
    	"operation": "add",
    	"field": "redirect_uri",
    	"value": "'${redirect_uri}'"
    }
    ]'
    done
    
    for redirect_uri in http://localhost/oauth2/receiver
    do
    echo "Registering new redirect URI for service test-public-service: ${redirect_uri} using "
    
    curl -X PATCH \
      /testing-support/services/test-public-service \
      -H 'Accept: application/json' \
      -H 'Content-Type: application/json' \
      -d '[ {
    	"operation": "add",
    	"field": "redirect_uri",
    	"value": "'${redirect_uri}'"
    }
    ]'
    done
---
# Source: cmc-claim-store/charts/ccd/charts/ccd-admin-web/charts/idam-pr/templates/bin-configmap-test.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cmc-claim-store-pr-1390-ccd-admin-web-idam-pr-bin-test
  labels:
    type: configuration
    app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-admin-web-idam-pr-bin-test
    helm.sh/chart: "idam-pr-2.2.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "cmc-claim-store-pr-1390"
data:
  idam-pr-test: |
    #!/usr/bin/env sh
    
    testUsername="james.bond$(($(date +%s%N)/1000))@hmcts.net"
    testPassword="Agent007"
    
    echo "================================================================"
    echo "Creating a new test user $testUsername"
    echo "================================================================"
    curl -s -X POST /testing-support/accounts \
      -H 'Content-Type: application/json' \
      -d '{"email": "'$testUsername'", "forename": "James", "surname": "Bond", "password": "'$testPassword'", "roles": [{"code": "citizen"}]}'
    
    echo "================================================================"
    echo "Testing each redirect_uri"
    echo "================================================================"
    
    for redirect_uri in https:///oauth2redirect
    do
    echo "================================================================"
    echo "Getting the csrf token: CCD Admin / ${redirect_uri}"
    echo "================================================================"
    getLoginPage=$(curl -s -v -c cookies.txt -b cookies.txt '/login?redirect_uri=${redirect_uri}&client_id=CCD Admin' 2<&1)
    csrf=$(cat cookies.txt | grep -oE 'TOKEN.*' | grep -oE '[^TOKEN\t]+' | tr -d '[:space:]' 2<&1)
    echo "================================================================"
    echo "found token $csrf: CCD Admin / ${redirect_uri}"
    echo "================================================================"
    response=$(curl -s -i -c cookies.txt -b cookies.txt -d "_csrf=$csrf&client_id=CCD Admin&username=$testUsername&password=$testPassword&redirect_uri=${redirect_uri}&state=12345&selfRegistrationEnabled=true" '/login' 2<&1)
    httpCode=$(echo $response | grep -Eo 302)
    done
    
    for redirect_uri in http://localhost/oauth2/receiver
    do
    echo "================================================================"
    echo "Getting the csrf token: test-public-service / ${redirect_uri}"
    echo "================================================================"
    getLoginPage=$(curl -s -v -c cookies.txt -b cookies.txt '/login?redirect_uri=${redirect_uri}&client_id=test-public-service' 2<&1)
    csrf=$(cat cookies.txt | grep -oE 'TOKEN.*' | grep -oE '[^TOKEN\t]+' | tr -d '[:space:]' 2<&1)
    echo "================================================================"
    echo "found token $csrf: test-public-service / ${redirect_uri}"
    echo "================================================================"
    response=$(curl -s -i -c cookies.txt -b cookies.txt -d "_csrf=$csrf&client_id=test-public-service&username=$testUsername&password=$testPassword&redirect_uri=${redirect_uri}&state=12345&selfRegistrationEnabled=true" '/login' 2<&1)
    httpCode=$(echo $response | grep -Eo 302)
    done
    
    echo "================================================================"
    echo "Deleting the test user"
    echo "================================================================"
    curl -s -X DELETE "/testing-support/accounts/$testUsername"
    
    if [ "$httpCode"  == "302" ]; then
      echo "================================================================"
      echo "HTTP response code was $httpCode"
      echo "================================================================"
      echo "LOGIN SUCCEEDED WITH PROVIDED CLIENT_ID AND REDIRECT_URI"
    else
      echo "================================================================"
      echo "Was incorrectly redirected to login page"
      echo "================================================================"
      echo "LOGIN FAILED WITH SUPPLIED DETAILS"
      exit 1
    fi
---
# Source: cmc-claim-store/charts/ccd/charts/postgresql/templates/initialization-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cmc-claim-store-pr-1390-postgresql-init-scripts
  labels:
    app: postgresql
    chart: postgresql-6.3.15
    release: "cmc-claim-store-pr-1390"
    heritage: "Helm"
data:
  init.sql: |-
    CREATE DATABASE "data-store" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
    CREATE DATABASE "definition-store" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
    CREATE DATABASE "user-profile" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
    CREATE DATABASE "draftstore" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
    CREATE DATABASE "payment" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
    CREATE DATABASE "evidence" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
    CREATE DATABASE "annotation" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
---
# Source: cmc-claim-store/charts/postgresql/templates/initialization-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cmc-claim-store-pr-1390-postgres-init-scripts
  labels:
    app: postgres
    chart: postgresql-2.6.6
    release: "cmc-claim-store-pr-1390"
    heritage: "Helm"
data:
  README.md: |-
    You can copy here your custom `.sh`, `.sql` or `.sql.gz` file so they are executed during the first boot of the image.
  
    More info in the [bitnami-docker-postgresql](https://github.com/bitnami/bitnami-docker-postgresql#initializing-a-new-instance) repository.
  init.sql: |-
    CREATE DATABASE claimstore WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
    CREATE DATABASE cmc WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
    CREATE DATABASE features WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
    CREATE DATABASE "data-store" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
    CREATE DATABASE "definition-store" WITH OWNER = hmcts ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
---
# Source: cmc-claim-store/charts/ccd/charts/ccd-admin-web/charts/nodejs/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cmc-claim-store-pr-1390-ccd-admin-web
  labels:    
    app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-admin-web
    helm.sh/chart: nodejs-1.8.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: cmc-claim-store-pr-1390-ccd-admin-web
spec:
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 3100
  selector:
    app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-admin-web
---
# Source: cmc-claim-store/charts/ccd/charts/ccd-data-store-api/charts/java/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cmc-claim-store-pr-1390-ccd-data-store-api
  labels:    
    app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-data-store-api
    helm.sh/chart: java-2.15.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: cmc-claim-store-pr-1390-ccd-data-store-api
    aadpodidbinding: ccd
spec:
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 4452
  selector:
    app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-data-store-api
---
# Source: cmc-claim-store/charts/ccd/charts/ccd-definition-store-api/charts/java/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cmc-claim-store-pr-1390-ccd-definition-store
  labels:    
    app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-definition-store
    helm.sh/chart: java-2.15.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: cmc-claim-store-pr-1390-ccd-definition-store
    aadpodidbinding: ccd
spec:
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 4451
  selector:
    app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-definition-store
---
# Source: cmc-claim-store/charts/ccd/charts/ccd-user-profile-api/charts/java/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cmc-claim-store-pr-1390-ccd-user-profile-api
  labels:    
    app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-user-profile-api
    helm.sh/chart: java-2.15.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: cmc-claim-store-pr-1390-ccd-user-profile-api
    aadpodidbinding: ccd
spec:
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 4453
  selector:
    app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-user-profile-api
---
# Source: cmc-claim-store/charts/ccd/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: cmc-claim-store-pr-1390-postgresql-headless
  labels:
    app: postgresql
    chart: postgresql-6.3.15
    release: "cmc-claim-store-pr-1390"
    heritage: "Helm"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: postgresql
    release: "cmc-claim-store-pr-1390"
---
# Source: cmc-claim-store/charts/ccd/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: cmc-claim-store-pr-1390-postgresql
  labels:
    app: postgresql
    chart: postgresql-6.3.15
    release: "cmc-claim-store-pr-1390"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: postgresql
    release: "cmc-claim-store-pr-1390"
    role: master
---
# Source: cmc-claim-store/charts/ccd/charts/rpe-service-auth-provider/charts/java/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cmc-claim-store-pr-1390-s2s
  labels:    
    app.kubernetes.io/name: cmc-claim-store-pr-1390-s2s
    helm.sh/chart: java-2.15.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: cmc-claim-store-pr-1390-s2s
    aadpodidbinding: rpe
spec:
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8489
  selector:
    app.kubernetes.io/name: cmc-claim-store-pr-1390-s2s
---
# Source: cmc-claim-store/charts/java/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cmc-claim-store-pr-1390-java
  labels:    
    app.kubernetes.io/name: cmc-claim-store-pr-1390-java
    helm.sh/chart: java-2.13.3
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: cmc-claim-store-pr-1390-java
spec:
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 4400
  selector:
    app.kubernetes.io/name: cmc-claim-store-pr-1390-java
---
# Source: cmc-claim-store/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: cmc-claim-store-pr-1390-postgres-headless
  labels:
    app: postgres
    chart: postgresql-2.6.6
    release: "cmc-claim-store-pr-1390"
    heritage: "Helm"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: postgres
    release: "cmc-claim-store-pr-1390"
---
# Source: cmc-claim-store/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: cmc-claim-store-pr-1390-postgres
  labels:
    app: postgres
    chart: postgresql-2.6.6
    release: "cmc-claim-store-pr-1390"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port:  5432
    targetPort: postgresql
  selector:
    app: postgres
    release: "cmc-claim-store-pr-1390"
    role: master
---
# Source: cmc-claim-store/charts/ccd/charts/ccd-admin-web/charts/nodejs/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cmc-claim-store-pr-1390-ccd-admin-web
  labels:    
    app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-admin-web
    helm.sh/chart: nodejs-1.8.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: cmc-claim-store-pr-1390-ccd-admin-web
  annotations:    
spec:
  revisionHistoryLimit: 0
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-admin-web
  template:
    metadata:
      labels:        
        app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-admin-web
        helm.sh/chart: nodejs-1.8.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: cmc-claim-store-pr-1390-ccd-admin-web
      annotations:        
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000      
      containers:
      - image: hmctspublic.azurecr.io/ccd/admin-web:latest
        name: cmc-claim-store-pr-1390-ccd-admin-web
        securityContext:
          allowPrivilegeEscalation: false
        env:
        - name: APPINSIGHTS_INSTRUMENTATIONKEY
          value: "00000000-0000-0000-0000-000000000000"        
        - name: ADMINWEB_AUTHORIZATION_URL
          value: "http://cmc-claim-store-pr-1390-ccd-definition-store/api/idam/adminweb/authorization"
        - name: ADMINWEB_CREATE_DEFINITION_URL
          value: "http://cmc-claim-store-pr-1390-ccd-definition-store/api/draft"
        - name: ADMINWEB_DEFINITIONS_URL
          value: "http://cmc-claim-store-pr-1390-ccd-definition-store/api/drafts"
        - name: ADMINWEB_IMPORT_AUDITS_URL
          value: "http://cmc-claim-store-pr-1390-ccd-definition-store/api/import-audits"
        - name: ADMINWEB_IMPORT_URL
          value: "http://cmc-claim-store-pr-1390-ccd-definition-store/import"
        - name: ADMINWEB_JURISDICTIONS_URL
          value: "http://cmc-claim-store-pr-1390-ccd-definition-store/api/data/jurisdictions"
        - name: ADMINWEB_LOGIN_URL
          value: "/login"
        - name: ADMINWEB_ROLES_WHITELIST
          value: "ccd-import,ccd-import-validate"
        - name: ADMINWEB_SAVE_USER_PROFILE_URL
          value: "http://cmc-claim-store-pr-1390-ccd-user-profile-api/users/save"
        - name: ADMINWEB_UPDATE_DEFINITION_URL
          value: "http://cmc-claim-store-pr-1390-ccd-definition-store/api/draft/save"
        - name: ADMINWEB_USER_PROFILE_URL
          value: "http://cmc-claim-store-pr-1390-ccd-user-profile-api/users"
        - name: ADMINWEB_USER_ROLE_URL
          value: "http://cmc-claim-store-pr-1390-ccd-definition-store/api/user-role"
        - name: ADMINWEB_WHOAMI_URL
          value: "http://cmc-claim-store-pr-1390-ccd-definition-store/api/idam/profile"
        - name: ADMIN_ALL_USER_ROLES_URL
          value: "http://cmc-claim-store-pr-1390-ccd-definition-store/api/user-roles"
        - name: HPKP_MAX_AGE
          value: "2.592e+06"
        - name: HPKP_SHA256S
          value: "Set-proper-SHA256s"
        - name: IDAM_ADMIN_WEB_SERVICE_KEY
          value: "AAAAAAAAAAAAAAAA"
        - name: IDAM_BASE_URL
          value: ""
        - name: IDAM_OAUTH2_CLIENT_ID
          value: "ccd_admin"
        - name: IDAM_OAUTH2_LOGOUT_ENDPOINT
          value: "/session/:token"
        - name: IDAM_OAUTH2_TOKEN_ENDPOINT
          value: "/oauth2/token"
        - name: IDAM_S2S_URL
          value: "http://cmc-claim-store-pr-1390-s2s"
        - name: IDAM_SERVICE_NAME
          value: "ccd_admin"
        - name: NODE_CONFIG_DIR
          value: "./config"
        - name: NODE_ENV
          value: "production"
        - name: REFORM_SERVICE_NAME
          value: "admin-web"
        - name: REFORM_TEAM
          value: "ccd"
        - name: SECURE_AUTH_COOKIE_ENABLED
          value: "true"
        - name: SECURITY_REFERRER_POLICY
          value: "origin"
        - name: TS_BASE_URL
          value: "./src/main"
        - name: USE_CSRF_PROTECTION
          value: "true"
        - name: UV_THREADPOOL_SIZE
          value: "64"        
        resources:
          requests:
            memory: 64Mi
            cpu: 25m
          limits:
            memory: 512Mi
            cpu: 1
        ports:
        - containerPort: 3100
          name: http
        livenessProbe:
          httpGet:
            path: /health/liveness
            port: 3100
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 15
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3100
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 15
        imagePullPolicy: IfNotPresent
---
# Source: cmc-claim-store/charts/ccd/charts/ccd-data-store-api/charts/java/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  cmc-claim-store-pr-1390-ccd-data-store-api
  labels:    
    app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-data-store-api
    helm.sh/chart: java-2.15.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: cmc-claim-store-pr-1390-ccd-data-store-api
    aadpodidbinding: ccd
  annotations:    
spec:
  revisionHistoryLimit: 0
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-data-store-api
  template:
    metadata:
      labels:        
        app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-data-store-api
        helm.sh/chart: java-2.15.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: cmc-claim-store-pr-1390-ccd-data-store-api
        aadpodidbinding: ccd
      annotations:        
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - image: hmctspublic.azurecr.io/ccd/data-store-api:latest
        name: cmc-claim-store-pr-1390-ccd-data-store-api
        securityContext:
          allowPrivilegeEscalation: false
        env:                
        - name: CCD_DEFAULTPRINTURL
          value: "https://return-case-doc-ccd.nonprod.platform.hmcts.net/jurisdictions/:jid/case-types/:ctid/cases/:cid"
        - name: CCD_DM_DOMAIN
          value: "https?://dm-store.*"
        - name: CCD_DRAFT_STORE_URL
          value: "http://cmc-claim-store-pr-1390-draft-store"
        - name: CCD_DRAFT_TTL_DAYS
          value: "180"
        - name: DATA_STORE_DB_HOST
          value: "cmc-claim-store-pr-1390-postgresql"
        - name: DATA_STORE_DB_MAX_POOL_SIZE
          value: "10"
        - name: DATA_STORE_DB_NAME
          value: "data-store"
        - name: DATA_STORE_DB_OPTIONS
          value: "?stringtype=unspecified"
        - name: DATA_STORE_DB_PASSWORD
          value: "hmcts"
        - name: DATA_STORE_DB_PORT
          value: "5432"
        - name: DATA_STORE_DB_USERNAME
          value: "hmcts"
        - name: DATA_STORE_IDAM_KEY
          value: "AAAAAAAAAAAAAAAA"
        - name: DATA_STORE_S2S_AUTHORISED_SERVICES
          value: "ccd_data,ccd_gw,ccd_ps,probate_backend,divorce_ccd_submission,sscs,sscs_bulkscan,cmc,cmc_claim_store,cmc_claim_external_api,jui_webapp,pui_webapp,bulk_scan_orchestrator,fpl_case_service,iac,finrem_ccd_data_migrator,finrem_case_orchestration,employment_tribunals,ethos_repl_service,ccpay_bubble,ctsc_work_allocation,em_ccd_orchestrator,xui_webapp,bulk_scan_payment_processor"
        - name: DEFINITION_CACHE_EVICTION_POLICY
          value: "NONE"
        - name: DEFINITION_CACHE_LATEST_VERSION_TTL_SEC
          value: "1"
        - name: DEFINITION_CACHE_MAX_IDLE_SEC
          value: "259200"
        - name: DEFINITION_CACHE_MAX_SIZE
          value: "5000"
        - name: DEFINITION_STORE_HOST
          value: "http://cmc-claim-store-pr-1390-ccd-definition-store"
        - name: ELASTIC_SEARCH_BLACKLIST
          value: "query_string"
        - name: ELASTIC_SEARCH_CASE_INDEX_NAME_FORMAT
          value: "%s_cases"
        - name: ELASTIC_SEARCH_CASE_INDEX_TYPE
          value: "_doc"
        - name: ELASTIC_SEARCH_DATA_NODES_HOSTS
          value: ""
        - name: ELASTIC_SEARCH_ENABLED
          value: "false"
        - name: ELASTIC_SEARCH_HOSTS
          value: ""
        - name: ELASTIC_SEARCH_NODES_DISCOVERY_ENABLED
          value: "false"
        - name: ELASTIC_SEARCH_NODES_DISCOVERY_FILTER
          value: "_all"
        - name: ELASTIC_SEARCH_NODES_DISCOVERY_FREQUENCY_MILLIS
          value: "5000"
        - name: ELASTIC_SEARCH_PASSWORD
          value: ""
        - name: ELASTIC_SEARCH_REQUEST_TIMEOUT
          value: "6000"
        - name: ENABLE_DB_MIGRATE
          value: "true"
        - name: HTTP_CLIENT_CONNECTION_TIMEOUT
          value: "10000"
        - name: HTTP_CLIENT_MAX_CLIENT_PER_ROUTE
          value: "20"
        - name: HTTP_CLIENT_MAX_TOTAL
          value: "200"
        - name: HTTP_CLIENT_READ_TIMEOUT
          value: "60000"
        - name: HTTP_CLIENT_SECONDS_IDLE_CONNECTION
          value: "120"
        - name: HTTP_CLIENT_VALIDATE_AFTER_INACTIVITY
          value: "0"
        - name: IDAM_S2S_URL
          value: "http://cmc-claim-store-pr-1390-s2s"
        - name: IDAM_USER_URL
          value: ""
        - name: JPA_CRITERIA_IN_SEARCH_ENABLED
          value: "false"
        - name: USER_PROFILE_HOST
          value: "http://cmc-claim-store-pr-1390-ccd-user-profile-api"

        resources:
          requests:
            memory: 512Mi
            cpu: 250m
          limits:
            memory: 2048Mi
            cpu: 1500m

        ports:
        - containerPort: 4452
          name: http
        livenessProbe:
          httpGet:
            path: /health/liveness
            port: 4452
          initialDelaySeconds: 240
          timeoutSeconds: 3
          periodSeconds: 15
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 4452
          initialDelaySeconds: 240
          timeoutSeconds: 3
          periodSeconds: 15
        imagePullPolicy: IfNotPresent
---
# Source: cmc-claim-store/charts/ccd/charts/ccd-definition-store-api/charts/java/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  cmc-claim-store-pr-1390-ccd-definition-store
  labels:    
    app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-definition-store
    helm.sh/chart: java-2.15.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: cmc-claim-store-pr-1390-ccd-definition-store
    aadpodidbinding: ccd
  annotations:    
spec:
  revisionHistoryLimit: 0
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-definition-store
  template:
    metadata:
      labels:        
        app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-definition-store
        helm.sh/chart: java-2.15.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: cmc-claim-store-pr-1390-ccd-definition-store
        aadpodidbinding: ccd
      annotations:        
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - image: hmctspublic.azurecr.io/ccd/definition-store-api:latest
        name: cmc-claim-store-pr-1390-ccd-definition-store
        securityContext:
          allowPrivilegeEscalation: false
        env:                
        - name: ADMIN_WEB_AUTHORIZATION_ENABLED
          value: "false"
        - name: ADMIN_WEB_AUTHORIZATION_IMPORT_DEFINITION_0
          value: "ccd-import"
        - name: ADMIN_WEB_AUTHORIZATION_MANAGE_DEFINITION_0
          value: "ccd-import"
        - name: ADMIN_WEB_AUTHORIZATION_MANAGE_USER_PROFILE_0
          value: "ccd-import"
        - name: ADMIN_WEB_AUTHORIZATION_MANAGE_USER_ROLE_0
          value: "ccd-import"
        - name: AZURE_STORAGE_BLOB_CONTAINER_REFERENCE
          value: "definition-store"
        - name: AZURE_STORAGE_CONNECTION_STRING
          value: "DefaultEndpointsProtocol=https;AccountName=$(STORAGE_ACCOUNT_NAME);AccountKey=$(STORAGE_ACCOUNT_KEY);EndpointSuffix=core.windows.net"
        - name: AZURE_STORAGE_DEFINITION_UPLOAD_ENABLED
          value: "false"
        - name: DEFINITION_STORE_DB_HOST
          value: "cmc-claim-store-pr-1390-postgresql"
        - name: DEFINITION_STORE_DB_MAX_POOL_SIZE
          value: "5"
        - name: DEFINITION_STORE_DB_NAME
          value: "definition-store"
        - name: DEFINITION_STORE_DB_OPTIONS
          value: ""
        - name: DEFINITION_STORE_DB_PASSWORD
          value: "hmcts"
        - name: DEFINITION_STORE_DB_PORT
          value: "5432"
        - name: DEFINITION_STORE_DB_USERNAME
          value: "hmcts"
        - name: DEFINITION_STORE_S2S_AUTHORISED_SERVICES
          value: "ccd_data,ccd_gw,ccd_admin,jui_webapp,pui_webapp"
        - name: ELASTIC_SEARCH_CASE_INDEX_NAME_FORMAT
          value: "%s_cases"
        - name: ELASTIC_SEARCH_DYNAMIC
          value: "false"
        - name: ELASTIC_SEARCH_ENABLED
          value: "false"
        - name: ELASTIC_SEARCH_FAIL_ON_IMPORT
          value: "true"
        - name: ELASTIC_SEARCH_INDEX_SHARDS
          value: "2"
        - name: ELASTIC_SEARCH_INDEX_SHARDS_REPLICAS
          value: "1"
        - name: ELASTIC_SEARCH_PORT
          value: "9200"
        - name: ELASTIC_SEARCH_SCHEME
          value: "http"
        - name: ENABLE_DB_MIGRATE
          value: "true"
        - name: IDAM_S2S_URL
          value: "http://cmc-claim-store-pr-1390-s2s"
        - name: IDAM_USER_URL
          value: ""
        - name: USER_PROFILE_HOST
          value: "http://cmc-claim-store-pr-1390-ccd-user-profile-api"

        resources:
          requests:
            memory: 1G
            cpu: 250m
          limits:
            memory: 2G
            cpu: 1500m

        ports:
        - containerPort: 4451
          name: http
        livenessProbe:
          httpGet:
            path: /health/liveness
            port: 4451
          initialDelaySeconds: 180
          timeoutSeconds: 3
          periodSeconds: 15
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 4451
          initialDelaySeconds: 180
          timeoutSeconds: 3
          periodSeconds: 15
        imagePullPolicy: IfNotPresent
---
# Source: cmc-claim-store/charts/ccd/charts/ccd-user-profile-api/charts/java/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  cmc-claim-store-pr-1390-ccd-user-profile-api
  labels:    
    app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-user-profile-api
    helm.sh/chart: java-2.15.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: cmc-claim-store-pr-1390-ccd-user-profile-api
    aadpodidbinding: ccd
  annotations:    
spec:
  revisionHistoryLimit: 0
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-user-profile-api
  template:
    metadata:
      labels:        
        app.kubernetes.io/name: cmc-claim-store-pr-1390-ccd-user-profile-api
        helm.sh/chart: java-2.15.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: cmc-claim-store-pr-1390-ccd-user-profile-api
        aadpodidbinding: ccd
      annotations:        
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - image: hmctspublic.azurecr.io/ccd/user-profile-api:latest
        name: cmc-claim-store-pr-1390-ccd-user-profile-api
        securityContext:
          allowPrivilegeEscalation: false
        env:                
        - name: ENABLE_DB_MIGRATE
          value: "true"
        - name: IDAM_S2S_URL
          value: "http://cmc-claim-store-pr-1390-s2s"
        - name: LOGBACK_REQUIRE_ALERT_LEVEL
          value: "false"
        - name: LOGBACK_REQUIRE_ERROR_CODE
          value: "false"
        - name: USER_PROFILE_DB_HOST
          value: "cmc-claim-store-pr-1390-postgresql"
        - name: USER_PROFILE_DB_NAME
          value: "user-profile"
        - name: USER_PROFILE_DB_OPTIONS
          value: "?stringtype=unspecified"
        - name: USER_PROFILE_DB_PASSWORD
          value: "hmcts"
        - name: USER_PROFILE_DB_PORT
          value: "5432"
        - name: USER_PROFILE_DB_USERNAME
          value: "hmcts"
        - name: USER_PROFILE_S2S_AUTHORISED_SERVICES
          value: "ccd_data,ccd_definition,ccd_admin,rd_professional_api"

        resources:
          requests:
            memory: 512Mi
            cpu: 250m
          limits:
            memory: 2048Mi
            cpu: 1500m

        ports:
        - containerPort: 4453
          name: http
        livenessProbe:
          httpGet:
            path: /health/liveness
            port: 4453
          initialDelaySeconds: 120
          timeoutSeconds: 3
          periodSeconds: 15
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 4453
          initialDelaySeconds: 120
          timeoutSeconds: 3
          periodSeconds: 15
        imagePullPolicy: IfNotPresent
---
# Source: cmc-claim-store/charts/ccd/charts/rpe-service-auth-provider/charts/java/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  cmc-claim-store-pr-1390-s2s
  labels:    
    app.kubernetes.io/name: cmc-claim-store-pr-1390-s2s
    helm.sh/chart: java-2.15.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: cmc-claim-store-pr-1390-s2s
    aadpodidbinding: rpe
  annotations:    
spec:
  revisionHistoryLimit: 0
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cmc-claim-store-pr-1390-s2s
  template:
    metadata:
      labels:        
        app.kubernetes.io/name: cmc-claim-store-pr-1390-s2s
        helm.sh/chart: java-2.15.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: cmc-claim-store-pr-1390-s2s
        aadpodidbinding: rpe
      annotations:        
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - image: hmctspublic.azurecr.io/rpe/service-auth-provider:latest
        name: cmc-claim-store-pr-1390-s2s
        securityContext:
          allowPrivilegeEscalation: false
        env:                
        - name: MICROSERVICEKEYS_CCD_ADMIN
          value: "AAAAAAAAAAAAAAAA"
        - name: MICROSERVICEKEYS_CCD_DATA
          value: "AAAAAAAAAAAAAAAA"
        - name: MICROSERVICEKEYS_CCD_DEFINITION
          value: "AAAAAAAAAAAAAAAA"
        - name: MICROSERVICEKEYS_CCD_GW
          value: "AAAAAAAAAAAAAAAA"
        - name: MICROSERVICEKEYS_CCD_PS
          value: "AAAAAAAAAAAAAAAA"
        - name: TESTING_SUPPORT_ENABLED
          value: "true"

        resources:
          requests:
            memory: 512Mi
            cpu: 250m
          limits:
            memory: 2048Mi
            cpu: 1500m

        ports:
        - containerPort: 8489
          name: http
        livenessProbe:
          httpGet:
            path: /health/liveness
            port: 8489
          initialDelaySeconds: 180
          timeoutSeconds: 3
          periodSeconds: 15
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8489
          initialDelaySeconds: 180
          timeoutSeconds: 3
          periodSeconds: 15
        imagePullPolicy: IfNotPresent
---
# Source: cmc-claim-store/charts/java/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  cmc-claim-store-pr-1390-java
  labels:    
    app.kubernetes.io/name: cmc-claim-store-pr-1390-java
    helm.sh/chart: java-2.13.3
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: cmc-claim-store-pr-1390-java
  annotations:    
spec:
  revisionHistoryLimit: 0
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cmc-claim-store-pr-1390-java
  template:
    metadata:
      labels:        
        app.kubernetes.io/name: cmc-claim-store-pr-1390-java
        helm.sh/chart: java-2.13.3
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: cmc-claim-store-pr-1390-java
      annotations:        
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - image: hmctspublic.azurecr.io/cmc/claim-store:latest
        name: cmc-claim-store-pr-1390-java
        securityContext:
          allowPrivilegeEscalation: false
        env:                
        - name: CLAIM_STAYED_SCHEDULE
          value: ""
        - name: CLAIM_STORE_DB_HOST
          value: "cmc-claim-store-pr-1390-postgres"
        - name: CLAIM_STORE_DB_NAME
          value: "claimstore"
        - name: CLAIM_STORE_DB_PASSWORD
          value: "hmcts"
        - name: CLAIM_STORE_DB_PORT
          value: "5432"
        - name: CLAIM_STORE_DB_USERNAME
          value: "hmcts"
        - name: CLAIM_STORE_TEST_SUPPORT_ENABLED
          value: "true"
        - name: CMC_DB_HOST
          value: "cmc-claim-store-pr-1390-postgres"
        - name: CMC_DB_NAME
          value: "cmc"
        - name: CMC_DB_PASSWORD
          value: "hmcts"
        - name: CMC_DB_PORT
          value: "5432"
        - name: CMC_DB_USERNAME
          value: "hmcts"
        - name: CORE_CASE_DATA_API_URL
          value: "http://cmc-claim-store-pr-1390-data-store-api"
        - name: DOCUMENT_MANAGEMENT_URL
          value: "http://dm-store-aat.service.core-compute-aat.internal"
        - name: DOCUMENT_MANAGEMENT_USERROLES
          value: "caseworker-cmc,citizen"
        - name: DOC_ASSEMBLY_URL
          value: "false"
        - name: FEATURE_TOGGLES_SAVE_CLAIM_STATE_ENABLED
          value: "true"
        - name: FEES_URL
          value: "http://fees-register-api-aat.service.core-compute-aat.internal"
        - name: FRONTEND_BASE_URL
          value: "https://cmc-citizen-frontend-aat.service.core-compute-aat.internal"
        - name: IDAM_API_URL
          value: "https://idam-api.aat.platform.hmcts.net"
        - name: IDAM_S2S_AUTH_URL
          value: "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
        - name: LOG_LEVEL
          value: "DEBUG"
        - name: MILO_CSV_SCHEDULE
          value: "-"
        - name: MILO_CSV_SENDER
          value: "noreply@reform.hmcts.net"
        - name: PAY_URL
          value: "http://payment-api-aat.service.core-compute-aat.internal"
        - name: PDF_SERVICE_URL
          value: "http://cmc-pdf-service-aat.service.core-compute-aat.internal"
        - name: REFORM_ENVIRONMENT
          value: "preview"
        - name: REFORM_SERVICE_NAME
          value: "claim-store"
        - name: REFORM_TEAM
          value: "cmc"
        - name: RESPOND_TO_CLAIM_URL
          value: "https://cmc-citizen-frontend-aat.service.core-compute-aat.internal/first-contact/start"
        - name: RPA_NOTIFICATIONS_COUNTYCOURTJUDGEMENTRECIPIENT
          value: "civilmoneyclaims+rpa-county-court-judgement@gmail.com"
        - name: RPA_NOTIFICATIONS_MORETIMEREQUESTEDRECIPIENT
          value: "civilmoneyclaims+rpa-more-time-requested@gmail.com"
        - name: RPA_NOTIFICATIONS_PAIDINFULLRECIPIENT
          value: "civilmoneyclaims+rpa-paid-in-full@gmail.com"
        - name: RPA_NOTIFICATIONS_RESPONSERECIPIENT
          value: "civilmoneyclaims+rpa-defence-response@gmail.com"
        - name: RPA_NOTIFICATIONS_SEALEDCLAIMRECIPIENT
          value: "civilmoneyclaims+rpa-claim-issued@gmail.com"
        - name: RPA_NOTIFICATIONS_SENDER
          value: "noreply@reform.hmcts.net"
        - name: SEND_LETTER_URL
          value: "http://rpe-send-letter-service-aat.service.core-compute-aat.internal"
        - name: SPRING_MAIL_HOST
          value: "mta.reform.hmcts.net"
        - name: SPRING_MAIL_PORT
          value: "25"
        - name: SPRING_MAIL_PROPERTIES_MAIL_SMTP_SSL_TRUST
          value: "mta.reform.hmcts.net"
        - name: SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE
          value: "true"
        - name: SPRING_MAIL_TEST_CONNECTION
          value: "false"
        - name: STAFF_NOTIFICATIONS_RECIPIENT
          value: "civilmoneyclaims+staff-int-tests@gmail.com"
        - name: STAFF_NOTIFICATIONS_SENDER
          value: "noreply@reform.hmcts.net"

        resources:
          requests:
            memory: 512Mi
            cpu: 250m
          limits:
            memory: 2048Mi
            cpu: 1500m

        ports:
        - containerPort: 4400
          name: http
        livenessProbe:
          httpGet:
            path: /health/liveness
            port: 4400
          initialDelaySeconds: 30
          timeoutSeconds: 3
          periodSeconds: 15
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 4400
          initialDelaySeconds: 30
          timeoutSeconds: 3
          periodSeconds: 15
        imagePullPolicy: IfNotPresent
---
# Source: cmc-claim-store/charts/ccd/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cmc-claim-store-pr-1390-postgresql
  labels:
    app: postgresql
    chart: postgresql-6.3.15
    release: "cmc-claim-store-pr-1390"
    heritage: "Helm"
spec:
  serviceName: cmc-claim-store-pr-1390-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: "cmc-claim-store-pr-1390"
      role: master
  template:
    metadata:
      name: cmc-claim-store-pr-1390-postgresql
      labels:
        app: postgresql
        chart: postgresql-6.3.15
        release: "cmc-claim-store-pr-1390"
        heritage: "Helm"
        role: master
    spec:      
      securityContext:
        fsGroup: 1001
      initContainers:
      - name: init-chmod-data
        image: docker.io/bitnami/minideb:stretch
        imagePullPolicy: "Always"
        resources:
          requests:
            cpu: 25m
            memory: 256Mi
        command:
          - sh
          - -c
          - |
            mkdir -p /bitnami/postgresql/data
            chmod 700 /bitnami/postgresql/data
            find /bitnami/postgresql -mindepth 0 -maxdepth 1 -not -name ".snapshot" -not -name "lost+found" | \
              xargs chown -R 1001:1001
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: data
          mountPath: /bitnami/postgresql
          subPath: 
      containers:
      - name: cmc-claim-store-pr-1390-postgresql
        image: docker.io/bitnami/postgresql:11.5.0-debian-9-r60
        imagePullPolicy: "IfNotPresent"
        resources:
          requests:
            cpu: 25m
            memory: 256Mi
        securityContext:
          runAsUser: 1001
        env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: POSTGRESQL_PORT_NUMBER
          value: "5432"
        - name: POSTGRESQL_VOLUME_DIR
          value: "/bitnami/postgresql"
        - name: PGDATA
          value: "/bitnami/postgresql/data"
        - name: POSTGRES_USER
          value: "hmcts"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: cmc-claim-store-pr-1390-postgresql
              key: postgresql-password
        - name: POSTGRES_DB
          value: "ccd"
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready -U "hmcts" -d "ccd" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - -e
            - |
              pg_isready -U "hmcts" -d "ccd" -h 127.0.0.1 -p 5432
              [ -f /opt/bitnami/postgresql/tmp/.initialized ]
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        volumeMounts:
        - name: custom-init-scripts
          mountPath: /docker-entrypoint-initdb.d/
        - name: data
          mountPath: /bitnami/postgresql
          subPath: 
      volumes:
      - name: custom-init-scripts
        configMap:
          name: cmc-claim-store-pr-1390-postgresql-init-scripts
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: cmc-claim-store/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: cmc-claim-store-pr-1390-postgres
  labels:
    app: postgres
    chart: postgresql-2.6.6
    release: "cmc-claim-store-pr-1390"
    heritage: "Helm"
spec:
  serviceName: cmc-claim-store-pr-1390-postgres-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgres
      release: "cmc-claim-store-pr-1390"
      role: master
  template:
    metadata:
      name: cmc-claim-store-pr-1390-postgres
      labels:
        app: postgres
        chart: postgresql-2.6.6
        release: "cmc-claim-store-pr-1390"
        heritage: "Helm"
        role: master
    spec:
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      containers:
      - name: cmc-claim-store-pr-1390-postgres
        image: docker.io/bitnami/postgresql:11.3.0
        imagePullPolicy: "Always"
        resources:
          requests:
            cpu: 25m
            memory: 256Mi
        env:
        - name: POSTGRESQL_USERNAME
          value: "hmcts"
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: cmc-claim-store-pr-1390-postgres
              key: postgresql-password
        - name: POSTGRESQL_DATABASE
          value: "user-profile"
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready -U "hmcts" --host $POD_IP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready -U "hmcts" --host $POD_IP
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        volumeMounts:
        - name: custom-init-scripts
          mountPath: /docker-entrypoint-initdb.d
        
        
      volumes:
      
      - name: custom-init-scripts
        configMap:
          name: cmc-claim-store-pr-1390-postgres-init-scripts
      - name: data
        emptyDir: {}
---
# Source: cmc-claim-store/charts/java/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: cmc-claim-store-pr-1390-java
  labels:    
    app.kubernetes.io/name: cmc-claim-store-pr-1390-java
    helm.sh/chart: java-2.13.3
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: cmc-claim-store-pr-1390-java
  annotations:
    kubernetes.io/ingress.class: traefik
spec:
  rules:
  - host: cmc-claim-store-pr-1390.service.core-compute-preview.internal
    http:
      paths:
      - path: /
        backend:
          serviceName: cmc-claim-store-pr-1390-java
          servicePort: 80

